local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "ComboChronicle Vault | Updates",
    Icon = 12345678901,
    LoadingTitle = "Loading ComboChronicle Vault ❖",
    LoadingSubtitle = "By COMBO_WICK | Bang.E.Line",
    Theme = "Ocean"
})

-- Main Tab
local MainTab = Window:CreateTab("Main", 4483362458)

-- Warning Label
local WarningLabel = MainTab:CreateLabel("WARNING: For Auto Obby, you can get banned if you complete the obby too fast. Wait until about 1 or 2 people complete the obby to avoid suspicion :skull:", 4483362458, Color3.fromRGB(255, 0, 0), false)

-- Create a utility section for common functions
local Utilities = {
    -- Safe touch function to handle errors gracefully
    Touch = function(part, root, delay)
        delay = delay or 0.05
        if part and part:IsA("BasePart") and root then
            pcall(function()
                firetouchinterest(root, part, 0) -- Touch begin
                task.wait(delay)
                firetouchinterest(root, part, 1) -- Touch end
            end)
            return true
        end
        return false
    end,
    
    -- Get character root part safely
    GetRoot = function()
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        return character:WaitForChild("HumanoidRootPart")
    end,
    
    -- Notification function
    Notify = function(title, content, duration)
        Rayfield:Notify({
            Title = title,
            Content = content,
            Duration = duration or 3,
            Image = 4483362458
        })
    end
}

-- Storage for custom win parts (persistent across script executions)
local CustomWinParts = {}

-- Load saved custom win parts from file if possible
pcall(function()
    if isfile and readfile and isfile("ComboChronicleCustomParts.json") then
        CustomWinParts = game:GetService("HttpService"):JSONDecode(readfile("ComboChronicleCustomParts.json"))
    end
end)

-- Function to save custom win parts
local function SaveCustomWinParts()
    pcall(function()
        if writefile then
            writefile("ComboChronicleCustomParts.json", game:GetService("HttpService"):JSONEncode(CustomWinParts))
        end
    end)
end

-- Auto Collect Eggs Button (Improved)
local AutoCollectEggsButton = MainTab:CreateButton({
    Name = "Auto Collect Eggs",
    Callback = function()
        local success, errorMsg = pcall(function()
            local root = Utilities.GetRoot()
            
            -- Check if EasterLobby.Eggs exists
            if not workspace:FindFirstChild("EasterLobby") or not workspace.EasterLobby:FindFirstChild("Eggs") then
                Utilities.Notify("Error", "EasterLobby.Eggs not found in workspace!", 3)
                return
            end
            
            local eggFolder = workspace.EasterLobby.Eggs
            local collectedCount = 0
            
            -- Smart egg collection - get all children and filter only BaseParts
            for _, egg in pairs(eggFolder:GetChildren()) do
                if egg:IsA("BasePart") then
                    if Utilities.Touch(egg, root) then
                        collectedCount = collectedCount + 1
                    end
                    task.wait(0.05) -- Small delay between eggs
                end
            end
            
            Utilities.Notify("Success", "Collected " .. collectedCount .. " eggs!", 3)
        end)

        if not success then
            Utilities.Notify("Error", "Failed to collect eggs: " .. tostring(errorMsg), 3)
        end
    end,
})

-- Manually Win Section (New)
local ManualWinSection = MainTab:CreateSection("Manually Win")

-- Input box for custom win parts
local ManualWinInput = MainTab:CreateInput({
    Name = "Add Custom Win Part ID",
    PlaceholderText = "Paste win part ID here...",
    RemoveTextAfterFocusLost = false,
    Callback = function(winPartID)
        if winPartID and winPartID:len() > 0 then
            -- Add to custom win parts if not already there
            if not table.find(CustomWinParts, winPartID) then
                table.insert(CustomWinParts, winPartID)
                SaveCustomWinParts()
                Utilities.Notify("Success", "Added win part ID: " .. winPartID, 3)
            else
                Utilities.Notify("Info", "This win part ID is already in your list", 3)
            end
        end
    end,
})

-- Button to view/remove custom win parts
local ViewCustomPartsButton = MainTab:CreateButton({
    Name = "View/Remove Custom Win Parts",
    Callback = function()
        -- Create a temporary window to view/manage custom win parts
        local CustomPartsWindow = Rayfield:CreateWindow({
            Name = "COMBO_WICK - UGC",
            LoadingTitle = "Loading Custom Parts",
            LoadingSubtitle = "Manage your custom win part IDs",
            Theme = "Ocean"
        })
        
        local CustomPartsTab = CustomPartsWindow:CreateTab("Custom Parts", 4483362458)
        
        -- Add buttons for each custom part
        for i, partID in ipairs(CustomWinParts) do
            CustomPartsTab:CreateButton({
                Name = i .. ". " .. partID,
                Callback = function()
                    -- Remove this part ID
                    table.remove(CustomWinParts, i)
                    SaveCustomWinParts()
                    Utilities.Notify("Removed", "Removed win part ID from your list", 3)
                    -- Close and reopen the window to refresh
                    CustomPartsWindow:Destroy()
                    ViewCustomPartsButton.Callback()
                end,
            })
        end
        
        -- Add close button
        CustomPartsTab:CreateButton({
            Name = "Close",
            Callback = function()
                CustomPartsWindow:Destroy()
            end,
        })
    end,
})

-- Test Single Win Part
local TestWinPartButton = MainTab:CreateButton({
    Name = "Test Single Win Part",
    Callback = function()
        local success, errorMsg = pcall(function()
            local winPartID = ManualWinInput.Value
            if not winPartID or winPartID:len() == 0 then
                Utilities.Notify("Error", "Please enter a win part ID first", 3)
                return
            end
            
            local root = Utilities.GetRoot()
            local foundPart = false
            
            -- Search for the part in all maps
            for _, mapFolder in pairs(workspace.Map:GetChildren()) do
                if mapFolder:IsA("Folder") or mapFolder:IsA("Model") then
                    local targetPart = mapFolder:FindFirstChild(winPartID)
                    if targetPart and targetPart:IsA("BasePart") then
                        Utilities.Touch(targetPart, root, 0.1)
                        Utilities.Notify("Success", "Touched win part in: " .. mapFolder.Name, 3)
                        foundPart = true
                        break
                    end
                end
            end
            
            if not foundPart then
                Utilities.Notify("Not Found", "Win part ID not found in any current map", 3)
            end
        end)
        
        if not success then
            Utilities.Notify("Error", "Failed to test win part: " .. tostring(errorMsg), 3)
        end
    end,
})

-- Auto Obby Section
local AutoObbySection = MainTab:CreateSection("Auto Obby")

-- Auto Obby Button (Improved)
local AutoObbyButton = MainTab:CreateButton({
    Name = "Auto Complete All Obbies",
    Callback = function()
        local success, errorMsg = pcall(function()
            local root = Utilities.GetRoot()
            
            -- Check if Map exists
            if not workspace:FindFirstChild("Map") then
                Utilities.Notify("Error", "Map not found in workspace!", 3)
                return
            end
            
            -- List of specific win parts
            local specificWinParts = {
                "5223adba-4165-43cf-bff0-dcd3c13a63b7", -- Arcade Adventure
                "90c41781-c7b9-4ac7-b9c4-0347b4b213ab", -- Pastel Paradise
                "cb3215fb-8201-415b-b763-81b657d910ec", -- Honeycomb Kingdom
                "7c3eb497-19e3-4357-a83c-ec63d5565172", -- Eggicted Easter
                "907cfa09-1422-484b-8639-793a62c7e080", -- Spring Fever 1
                "d42196c2-e9c8-44ea-b31e-10f06791252a", -- Spring Fever 2
                "6e795a30-d636-4dd1-91f7-c03b1766d450", -- Pixelated Parkour
                "500aff13-b65b-4edd-aa3c-b719cd7f061d", -- Night of Stars
                "41470dc8-6521-4e8e-8bf7-279ef611eaa3", -- Island Paradise
                "15850df7-0a08-4392-9f3e-47a274a12809", -- Chocolate River 1
                "75ba64ee-08a0-4a6b-bddc-e325ef402c99", -- Chocolate River 2 (Win)
                "de5b4773-2d1a-4c83-818c-8e2e324c4c7e", -- Dreary Evening (Win)
                "e88a8df0-7a37-49a4-88f3-7f15739f35a3", -- Malignant Mountain (Win)
                "bec9ad96-2957-4038-9466-068dd92f882c", -- Eggsthetic Land
                "fcb754dd-8413-43bb-a2df-6760dc996c1a", -- Happy Easter
                "6ad5b822-22c8-47cc-88dd-6cff686c046f", -- Magenta Metropolis (Win)
                "01dd0a04-5f01-49c4-9e1e-b32803b8d639", -- Lunar Valley (Win)
                "5f442350-495e-4a03-aa4b-f3a26e6b23b0", -- Grassy Obstacle (Win)
                "0c0915f2-5709-4ce7-b12d-3caf07db122a", -- Ecstatic Easter (Win)
                "e75b44ef-4a31-44b9-865b-8ae046d2a68a", -- ecastic easter again"
                "918342d2-4598-4fe4-9641-e97069a560bb", -- Magma Core 1
                "8eee3754-34a6-4bdd-8faa-18478ca45295", -- Acid Wasteland
                "0fa17567-16d1-4f21-b3ab-2bcd099a948f",
                "97603c15-c2c1-4254-9264-d70f58a2411f", -- choco factory
                "5bffb366-e045-4f58-9de4-cc57e476d146", -- Corrupt Isles
                "dd872efe-ebcf-472c-b4df-b3978d7bc1ee",
                "5c75d63a-9f32-4a7b-8a4b-9814fc86d3e1",
                "760408ce-429e-4006-9290-e46022d0a894", -- stud bby
                "d9b2b9e4-20c0-449a-b53c-aa5a3c82adfc", -- LAVA OBBY
                "2460f228-7e52-42a6-8ba3-2f063c4e98f0",
                "23518c99-f0bd-48a2-978f-d4fce5889967",
                "d66c9444-5282-43aa-9454-80c91c24fa59", -- temp lab
                "4245e7f7-a9d4-4df3-8163-2a45c3e42b35", -- Eggicted Easter
                "ff9eff69-e640-4b57-b968-64ee8d899709",
                "69c0be1c-2239-467d-baa4-808d56283f59", --choco river
                "23994adb-102b-410e-9b53-e0979f3e353a",
                "f330766b-4c66-468f-9ade-87fd51742e46", -- candy
                "9e92ee25-03ea-4aa5-ab60-a27f671dca1d", --Ethereal Island
                "929c0527-e9c8-41f9-afa1-2db2ca513af9", -- happy easter
                "ebb918a1-a798-45c6-ac2d-9109080648d1" -- Totem Island
            }
            
            -- Add custom win parts to the list
            for _, customPartID in ipairs(CustomWinParts) do
                if not table.find(specificWinParts, customPartID) then
                    table.insert(specificWinParts, customPartID)
                end
            end
            
            local completedCount = 0
            
            -- Create progress indicator
            local progressLabel = MainTab:CreateLabel("Progress: Processing maps...", 4483362458)
            
            -- Loop through each map folder
            for i, mapFolder in pairs(workspace.Map:GetChildren()) do
                if mapFolder:IsA("Folder") or mapFolder:IsA("Model") then
                    -- Update progress
                    progressLabel:Set("Progress: Processing " .. mapFolder.Name .. " (" .. i .. "/" .. #workspace.Map:GetChildren() .. ")")
                    
                    local mapCompleted = false
                    local antiCheatFolder = mapFolder:FindFirstChild("AntiCheat")

                    -- STEP 1: Fire all valid parts in AntiCheat (deep search)
                    if antiCheatFolder then
                        local antiParts = antiCheatFolder:GetDescendants()
                        for _, part in ipairs(antiParts) do
                            if part:IsA("BasePart") then
                                Utilities.Touch(part, root, 0.03)
                            end
                        end
                    end

                    task.wait(0.1)

                    -- STEP 2: Try to find the win part with a smarter approach
                    -- First, check specifically named win parts
                    for _, partID in ipairs(specificWinParts) do
                        local specificWinPart = mapFolder:FindFirstChild(partID)
                        if specificWinPart and specificWinPart:IsA("BasePart") then
                            if Utilities.Touch(specificWinPart, root, 0.1) then
                                completedCount = completedCount + 1
                                mapCompleted = true
                                break
                            end
                        end
                    end
                    
                    -- If not found, look for parts with name patterns that might indicate win parts
                    if not mapCompleted then
                        -- Look for parts with "win" in the name
                        for _, part in pairs(mapFolder:GetDescendants()) do
                            if part:IsA("BasePart") and (
                               string.match(string.lower(part.Name), "win") or
                               string.match(string.lower(part.Name), "finish") or
                               string.match(string.lower(part.Name), "end") or
                               part.Name:find("%-") -- Many UUID parts contain hyphens
                            ) then
                                if Utilities.Touch(part, root, 0.1) then
                                    -- Add this part to custom win parts if successful
                                    if not table.find(CustomWinParts, part.Name) and
                                       not table.find(specificWinParts, part.Name) then
                                        table.insert(CustomWinParts, part.Name)
                                        SaveCustomWinParts()
                                    end
                                    completedCount = completedCount + 1
                                    mapCompleted = true
                                    break
                                end
                            end
                        end
                    end

                    -- Brief wait between maps to avoid detection
                    task.wait(0.2)
                end
            end
            
            -- Update final progress
            progressLabel:Set("Completed " .. completedCount .. " maps!")
            
            Utilities.Notify("Auto Obby Complete", "Successfully completed " .. completedCount .. " obbies!", 5)
        end)

        if not success then
            Utilities.Notify("Error", "Auto Obby failed: " .. tostring(errorMsg), 5)
        end
    end,
})

-- Scan for New Win Parts Button
local ScanWinPartsButton = MainTab:CreateButton({
    Name = "Scan For New Win Parts",
    Callback = function()
        local success, errorMsg = pcall(function()
            local root = Utilities.GetRoot()
            
            if not workspace:FindFirstChild("Map") then
                Utilities.Notify("Error", "Map not found in workspace!", 3)
                return
            end
            
            local scanLabel = MainTab:CreateLabel("Scanning: Starting scan...", 4483362458)
            local foundParts = 0
            
            -- Look through all maps
            for i, mapFolder in pairs(workspace.Map:GetChildren()) do
                if mapFolder:IsA("Folder") or mapFolder:IsA("Model") then
                    scanLabel:Set("Scanning: " .. mapFolder.Name)
                    
                    -- Look for parts that match UUID pattern
                    for _, part in pairs(mapFolder:GetChildren()) do
                        if part:IsA("BasePart") and 
                           string.match(part.Name, "%x%x%x%x%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%x%x%x%x%x%x%x%x") then
                            -- This looks like a UUID - likely a win part
                            if not table.find(CustomWinParts, part.Name) then
                                table.insert(CustomWinParts, part.Name)
                                foundParts = foundParts + 1
                            end
                        end
                    end
                end
            end
            
            SaveCustomWinParts()
            scanLabel:Set("Scan complete! Found " .. foundParts .. " new potential win parts")
            Utilities.Notify("Scan Complete", "Added " .. foundParts .. " new win parts to database", 5)
        end)
        
        if not success then
            Utilities.Notify("Error", "Scan failed: " .. tostring(errorMsg), 3)
        end
    end,
})

-- Keep the UI loaded
Rayfield:LoadConfiguration()
