getgenv().onelinegodmode = true 
local apply = function(char) 
    char.Humanoid.Changed:Connect(function(property) 
        if property == "Health" and char.Humanoid.Health < 100 and getgenv().onelinegodmode then 
            game:GetService("ReplicatedStorage").RemoteEvents.DamagePlayer:FireServer(math.huge * -1) 
        end 
    end) 
end 
game.Players.LocalPlayer.CharacterAdded:Connect(function(character) 
    apply(character) 
end) 
apply(game.Players.LocalPlayer.Character)

if getgenv().StrongholdHubLoaded then
    warn("Stronghold Hub is already running! Aborting duplicate load.")
    return
end
getgenv().StrongholdHubLoaded = false

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Module = loadstring(game:HttpGet("https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/kuhn/kuhn-kseniya-shelly-engine-0366.lua"))()

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local CollectionService = game:GetService("CollectionService")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

Module.Fluent = Fluent

local gameDetected = false
if workspace:FindFirstChild("Map") and workspace:FindFirstChild("Items") then
    gameDetected = true
end

LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    Character = newCharacter
end)

local Window = Fluent:CreateWindow({
    Title = "Stronghold and Diamond Hub",
    SubTitle = "Automatic diamond collection with notifications",
    TabWidth = 160,
    Size = UDim2.new(0, 480, 0, 350), 
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local MainTab = Window:AddTab({ Title = "Main", Icon = "gem" })
local SettingsTab = Window:AddTab({ Title = "Settings", Icon = "settings" })

local currentDiamondsLabel, sessionGainedLabel, sessionTimeLabel, CurrentItemLabel, StrongholdStatusLabel
local TeleportDropdown

MainTab:AddSection("======")

currentDiamondsLabel = MainTab:AddParagraph({
    Title = "Total Diamonds",
    Content = "0"
})

sessionGainedLabel = MainTab:AddParagraph({
    Title = "Diamonds Gained",
    Content = "0"
})

sessionTimeLabel = MainTab:AddParagraph({
    Title = "Time Played",
    Content = "00:00:00"
})

CurrentItemLabel = MainTab:AddParagraph({
    Title = "Equipped Item",
    Content = "Item: " .. Module.currentEquippedItem
})

StrongholdStatusLabel = MainTab:AddParagraph({
    Title = "Stronghold Status",
    Content = "Loading..."
})

MainTab:AddSection("======")

local autoTeleportToggle = MainTab:AddToggle("AutoTeleport", {
    Title = "Auto Teleport After Diamonds",
    Description = "Automatically teleport when diamonds are received",
    Default = false
})

autoTeleportToggle:OnChanged(function(value)
    Module.autoTeleportEnabled = value
    
    if value then
        Fluent:Notify({
            Title = "Auto Teleport Enabled",
            Content = "Will teleport after receiving diamonds",
            Duration = 3
        })
    else
        Fluent:Notify({
            Title = "Auto Teleport Disabled",
            Content = "Will not teleport after diamonds",
            Duration = 2
        })
    end
end)

local testWebhookButton = MainTab:AddButton({
    Title = "Test Discord Webhook",
    Callback = function()
        if Module.webhookUrl ~= "" then
            Module.sendTestWebhook()
        else
            Fluent:Notify({
                Title = "Error",
                Content = "Please configure webhook URL in Settings first",
                Duration = 3
            })
        end
    end
})

MainTab:AddSection("======")

MainTab:AddButton({
    Title = "Teleport to Nearest Open Stronghold",
    Callback = function()
        local nearestOpen = nil
        for _, data in pairs(Module.StrongholdsData) do
            if data.isOpen and data.distance then
                nearestOpen = data
                break
            end
        end
        
        if nearestOpen then
            Module.teleportToStronghold(nearestOpen)
        else
            Fluent:Notify({
                Title = "No Open Strongholds",
                Content = "All strongholds are currently closed",
                Duration = 3
            })
        end
    end
})

TeleportDropdown = MainTab:AddDropdown("TeleportSelect", {
    Title = "Select Stronghold to Teleport",
    Values = {"Click Refresh Data First"},
    Multi = false,
    Callback = function(Value)
        if Value == "Click Refresh Data First" then return end
        
        local selectedData = nil
        for _, data in pairs(Module.StrongholdsData) do
            if data.name == Value then
                selectedData = data
                break
            end
        end
        
        if selectedData then
            Module.teleportToStronghold(selectedData)
        end
    end
})

MainTab:AddSection("======")

MainTab:AddButton({
    Title = "Start Diamond Chest Sequence",
    Callback = function()
        local found = false
        for _, child in ipairs(workspace.Items:GetChildren()) do
            if child.Name == "Stronghold Diamond Chest" then
                found = true
                local itemPosition
                if child:IsA("Model") then
                    itemPosition = child:GetModelCFrame().Position
                elseif child:IsA("BasePart") then
                    itemPosition = child.Position
                end
                
                if itemPosition then
                    Module.diamondChestPosition = itemPosition
                    local success, message = Module.attemptDiamondChestTeleport()
                    if success then
                        Fluent:Notify({
                            Title = "Diamond Chest Success",
                            Content = "All phases completed successfully",
                            Duration = 5
                        })
                    else
                        Fluent:Notify({
                            Title = "Diamond Chest Failed",
                            Content = message,
                            Duration = 5
                        })
                    end
                end
                break
            end
        end
        
        if not found then
            Fluent:Notify({
                Title = "No Diamond Chest",
                Content = "No Diamond Chest currently available",
                Duration = 3
            })
        end
    end
})

local CultistKillerToggle = MainTab:AddToggle("CultistKillerToggle", {
    Title = "Enable Cultist Killer",
    Description = "Automatically attack cultist enemies",
    Default = false,
    Callback = function(Value)
        Module.CULTIST_KILLER_ENABLED = Value
        if Value then
            Module.setupCultistKiller()
            Module.safeNotify("Cultist Killer Enabled", "Now automatically attacking cultist enemies", 3, "cultist_enabled")
        else
            if Module.cultistKillerConnection then
                Module.cultistKillerConnection:Disconnect()
                Module.cultistKillerConnection = nil
            end
            Module.safeNotify("Cultist Killer Disabled", "Stopped automatic cultist killing", 3, "cultist_disabled")
        end
    end
})

MainTab:AddSection("======")

MainTab:AddButton({
    Title = "Stop Circle Search",
    Callback = function()
        if Module.circleLoopActive then
            Module.circleLoopActive = false
            Module.manuallyStoppedLoop = true
            Module.safeNotify("Circle Search Stopped", "Search pattern has been stopped manually", 3, "circle_manual_stop")
        else
            Fluent:Notify({
                Title = "Circle Search Inactive",
                Content = "No circle search is currently running",
                Duration = 3
            })
        end
    end
})

MainTab:AddButton({
    Title = "Enable Auto Circle Search",
    Callback = function()
        Module.manuallyStoppedLoop = false
        Module.safeNotify("Auto Search Enabled", "Circle search can now start automatically when needed", 3, "auto_search_enabled")
        task.wait(1)
        Module.checkForAutoCircleLoop()
    end
})

MainTab:AddButton({
    Title = "Refresh All Data",
    Callback = function()
        Module.updateStrongholdsData()
        Module.updateInventory()
        
        local strongholdNames = {}
        for _, data in pairs(Module.StrongholdsData) do
            table.insert(strongholdNames, data.name)
        end
        
        if #strongholdNames > 0 then
            TeleportDropdown:SetValues(strongholdNames)
        end
        
        Module.safeNotify("Data Refreshed", string.format("Updated %d strongholds and %d items", #Module.StrongholdsData, #Module.inventoryItems), 3, "data_refresh")
    end
})

SettingsTab:AddSection("======")

local webhookInput = SettingsTab:AddInput("WebhookURL", {
    Title = "Discord Webhook URL",
    Default = Module.webhookUrl,
    Placeholder = "https://discord.com/api/webhooks/...",
    Numeric = false,
    Finished = false,
    Callback = function(value)
        Module.webhookUrl = value
        Fluent:Notify({
            Title = "Webhook Updated",
            Content = "Webhook URL has been saved",
            Duration = 2
        })
    end
})

local userIdInput = SettingsTab:AddInput("UserID", {
    Title = "Discord User ID",
    Default = Module.userIdToPing,
    Placeholder = "123456789012345678",
    Numeric = false,
    Finished = false,
    Callback = function(value)
        Module.userIdToPing = value
        Fluent:Notify({
            Title = "User ID Updated",
            Content = "Discord User ID has been saved",
            Duration = 2
        })
    end
})

SettingsTab:AddSection("======")

local enableMentionsToggle = SettingsTab:AddToggle("EnableMentions", {
    Title = "Enable Everyone Mentions",
    Description = "Mention everyone in Discord notifications",
    Default = Module.enableMentions,
    Callback = function(value)
        Module.enableMentions = value
    end
})

local enableUserPingToggle = SettingsTab:AddToggle("EnableUserPing", {
    Title = "Enable User Ping",
    Description = "Ping specific user in Discord notifications",
    Default = Module.enableUserPing,
    Callback = function(value)
        Module.enableUserPing = value
    end
})

local NotificationsToggle = SettingsTab:AddToggle("Notifications", {
    Title = "Enable Game Notifications",
    Description = "Show notifications in game",
    Default = true,
    Callback = function(value)
        Module.notifications = value
    end
})

SettingsTab:AddSection("======")

local skipTimerOptions = {}
for minutes = 0, 20 do
    for seconds = 0, 59, 15 do
        if minutes == 0 and seconds == 0 then
            table.insert(skipTimerOptions, "Disabled")
        else
            local displayText = string.format("%02d:%02d", minutes, seconds)
            table.insert(skipTimerOptions, displayText)
        end
        if minutes == 20 and seconds > 0 then break end
    end
end

local SkipTimerDropdown = SettingsTab:AddDropdown("SkipTimer", {
    Title = "Skip Stronghold Timer When Above",
    Description = "Auto teleport when stronghold timer exceeds this time",
    Values = skipTimerOptions,
    Multi = false,
    Default = 1,
    Callback = function(value)
        if value == "Disabled" then
            Module.skipTimerEnabled = false
            Module.skipTimerThreshold = 0
            Module.hasSkippedThisSession = false
        else
            Module.skipTimerEnabled = true
            local minutes, seconds = value:match("(%d+):(%d+)")
            Module.skipTimerThreshold = tonumber(minutes) * 60 + tonumber(seconds)
            Module.hasSkippedThisSession = false
        end
    end
})

SettingsTab:AddButton({
    Title = "Reset Skip Status",
    Callback = function()
        Module.hasSkippedThisSession = false
        Fluent:Notify({
            Title = "Skip Status Reset",
            Content = "Skip teleport can now trigger again",
            Duration = 3
        })
    end
})

SettingsTab:AddSection("======")

local helpButton = SettingsTab:AddButton({
    Title = "Copy Discord User ID Instructions",
    Callback = function()
        setclipboard("1. Enable Developer Mode in Discord (Settings > Advanced > Developer Mode)\n2. Right-click on any user\n3. Click 'Copy User ID'\n4. Paste the ID in the field above")
        Fluent:Notify({
            Title = "Instructions Copied",
            Content = "Instructions copied to clipboard",
            Duration = 3
        })
    end
})

SettingsTab:AddSection("======")

SaveManager:SetLibrary(Fluent)
SaveManager:SetFolder("StrongholdHub/configs")
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({"currentDiamondsLabel","sessionGainedLabel","sessionTimeLabel","CurrentItemLabel"})
SaveManager:BuildConfigSection(SettingsTab)

InterfaceManager:SetLibrary(Fluent)
InterfaceManager:SetFolder("StrongholdHub")
InterfaceManager:BuildInterfaceSection(SettingsTab)

local function initialize()
    for _, stronghold in pairs(CollectionService:GetTagged("Stronghold")) do
        Module.onStrongholdAdded(stronghold)
    end
    
    CollectionService:GetInstanceAddedSignal("Stronghold"):Connect(Module.onStrongholdAdded)
    CollectionService:GetInstanceRemovedSignal("Stronghold"):Connect(Module.onStrongholdRemoved)
    
    LocalPlayer.AttributeChanged:Connect(function(attribute)
        if attribute == "Diamonds" then
            task.wait(0.5)
            Module.onDiamondsChanged()
        end
    end)
    
    RunService.Heartbeat:Connect(function()
        for name, _ in pairs(Module.strongholds) do
            Module.updateTimer(name)
        end
        
        Module.getCurrentEquipped()
        CurrentItemLabel:SetDesc("Item: " .. Module.currentEquippedItem)
        
        local strongholdText = ""
        if #Module.StrongholdsData == 0 then
            strongholdText = "No strongholds found"
        else
            local displayCount = math.min(3, #Module.StrongholdsData)
            for i = 1, displayCount do
                local data = Module.StrongholdsData[i]
                local status = data.isOpen and "OPEN" or Module.formatStrongholdTime(data.timeLeft)
                local distance = data.distance and string.format("%.0fm %s", data.distance, data.compassDir) or "Unknown"
                local statusIcon = data.isOpen and "[OPEN]" or "[CLOSED]"
                
                strongholdText = strongholdText .. string.format("%s %s (L%d): %s | %s", 
                    statusIcon, data.name, data.level, status, distance)
                if i < displayCount then strongholdText = strongholdText .. "\n" end
            end
            
            if #Module.StrongholdsData > 3 then
                strongholdText = strongholdText .. string.format("\n... and %d more", #Module.StrongholdsData - 3)
            end
        end
        StrongholdStatusLabel:SetDesc(strongholdText)
        
        currentDiamondsLabel:SetDesc(tostring(Module.currentDiamonds))
        sessionGainedLabel:SetDesc("+" .. tostring(Module.sessionGained))
        
        local elapsedTime = tick() - Module.startTime
        sessionTimeLabel:SetDesc(Module.formatTime(elapsedTime))
    end)
    
    local client = require(LocalPlayer.PlayerScripts.Client)
    if client.Events and client.Events.StrongholdComplete then
        client.Events.StrongholdComplete:Connect(function(inFortress)
            if inFortress then
                Fluent:Notify({
                    Title = "Stronghold Completed!",
                    Content = "Great job! The stronghold will reopen later.",
                    Duration = 5
                })
            end
        end)
    end
    
    task.spawn(function()
        while true do
            task.wait(10)
            Module.updateInventory()
        end
    end)
end

task.spawn(function()
    task.wait(3)
    
    Module.initialDiamonds = Module.getCurrentDiamonds()
    Module.currentDiamonds = Module.initialDiamonds
    
    Module.setupEnhancedDiamondChestDetection()
    Module.updateStrongholdsData()
    Module.updateInventory()
    Module.setupUpdates()
    initialize()
    
    local strongholdNames = {}
    for _, data in pairs(Module.StrongholdsData) do
        table.insert(strongholdNames, data.name)
    end
    
    if #strongholdNames > 0 then
        TeleportDropdown:SetValues(strongholdNames)
    end
    
    if gameDetected then
        Module.safeNotify("Enhanced Hub Loaded!", 
                  string.format("Stronghold + Diamond tracking enabled! Found %d strongholds", #Module.StrongholdsData), 
                  5, 
                  "hub_loaded")
    else
        Module.safeNotify("Warning", "Game may not be supported", 5, "game_warning")
    end
    
    task.wait(2)
    Module.checkForAutoCircleLoop()
end)

task.spawn(function()
    task.wait(0.5)
    
    local success, err = pcall(function()
        if SaveManager.LoadAutoloadConfig then
            SaveManager:LoadAutoloadConfig()
        else
            local configs = SaveManager:GetConfigs()
            if configs and #configs > 0 then
                SaveManager:LoadConfig(configs[1])
            end
        end
    end)
    
    if success then
        Fluent:Notify({
            Title = "Config Loaded",
            Content = "Previous settings have been restored!",
            Duration = 3
        })
    else
        print("No previous config found or failed to load:", err)
    end
end)

game:BindToClose(Module.cleanup)
