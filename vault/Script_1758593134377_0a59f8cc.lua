-- Script_1758593134377
-- Script ID: 0a59f8cc0637f1c90c3be7335598f005
-- Migrated: 2025-10-02T20:31:56.140Z
-- Auto-generated by Lua Script Vault

getgenv().onelinegodmode = true
local apply = function(char)
    char.Humanoid.Changed:Connect(function(property)
        if property == "Health" and char.Humanoid.Health < 100 and getgenv().onelinegodmode then
            game:GetService("ReplicatedStorage").RemoteEvents.DamagePlayer:FireServer(math.huge * -1)
        end
    end)
end
game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
    apply(character)
end)
apply(game.Players.LocalPlayer.Character)



loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local Players = game:GetService("Players")
local CollectionService = game:GetService("CollectionService")
local TweenService = game:GetService("TweenService")
local LocalPlayer = Players.LocalPlayer

-- Settings
local CHILD_NAMES = {"DinoKid", "KrakenKid", "SquidKid", "KoalaKid"}
local TELEPORT_OFFSET = Vector3.new(0, 5, 0) -- Offset above target position

-- Variables
local NoticeBoard = nil
local MissingKidsTracker = nil
local ChildrenData = {}
local Connections = {}

-- Function to get notice board reference
local function getNoticeBoard()
    if not NoticeBoard then
        pcall(function()
            NoticeBoard = workspace:FindFirstChild("Map") and 
                         workspace.Map:FindFirstChild("Campground") and
                         workspace.Map.Campground:FindFirstChild("NoticeBoard")
        end)
    end
    return NoticeBoard
end

-- Function to get missing kids tracker
local function getMissingKidsTracker()
    if not MissingKidsTracker then
        local board = getNoticeBoard()
        if board then
            MissingKidsTracker = board:FindFirstChild("MissingKidTracker")
        end
    end
    return MissingKidsTracker
end

-- Function to get child NPC by ID
local function getChildNPC(kidId)
    local childNPCs = CollectionService:GetTagged("ChildNPC")
    for _, npc in pairs(childNPCs) do
        if npc:GetAttribute("KidId") == kidId then
            return npc
        end
    end
    return nil
end

-- Function to get child location from attributes
local function getChildLocationFromAttributes(kidId)
    local success, location = pcall(function()
        if workspace.Map and workspace.Map:FindFirstChild("MissingKids") then
            local loc = workspace.Map.MissingKids:GetAttribute(kidId)
            if loc then
                return Vector3.new(loc.X, 0, loc.Z)
            end
        end
        return nil
    end)
    return success and location or nil
end

-- Function to calculate distance and direction
local function calculateDistanceAndDirection(targetPos)
    if not LocalPlayer.Character or not LocalPlayer.Character.PrimaryPart then
        return nil, nil, nil
    end
    
    local playerPos = LocalPlayer.Character.PrimaryPart.Position
    local distance = (targetPos - playerPos).Magnitude
    local direction = (targetPos - playerPos).Unit
    
    -- Calculate compass direction
    local angle = math.atan2(direction.X, direction.Z)
    local degrees = math.deg(angle)
    if degrees < 0 then degrees = degrees + 360 end
    
    local compassDirections = {"N", "NE", "E", "SE", "S", "SW", "W", "NW"}
    local directionIndex = math.floor((degrees + 22.5) / 45) % 8 + 1
    local compassDir = compassDirections[directionIndex]
    
    return distance, direction, compassDir
end

-- Function to check if child is found
local function isChildFound(kidId)
    local tracker = getMissingKidsTracker()
    if tracker then
        local kidFolder = tracker:FindFirstChild(kidId)
        if kidFolder then
            return kidFolder:GetAttribute("Found") == true
        end
    end
    return false
end

-- Function to teleport player
local function teleportPlayer(targetPosition)
    if not LocalPlayer.Character or not LocalPlayer.Character.PrimaryPart then
        Fluent:Notify({
            Title = "Teleport Failed",
            Content = "Character not found",
            Duration = 3
        })
        return false
    end
    
    local character = LocalPlayer.Character
    local humanoidRootPart = character.PrimaryPart
    
    -- Add offset to avoid getting stuck in ground
    local teleportPosition = targetPosition + TELEPORT_OFFSET
    
    -- Teleport
    humanoidRootPart.CFrame = CFrame.new(teleportPosition)
    
    return true
end

-- Function to teleport to child
local function teleportToChild(kidId)
    local data = ChildrenData[kidId]
    
    if not data then
        Fluent:Notify({
            Title = "Teleport Failed",
            Content = "Child data not found",
            Duration = 3
        })
        return
    end
    
    if data.found then
        Fluent:Notify({
            Title = "Already Found",
            Content = string.format("%s has already been rescued!", kidId),
            Duration = 3
        })
        return
    end
    
    if not data.position then
        Fluent:Notify({
            Title = "Teleport Failed",
            Content = string.format("%s location not available", kidId),
            Duration = 3
        })
        return
    end
    
    if teleportPlayer(data.position) then
        Fluent:Notify({
            Title = "Teleported!",
            Content = string.format("Teleported to %s", kidId),
            Duration = 3
        })
    end
end

-- Function to teleport to nearest child
local function teleportToNearest()
    local nearest = nil
    local nearestDistance = math.huge
    
    for _, data in pairs(ChildrenData) do
        if not data.found and data.distance and data.distance < nearestDistance then
            nearestDistance = data.distance
            nearest = data
        end
    end
    
    if not nearest then
        Fluent:Notify({
            Title = "No Missing Children",
            Content = "All located children have been found!",
            Duration = 3
        })
        return
    end
    
    if teleportPlayer(nearest.position) then
        Fluent:Notify({
            Title = "Teleported to Nearest!",
            Content = string.format("Teleported to %s (%dm away)", nearest.id, math.floor(nearest.distance)),
            Duration = 4
        })
    end
end

-- Function to update children data
local function updateChildrenData()
    for i, kidId in ipairs(CHILD_NAMES) do
        local childData = {
            id = kidId,
            index = i,
            found = isChildFound(kidId),
            npc = getChildNPC(kidId),
            attributeLocation = getChildLocationFromAttributes(kidId),
            distance = nil,
            direction = nil,
            compassDir = nil,
            position = nil
        }
        
        -- Find position from any available source
        local actualPos = nil
        if childData.npc and childData.npc.PrimaryPart then
            actualPos = childData.npc.PrimaryPart.Position
        elseif childData.attributeLocation then
            actualPos = childData.attributeLocation
        end
        
        if actualPos then
            local dist, dir, compass = calculateDistanceAndDirection(actualPos)
            childData.distance = dist
            childData.direction = dir
            childData.compassDir = compass
            childData.position = actualPos
        end
        
        ChildrenData[kidId] = childData
    end
end

-- Function to setup hooks for automatic updates
local function setupHooks()
    -- Hook for when children are found (attribute changes)
    local function setupChildFoundHooks()
        local tracker = getMissingKidsTracker()
        if tracker then
            for _, kidId in ipairs(CHILD_NAMES) do
                local kidFolder = tracker:FindFirstChild(kidId)
                if kidFolder and not Connections[kidId .. "_found"] then
                    Connections[kidId .. "_found"] = kidFolder:GetAttributeChangedSignal("Found"):Connect(function()
                        updateChildrenData()
                    end)
                end
            end
        end
    end
    
    -- Hook for when child NPCs are added/removed
    if not Connections["childNPC_added"] then
        Connections["childNPC_added"] = CollectionService:GetInstanceAddedSignal("ChildNPC"):Connect(function(child)
            updateChildrenData()
        end)
    end
    
    if not Connections["childNPC_removed"] then
        Connections["childNPC_removed"] = CollectionService:GetInstanceRemovedSignal("ChildNPC"):Connect(function(child)
            updateChildrenData()
        end)
    end
    
    -- Hook for MissingKids attribute changes
    if workspace.Map and workspace.Map:FindFirstChild("MissingKids") then
        for _, kidId in ipairs(CHILD_NAMES) do
            if not Connections[kidId .. "_location"] then
                Connections[kidId .. "_location"] = workspace.Map.MissingKids:GetAttributeChangedSignal(kidId):Connect(function()
                    updateChildrenData()
                end)
            end
        end
    end
    
    -- Hook for quest progress changes
    local board = getNoticeBoard()
    if board and not Connections["quest_progress"] then
        Connections["quest_progress"] = board:GetAttributeChangedSignal("KidProgress"):Connect(function()
            updateChildrenData()
            setupChildFoundHooks() -- Setup new hooks for newly available children
        end)
    end
    
    -- Setup child found hooks
    setupChildFoundHooks()
    
    -- Hook for character respawn
    if not Connections["character_respawn"] then
        Connections["character_respawn"] = LocalPlayer.CharacterAdded:Connect(function()
            task.wait(2)
            updateChildrenData()
        end)
    end
end

-- Function to show all children locations
local function showAllChildren()
    local foundCount = 0
    local locatedCount = 0
    local message = ""
    
    for i, kidId in ipairs(CHILD_NAMES) do
        local data = ChildrenData[kidId]
        
        if data.found then
            foundCount = foundCount + 1
            message = message .. string.format("%s: FOUND", kidId)
        elseif data.position then
            locatedCount = locatedCount + 1
            message = message .. string.format("%s: %dm %s", 
                kidId, math.floor(data.distance), data.compassDir or "?")
        else
            message = message .. string.format("%s: Not located", kidId)
        end
        
        if i < #CHILD_NAMES then message = message .. "\n" end
    end
    
    local title = string.format("Children (%d found, %d located)", foundCount, locatedCount)
    
    Fluent:Notify({
        Title = title,
        Content = message,
        Duration = 6
    })
end

-- Function to find nearest missing child
local function findNearest()
    local nearest = nil
    local nearestDistance = math.huge
    
    for _, data in pairs(ChildrenData) do
        if not data.found and data.distance and data.distance < nearestDistance then
            nearestDistance = data.distance
            nearest = data
        end
    end
    
    if not nearest then
        Fluent:Notify({
            Title = "No Missing Children",
            Content = "All located children have been found!",
            Duration = 3
        })
        return
    end
    
    local title = string.format("Nearest: %s", nearest.id)
    local message = string.format("Distance: %dm\nDirection: %s", 
        math.floor(nearest.distance), nearest.compassDir or "Unknown")
    
    if nearest.position then
        message = message .. string.format("\nPos: %.0f, %.0f, %.0f", 
            nearest.position.X, nearest.position.Y, nearest.position.Z)
    end
    
    Fluent:Notify({
        Title = title,
        Content = message,
        Duration = 5
    })
end

-- Function to cleanup connections
local function cleanup()
    for _, connection in pairs(Connections) do
        if connection then
            connection:Disconnect()
        end
    end
    Connections = {}
end

-- Create GUI
local Window = Fluent:CreateWindow({
    Title = "Child Tracker Pro",
    SubTitle = "Find and teleport to missing children",
    TabWidth = 160,
    Size = UDim2.fromOffset(450, 400),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local MainTab = Window:AddTab({ Title = "Tracker", Icon = "users" })
local TeleportTab = Window:AddTab({ Title = "Teleport", Icon = "zap" })

-- Main Actions
MainTab:AddSection("Actions")

local ShowAllButton = MainTab:AddButton({
    Title = "Show All Children",
    Description = "Display all children locations and status",
    Callback = function()
        showAllChildren()
    end
})

local NearestButton = MainTab:AddButton({
    Title = "Find Nearest",
    Description = "Get directions to closest missing child",
    Callback = function()
        findNearest()
    end
})

-- Individual Child Selection
MainTab:AddSection("Individual Check")

local ChildDropdown = MainTab:AddDropdown("ChildSelect", {
    Title = "Check Specific Child",
    Description = "Select a child to check",
    Values = {"DinoKid", "KrakenKid", "SquidKid", "KoalaKid"},
    Default = "DinoKid",
    Multi = false,
    Callback = function(Value)
        local data = ChildrenData[Value]
        
        if not data then
            Fluent:Notify({
                Title = "Error",
                Content = "Child data not found",
                Duration = 3
            })
            return
        end
        
        local title = string.format("%s Status", Value)
        local message = ""
        
        if data.found then
            message = "Already found and rescued!"
        elseif data.position then
            message = string.format("Missing - %dm %s\nPosition: %.0f, %.0f, %.0f", 
                math.floor(data.distance), data.compassDir or "Unknown",
                data.position.X, data.position.Y, data.position.Z)
        else
            message = "Missing - Location not available"
        end
        
        Fluent:Notify({
            Title = title,
            Content = message,
            Duration = 5
        })
    end
})

-- Settings
MainTab:AddSection("Settings")

local RefreshButton = MainTab:AddButton({
    Title = "Refresh Data",
    Description = "Manually update all data",
    Callback = function()
        updateChildrenData()
        Fluent:Notify({
            Title = "Data Refreshed",
            Content = "All child data updated",
            Duration = 2
        })
    end
})

-- Teleport Tab
TeleportTab:AddSection("Quick Teleport")

local TeleportNearestButton = TeleportTab:AddButton({
    Title = "Teleport to Nearest",
    Description = "Instantly teleport to the closest missing child",
    Callback = function()
        teleportToNearest()
    end
})

TeleportTab:AddSection("Individual Teleports")

-- Create teleport buttons for each child
for _, kidId in ipairs(CHILD_NAMES) do
    local TeleportButton = TeleportTab:AddButton({
        Title = string.format("Teleport to %s", kidId),
        Description = string.format("Teleport directly to %s", kidId),
        Callback = function()
            teleportToChild(kidId)
        end
    })
end

TeleportTab:AddSection("Teleport Settings")

local TeleportDropdown = TeleportTab:AddDropdown("TeleportSelect", {
    Title = "Select & Teleport",
    Description = "Choose a child and teleport instantly",
    Values = {"DinoKid", "KrakenKid", "SquidKid", "KoalaKid"},
    Default = "DinoKid",
    Multi = false,
    Callback = function(Value)
        teleportToChild(Value)
    end
})

-- Initialize
task.spawn(function()
    -- Wait for game to load
    task.wait(3)
    
    -- Initial data load
    updateChildrenData()
    
    -- Setup event hooks
    setupHooks()
    
    Fluent:Notify({
        Title = "Child Tracker Pro Ready",
        Content = "Tracking and teleport features initialized!",
        Duration = 3
    })
end)

-- Cleanup on script end
game:BindToClose(cleanup)

getgenv().onelinegodmode = true
local apply = function(char)
    char.Humanoid.Changed:Connect(function(property)
        if property == "Health" and char.Humanoid.Health < 100 and getgenv().onelinegodmode then
            game:GetService("ReplicatedStorage").RemoteEvents.DamagePlayer:FireServer(math.huge * -1)
        end
    end)
end
game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
    apply(character)
end)
apply(game.Players.LocalPlayer.Character)
