local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local StarterGui = game:GetService("StarterGui")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local MarketplaceService = game:GetService("MarketplaceService")
local Lighting = game:GetService("Lighting")
local CoreGui = game:GetService("CoreGui")
local PhysicsService = game:GetService("PhysicsService")
local SoundService = game:GetService("SoundService")
local ContextActionService = game:GetService("ContextActionService")

local discordWebhookUrl = ""
local toggleKey = Enum.KeyCode.F7
local advancedScanKey = Enum.KeyCode.F8
local stealthModeKey = Enum.KeyCode.F9
local quickScanKey = Enum.KeyCode.F10
local exportKey = Enum.KeyCode.F11

local suspiciousKeywords = {
    -- Core Exploits (High Priority)
    "cheat", "hack", "exploit", "noclip", "infjump", "speedhack", "aimbot", "wallhack",
    "triggerbot", "esp", "tracers", "autofarm", "dupe", "silentaim", "ragebot", "autowin",
    "fly", "crash", "godmode",
    -- Scripting Exploits (Technical Terms)
    "injection", "bypass", "setreadonly", "getrawmetatable", "hookmetamethod", "loadstring",
    "require", "backdoor", "getgenv", "queue_on_teleport", "setfflag", "override",
    -- Anticheat/Protection (Defensive Terms)
    "anticheat", "detector", "obfuscate", "protection", "blacklist", "whitelist", "warden",
    "integrity", "checksum", "verify", "sanity", "anti", "tamper", "checkcaller",
    -- Moderation (Enforcement)
    "kick", "ban", "admin",
    -- Networking (Remote Abuse)
    "remoteevent", "remotefunction", "invoke", "packet", "flood",
    -- Executors (Tool Detection)
    "synapse", "krnl", "scriptware", "delta", "fluxus", "deltaexecutor", "evon", "oxygen", "awp", "solara", 
    -- Malware (Roblox-Relevant)
    "virus", "stealer", "keylogger"
}

local allScriptPaths = {}
local allRemotePaths = {}
local exploitSignatures = {}
local networkTrafficLogs = {}
local memoryDumps = {}
local behaviorPatterns = {}
local detectedThreats = {}
local physicsAnomalies = {}
local soundEvents = {}
local scriptExecutionLogs = {}

Players.LocalPlayer.Idled:Connect(function()
    local vu = game:GetService("VirtualUser")
    vu:CaptureController()
    vu:ClickButton2(Vector2.new(0,0))
    StarterGui:SetCore("SendNotification", {
        Title = "Anti-AFK",
        Text = "Anti-AFK activated!",
        Duration = 3
    })
end)

local function getSuspicionLevel(code)
    local lowerCode = code:lower()
    local score = 0
    local matchedKeywords = {}
    for _, keyword in ipairs(suspiciousKeywords) do
        if lowerCode:find(keyword) then
            score = score + (string.len(keyword) > 5 and 2 or 1)
            table.insert(matchedKeywords, keyword)
        end
    end
    if score >= 5 then
        return "HIGH RISK", score, matchedKeywords
    elseif score >= 2 then
        return "MEDIUM RISK", score, matchedKeywords
    elseif score > 0 then
        return "LOW RISK", score, matchedKeywords
    else
        return "CLEAR", score, matchedKeywords
    end
end

local function tryDecompile(obj)
    local attempts = {}
    if _G.dex and typeof(_G.dex.decompile) == "function" then
        local success, result = pcall(_G.dex.decompile, obj)
        table.insert(attempts, success and "Dex: " .. result or "Dex Error: " .. tostring(result))
    end
    if typeof(decompile) == "function" then
        local success, result = pcall(decompile, obj)
        table.insert(attempts, success and "Native: " .. result or "Native Error: " .. tostring(result))
    end
    if _G.syn and typeof(_G.syn.decompile) == "function" then
        local success, result = pcall(_G.syn.decompile, obj)
        table.insert(attempts, success and "Synapse: " .. result or "Synapse Error: " .. tostring(result))
    end
    return #attempts > 0 and table.concat(attempts, "\n\n") or "No decompiler available."
end

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Size = UDim2.new(0, 800, 0, 600)
MainFrame.Position = UDim2.new(0.5, -400, 0.5, -300)
MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MainFrame.Parent = ScreenGui
MainFrame.ClipsDescendants = true

local MainCorner = Instance.new("UICorner")
MainCorner.CornerRadius = UDim.new(0, 10)
MainCorner.Parent = MainFrame

local TitleLabel = Instance.new("TextLabel")
TitleLabel.Size = UDim2.new(1, 0, 0, 40)
TitleLabel.Position = UDim2.new(0, 0, 0, 0)
TitleLabel.BackgroundTransparency = 1
TitleLabel.Text = "COMBO_WICK Anticheat & Exploit Scanner Pro"
TitleLabel.TextColor3 = Color3.new(1, 1, 1)
TitleLabel.Font = Enum.Font.SourceSansBold
TitleLabel.TextScaled = true
TitleLabel.Parent = MainFrame

local dragging = false
local dragStart, startPos
MainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then dragging = false end
        end)
    end
end)
MainFrame.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed then
        if input.KeyCode == toggleKey then
            MainFrame.Visible = not MainFrame.Visible
        elseif input.KeyCode == advancedScanKey then
            scanForAnticheatsAdvanced()
        elseif input.KeyCode == stealthModeKey then
            toggleStealthMode()
        elseif input.KeyCode == quickScanKey then
            quickScan()
        elseif input.KeyCode == exportKey then
            exportAllData()
        end
    end
end)

local TabBar = Instance.new("Frame")
TabBar.Size = UDim2.new(1, 0, 0, 40)
TabBar.Position = UDim2.new(0, 0, 0, 40)
TabBar.BackgroundTransparency = 1
TabBar.Parent = MainFrame

local tabButtons = {
    {"Scripts", Color3.fromRGB(50, 50, 50)},
    {"Remotes", Color3.fromRGB(70, 70, 70)},
    {"Network", Color3.fromRGB(60, 60, 60)},
    {"Memory", Color3.fromRGB(80, 80, 80)},
    {"Behavior", Color3.fromRGB(90, 90, 90)},
    {"Physics", Color3.fromRGB(100, 50, 50)},
    {"Audio", Color3.fromRGB(50, 100, 50)},
    {"Execution", Color3.fromRGB(50, 50, 100)}
}
local tabFrames = {}
local currentTab = "Scripts"

for i, tab in ipairs(tabButtons) do
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(0.125, -5, 1, 0)
    btn.Position = UDim2.new((i-1) * 0.125, 5, 0, 0)
    btn.Text = tab[1]
    btn.BackgroundColor3 = tab[2]
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.Parent = TabBar
    btn.MouseButton1Click:Connect(function()
        switchTab(tab[1])
    end)
end

local CopyAllButtons = {}
for _, tab in ipairs(tabButtons) do
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(0, 80, 0, 25)
    btn.Position = UDim2.new(1, -85, 0, 5)
    btn.Text = "Copy All"
    btn.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.Visible = (tab[1] == "Scripts")
    btn.Parent = TabBar
    CopyAllButtons[tab[1]] = btn
end

local ContentFrame = Instance.new("Frame")
ContentFrame.Size = UDim2.new(1, 0, 0, 510)
ContentFrame.Position = UDim2.new(0, 0, 0, 80)
ContentFrame.BackgroundTransparency = 1
ContentFrame.Parent = MainFrame

for _, tab in ipairs(tabButtons) do
    local frame = Instance.new("ScrollingFrame")
    frame.Size = UDim2.new(1, -20, 1, -20)
    frame.Position = UDim2.new(0, 10, 0, 0)
    frame.BackgroundTransparency = 1
    frame.ScrollBarThickness = 4
    frame.Visible = (tab[1] == "Scripts")
    frame.Parent = ContentFrame
    frame.Name = tab[1] .. "Frame"
    
    local listLayout = Instance.new("UIListLayout")
    listLayout.Parent = frame
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Padding = UDim.new(0, 5)
    listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        frame.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y)
    end)
    
    tabFrames[tab[1]] = frame
end

local ScanButton = Instance.new("TextButton")
ScanButton.Size = UDim2.new(0, 150, 0, 50)
ScanButton.Position = UDim2.new(0.1, -75, 1, -60)
ScanButton.BackgroundColor3 = Color3.fromRGB(0, 170, 85)
ScanButton.Text = "Basic Scan"
ScanButton.TextColor3 = Color3.new(1, 1, 1)
ScanButton.Font = Enum.Font.SourceSansBold
ScanButton.TextSize = 20
ScanButton.Parent = MainFrame

local AdvancedScanButton = Instance.new("TextButton")
AdvancedScanButton.Size = UDim2.new(0, 150, 0, 50)
AdvancedScanButton.Position = UDim2.new(0.3, -75, 1, -60)
AdvancedScanButton.BackgroundColor3 = Color3.fromRGB(0, 85, 170)
AdvancedScanButton.Text = "Advanced Scan"
AdvancedScanButton.TextColor3 = Color3.new(1, 1, 1)
AdvancedScanButton.Font = Enum.Font.SourceSansBold
AdvancedScanButton.TextSize = 20
AdvancedScanButton.Parent = MainFrame

local StealthButton = Instance.new("TextButton")
StealthButton.Size = UDim2.new(0, 150, 0, 50)
StealthButton.Position = UDim2.new(0.5, -75, 1, -60)
StealthButton.BackgroundColor3 = Color3.fromRGB(170, 0, 85)
StealthButton.Text = "Stealth: OFF"
StealthButton.TextColor3 = Color3.new(1, 1, 1)
StealthButton.Font = Enum.Font.SourceSansBold
StealthButton.TextSize = 20
StealthButton.Parent = MainFrame

local QuickScanButton = Instance.new("TextButton")
QuickScanButton.Size = UDim2.new(0, 150, 0, 50)
QuickScanButton.Position = UDim2.new(0.7, -75, 1, -60)
QuickScanButton.BackgroundColor3 = Color3.fromRGB(85, 0, 170)
QuickScanButton.Text = "Quick Scan"
QuickScanButton.TextColor3 = Color3.new(1, 1, 1)
QuickScanButton.Font = Enum.Font.SourceSansBold
QuickScanButton.TextSize = 20
QuickScanButton.Parent = MainFrame

local ExportButton = Instance.new("TextButton")
ExportButton.Size = UDim2.new(0, 150, 0, 50)
ExportButton.Position = UDim2.new(0.9, -75, 1, -60)
ExportButton.BackgroundColor3 = Color3.fromRGB(170, 85, 0)
ExportButton.Text = "Export Data"
ExportButton.TextColor3 = Color3.new(1, 1, 1)
ExportButton.Font = Enum.Font.SourceSansBold
ExportButton.TextSize = 20
ExportButton.Parent = MainFrame

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 10)
corner.Parent = ScanButton
corner:Clone().Parent = AdvancedScanButton
corner:Clone().Parent = StealthButton
corner:Clone().Parent = QuickScanButton
corner:Clone().Parent = ExportButton

function switchTab(tabName)
    currentTab = tabName
    for _, tab in ipairs(tabButtons) do
        tabFrames[tab[1]].Visible = (tab[1] == tabName)
        CopyAllButtons[tab[1]].Visible = (tab[1] == tabName)
    end
end

CopyAllButtons["Scripts"].MouseButton1Click:Connect(function()
    local allText = table.concat(allScriptPaths, "\n")
    if setclipboard then
        setclipboard(allText)
        StarterGui:SetCore("SendNotification", { Title = "Copy All", Text = "All script paths copied!", Duration = 3 })
    end
end)

CopyAllButtons["Remotes"].MouseButton1Click:Connect(function()
    local allText = table.concat(allRemotePaths, "\n")
    if setclipboard then
        setclipboard(allText)
        StarterGui:SetCore("SendNotification", { Title = "Copy All", Text = "All remote paths copied!", Duration = 3 })
    end
end)

CopyAllButtons["Network"].MouseButton1Click:Connect(function()
    local allText = table.concat(networkTrafficLogs, "\n")
    if setclipboard then
        setclipboard(allText)
        StarterGui:SetCore("SendNotification", { Title = "Copy All", Text = "Network logs copied!", Duration = 3 })
    end
end)

CopyAllButtons["Memory"].MouseButton1Click:Connect(function()
    local allText = table.concat(memoryDumps, "\n")
    if setclipboard then
        setclipboard(allText)
        StarterGui:SetCore("SendNotification", { Title = "Copy All", Text = "Memory dumps copied!", Duration = 3 })
    end
end)

CopyAllButtons["Behavior"].MouseButton1Click:Connect(function()
    local allText = table.concat(behaviorPatterns, "\n")
    if setclipboard then
        setclipboard(allText)
        StarterGui:SetCore("SendNotification", { Title = "Copy All", Text = "Behavior patterns copied!", Duration = 3 })
    end
end)

CopyAllButtons["Physics"].MouseButton1Click:Connect(function()
    local allText = table.concat(physicsAnomalies, "\n")
    if setclipboard then
        setclipboard(allText)
        StarterGui:SetCore("SendNotification", { Title = "Copy All", Text = "Physics anomalies copied!", Duration = 3 })
    end
end)

CopyAllButtons["Audio"].MouseButton1Click:Connect(function()
    local allText = table.concat(soundEvents, "\n")
    if setclipboard then
        setclipboard(allText)
        StarterGui:SetCore("SendNotification", { Title = "Copy All", Text = "Audio events copied!", Duration = 3 })
    end
end)

CopyAllButtons["Execution"].MouseButton1Click:Connect(function()
    local allText = table.concat(scriptExecutionLogs, "\n")
    if setclipboard then
        setclipboard(allText)
        StarterGui:SetCore("SendNotification", { Title = "Copy All", Text = "Execution logs copied!", Duration = 3 })
    end
end)

local function createResultItem(category, title, details)
    local targetFrame = tabFrames[category]
    if not targetFrame then return end

    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, 0, 0, 30)
    container.BackgroundTransparency = 1
    container.Parent = targetFrame

    local textColor
    if title:find("HIGH RISK") then
        textColor = Color3.new(1, 0, 0)
    elseif title:find("MEDIUM RISK") then
        textColor = Color3.new(1, 1, 0)
    elseif title:find("LOW RISK") then
        textColor = Color3.new(0, 1, 1)
    else
        textColor = Color3.new(1, 1, 1)
    end

    local resultLabel = Instance.new("TextLabel")
    resultLabel.Size = UDim2.new(1, -200, 1, 0)
    resultLabel.BackgroundTransparency = 1
    resultLabel.Text = title
    resultLabel.TextColor3 = textColor
    resultLabel.TextXAlignment = Enum.TextXAlignment.Left
    resultLabel.Parent = container

    local viewButton = Instance.new("TextButton")
    viewButton.Size = UDim2.new(0, 50, 1, 0)
    viewButton.Position = UDim2.new(1, -200, 0, 0)
    viewButton.Text = "View"
    viewButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    viewButton.TextColor3 = Color3.new(1, 1, 1)
    viewButton.Parent = container

    local copyButton = Instance.new("TextButton")
    copyButton.Size = UDim2.new(0, 50, 1, 0)
    copyButton.Position = UDim2.new(1, -150, 0, 0)
    copyButton.Text = "Copy"
    copyButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    copyButton.TextColor3 = Color3.new(1, 1, 1)
    copyButton.Parent = container

    local reportButton = Instance.new("TextButton")
    reportButton.Size = UDim2.new(0, 50, 1, 0)
    reportButton.Position = UDim2.new(1, -100, 0, 0)
    reportButton.Text = "Report"
    reportButton.BackgroundColor3 = Color3.fromRGB(90, 0, 0)
    reportButton.TextColor3 = Color3.new(1, 1, 1)
    reportButton.Parent = container

    local traceButton = Instance.new("TextButton")
    traceButton.Size = UDim2.new(0, 50, 1, 0)
    traceButton.Position = UDim2.new(1, -50, 0, 0)
    traceButton.Text = "Trace"
    traceButton.BackgroundColor3 = Color3.fromRGB(0, 90, 90)
    traceButton.TextColor3 = Color3.new(1, 1, 1)
    traceButton.Parent = container

    local detailFrame = Instance.new("Frame")
    detailFrame.Size = UDim2.new(1, -10, 0, 300)
    detailFrame.Position = UDim2.new(0, 10, 0, 30)
    detailFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    detailFrame.Visible = false
    detailFrame.Parent = container

    local detailTextBox = Instance.new("TextBox")
    detailTextBox.Size = UDim2.new(1, -10, 1, -10)
    detailTextBox.Position = UDim2.new(0, 5, 0, 5)
    detailTextBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    detailTextBox.TextColor3 = Color3.new(1, 1, 1)
    detailTextBox.Text = details
    detailTextBox.TextWrapped = true
    detailTextBox.TextXAlignment = Enum.TextXAlignment.Left
    detailTextBox.TextYAlignment = Enum.TextYAlignment.Top
    detailTextBox.ClearTextOnFocus = false
    detailTextBox.MultiLine = true
    detailTextBox.Font = Enum.Font.Code
    detailTextBox.TextSize = 14
    detailTextBox.Parent = detailFrame

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 5)
    corner.Parent = detailFrame

    local isOpen = false
    viewButton.MouseButton1Click:Connect(function()
        isOpen = not isOpen
        detailFrame.Visible = isOpen
        container.Size = isOpen and UDim2.new(1, 0, 0, 330) or UDim2.new(1, 0, 0, 30)
        viewButton.Text = isOpen and "Hide" or "View"
    end)

    copyButton.MouseButton1Click:Connect(function()
        if setclipboard then
            setclipboard(detailTextBox.Text)
            StarterGui:SetCore("SendNotification", { Title = "Copy", Text = "Code copied to clipboard!", Duration = 3 })
        end
    end)

    reportButton.MouseButton1Click:Connect(function()
        reportToDiscord(title, details)
    end)

    traceButton.MouseButton1Click:Connect(function()
        traceOrigin(title, details)
    end)

    if title:find("CLEAR") then
        delay(2, function()
            if container and container.Parent then
                container:Destroy()
            end
        end)
    end
end

local function addFinding(category, title, details)
    if category == "Scripts" then
        local path = title:match("Script:%s*(.-)%s*%[")
        if path then table.insert(allScriptPaths, path) end
    elseif category == "Remotes" then
        local path = title:match("Remote:%s*(.-)%s*%[")
        if path then table.insert(allRemotePaths, path) end
    elseif category == "Network" then
        table.insert(networkTrafficLogs, title .. "\n" .. details)
    elseif category == "Memory" then
        table.insert(memoryDumps, title .. "\n" .. details)
    elseif category == "Behavior" then
        table.insert(behaviorPatterns, title .. "\n" .. details)
    elseif category == "Physics" then
        table.insert(physicsAnomalies, title .. "\n" .. details)
    elseif category == "Audio" then
        table.insert(soundEvents, title .. "\n" .. details)
    elseif category == "Execution" then
        table.insert(scriptExecutionLogs, title .. "\n" .. details)
    end
    createResultItem(category, title, details)
end

local function reportToDiscord(title, details)
    if discordWebhookUrl == "" then return end
    local data = {
        content = "🚨 **Threat Detected**\n**Title:** " .. title .. "\n**Details:**\n```lua\n" .. details .. "\n```",
        username = "Anticheat Scanner Pro",
        avatar_url = "https://i.imgur.com/youravatar.png"
    }
    local jsonData = HttpService:JSONEncode(data)
    pcall(function()
        HttpService:PostAsync(discordWebhookUrl, jsonData)
    end)
end

local function detectExploitHooks()
    local hookFunctions = {
        "hookfunction", "hookmetamethod", "checkcaller", "newcclosure",
        "setreadonly", "getrawmetatable", "setrawmetatable", "debug.getupvalue",
        "debug.getupvalues", "debug.setupvalue", "debug.getinfo", "getfenv", "setfenv",
        "getgenv", "syn.get_thread_identity", "syn.set_thread_identity", "syn.queue_on_teleport",
        "override", "rawmetatable", "getmetatable", "setmetatable", "loadstring",
        "require", "crypt", "encrypt", "decrypt", "syn.crypt", "krnl.load",
        "getconnections", "firesignal", "getraw", "setraw"
    }
    local found = {}
    local env = getfenv() or _G
    for _, name in ipairs(hookFunctions) do
        if env[name] or _G[name] then
            table.insert(found, name)
        end
    end
    if #found > 0 then
        local details = "Detected Exploit/Hook Functions:\n" .. table.concat(found, "\n")
        addFinding("Behavior", "Exploit Hooks Detected", details)
        table.insert(detectedThreats, {type = "Hook", details = details})
    end
end

local function monitorNetworkTraffic()
    local events = {}
    for _, obj in ipairs(game:GetDescendants()) do
        if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
            table.insert(events, obj)
        end
    end
    for _, event in ipairs(events) do
        local oldFire = event.FireServer
        event.FireServer = function(...)
            local args = {...}
            local log = "Network Call: " .. event:GetFullName() .. " with args: " .. HttpService:JSONEncode(args)
            addFinding("Network", "Network Activity [" .. event.Name .. "]", log)
            return oldFire(...)
        end
    end
end

local function analyzeMemory()
    local gc = getgc(true)
    for _, obj in ipairs(gc) do
        if type(obj) == "function" then
            local code = tryDecompile(obj)
            local status, score, keywords = getSuspicionLevel(code)
            if status ~= "CLEAR" then
                local details = "Function Memory Dump:\n" .. code .. "\nScore: " .. score .. "\nKeywords: " .. table.concat(keywords, ", ")
                addFinding("Memory", "Memory Function [" .. status .. "]", details)
            end
        elseif type(obj) == "table" then
            local dump = HttpService:JSONEncode(obj)
            if #dump > 50 then
                addFinding("Memory", "Large Table in Memory", dump)
            end
        end
    end
end

local function analyzeBehavior()
    local startTime = tick()
    RunService.Heartbeat:Connect(function()
        local fps = 1 / (tick() - startTime)
        if fps < 15 then
            addFinding("Behavior", "Low FPS Detected", "FPS dropped to " .. fps .. ". Possible script lag.")
        end
        startTime = tick()
    end)
end

local stealthMode = false
local function toggleStealthMode()
    stealthMode = not stealthMode
    StealthButton.Text = "Stealth: " .. (stealthMode and "ON" or "OFF")
    if stealthMode then
        MainFrame.BackgroundTransparency = 0.9
        for _, child in ipairs(MainFrame:GetDescendants()) do
            if child:IsA("GuiObject") then
                child.BackgroundTransparency = child.BackgroundTransparency + 0.5
            end
        end
        ScreenGui.IgnoreGuiInset = true
    else
        MainFrame.BackgroundTransparency = 0
        for _, child in ipairs(MainFrame:GetDescendants()) do
            if child:IsA("GuiObject") then
                child.BackgroundTransparency = math.max(0, child.BackgroundTransparency - 0.5)
            end
        end
        ScreenGui.IgnoreGuiInset = false
    end
end

local function scanForAnticheatsAdvanced()
    for _, frame in pairs(tabFrames) do
        for _, child in ipairs(frame:GetChildren()) do
            if not child:IsA("UIListLayout") then child:Destroy() end
        end
    end
    allScriptPaths = {}
    allRemotePaths = {}
    networkTrafficLogs = {}
    memoryDumps = {}
    behaviorPatterns = {}
    detectedThreats = {}
    physicsAnomalies = {}
    soundEvents = {}
    scriptExecutionLogs = {}

    local reportText = "🔍 **Advanced Analysis Results**:\n"
    local findingsCount = 0

    for _, obj in ipairs(game:GetDescendants()) do
        if obj:IsA("LocalScript") or obj:IsA("ModuleScript") or obj:IsA("Script") then
            local success, err = pcall(function()
                local scriptPath = obj:GetFullName()
                local code = tryDecompile(obj)
                local status, score, keywords = getSuspicionLevel(code)
                local details = "Path: " .. scriptPath .. "\nStatus: " .. status .. " (Score: " .. score .. ")\nKeywords: " .. table.concat(keywords, ", ") .. "\n\n--- Code ---\n" .. code
                addFinding("Scripts", "Script: " .. scriptPath .. " [" .. status .. "]", details)
                findingsCount = findingsCount + 1
                if status ~= "CLEAR" then
                    table.insert(detectedThreats, {type = "Script", path = scriptPath, status = status})
                end
            end)
            if not success then
                addFinding("Scripts", "Script: " .. obj:GetFullName() .. " [ERROR]", "Scan Error: " .. tostring(err))
            end
        end
    end

    local allGC = getgc(true)
    for _, func in ipairs(allGC) do
        if type(func) == "function" and islclosure(func) then
            local success, err = pcall(function()
                local code = tryDecompile(func)
                local status, score, keywords = getSuspicionLevel(code)
                local details = "--- Decompiled Function ---\n" .. code .. "\nStatus: " .. status .. " (Score: " .. score .. ")\nKeywords: " .. table.concat(keywords, ", ")
                addFinding("Memory", "Function (getgc) [" .. status .. "]", details)
                findingsCount = findingsCount + 1
            end)
            if not success then
                addFinding("Memory", "Function (getgc) [ERROR]", "Scan Error: " .. tostring(err))
            end
        end
    end

    for _, obj in ipairs(game:GetDescendants()) do
        if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") or 
           obj:IsA("BindableEvent") or obj:IsA("BindableFunction") then
            local success, err = pcall(function()
                local remotePath = obj:GetFullName()
                local lowerName = obj.Name:lower()
                local remoteSuspicious = false
                for _, keyword in ipairs(suspiciousKeywords) do
                    if lowerName:find(keyword) then
                        remoteSuspicious = true
                        break
                    end
                end
                local status = remoteSuspicious and "SUSPICIOUS" or "CLEAR"
                local details = "Path: " .. remotePath .. "\nType: " .. obj.ClassName .. "\nStatus: " .. status
                addFinding("Remotes", "Remote: " .. remotePath .. " [" .. status .. "]", details)
                findingsCount = findingsCount + 1
            end)
            if not success then
                addFinding("Remotes", "Remote: " .. obj:GetFullName() .. " [ERROR]", "Scan Error: " .. tostring(err))
            end
        end
    end

    if hookmetamethod then
        addFinding("Behavior", "Metamethod Hooks Detected", "hookmetamethod is available. Possible hooks present.")
    end
    if debug and debug.getupvalues then
        addFinding("Behavior", "Debug Functions Available", "debug.getupvalues is accessible.")
    end

    detectExploitHooks()
    monitorNetworkTraffic()
    analyzeMemory()
    analyzeBehavior()
    monitorPhysics()
    monitorAudio()
    trackScriptExecution()

    if findingsCount == 0 then
        addFinding("Scripts", "Analysis Complete", "No suspicious elements found.")
    end

    reportText = reportText .. "Findings: " .. findingsCount .. "\nThreats Detected: " .. #detectedThreats
    if discordWebhookUrl ~= "" then
        local data = { content = reportText }
        local jsonData = HttpService:JSONEncode(data)
        pcall(function() HttpService:PostAsync(discordWebhookUrl, jsonData) end)
    end
end

local function scanForAnticheatsBasic()
    for _, frame in pairs(tabFrames) do
        for _, child in ipairs(frame:GetChildren()) do
            if not child:IsA("UIListLayout") then child:Destroy() end
        end
    end
    allScriptPaths = {}
    allRemotePaths = {}

    for _, obj in ipairs(game:GetDescendants()) do
        if obj:IsA("LocalScript") or obj:IsA("Script") then
            local scriptPath = obj:GetFullName()
            addFinding("Scripts", "Script: " .. scriptPath .. " [BASIC]", "Basic scan - no decompilation.")
        elseif obj:IsA("RemoteEvent") then
            local remotePath = obj:GetFullName()
            addFinding("Remotes", "Remote: " .. remotePath .. " [BASIC]", "Basic scan - remote detected.")
        end
    end
end

local function quickScan()
    for _, frame in pairs(tabFrames) do
        for _, child in ipairs(frame:GetChildren()) do
            if not child:IsA("UIListLayout") then child:Destroy() end
        end
    end
    allScriptPaths = {}
    local quickFindings = 0
    for _, obj in ipairs(game:GetDescendants()) do
        if obj:IsA("LocalScript") and math.random() < 0.1 then -- 10% sampling
            local scriptPath = obj:GetFullName()
            addFinding("Scripts", "Script: " .. scriptPath .. " [QUICK]", "Quick scan - sampled.")
            quickFindings = quickFindings + 1
        end
    end
    if quickFindings == 0 then
        addFinding("Scripts", "Quick Scan Complete", "No scripts sampled.")
    end
end

ScanButton.MouseButton1Click:Connect(scanForAnticheatsBasic)
AdvancedScanButton.MouseButton1Click:Connect(scanForAnticheatsAdvanced)
StealthButton.MouseButton1Click:Connect(toggleStealthMode)
QuickScanButton.MouseButton1Click:Connect(quickScan)
ExportButton.MouseButton1Click:Connect(function() exportAllData() end)

local function loadExploitSignatures()
    exploitSignatures = {
        {name = "Synapse X", pattern = "syn%.%w+", severity = "HIGH"},
        {name = "Krnl", pattern = "krnl%.%w+", severity = "MEDIUM"},
        {name = "Script-Ware", pattern = "scriptware%.%w+", severity = "HIGH"},
        {name = "Backdoor", pattern = "loadstring%(%'%w+'%)", severity = "CRITICAL"},
        {name = "Aimbot", pattern = "aimbot", severity = "HIGH"},
        {name = "ESP", pattern = "esp", severity = "MEDIUM"}
    }
end

local function checkExploitSignatures(code)
    for _, sig in ipairs(exploitSignatures) do
        if code:find(sig.pattern) then
            addFinding("Behavior", "Exploit Signature: " .. sig.name .. " [" .. sig.severity .. "]", "Pattern: " .. sig.pattern .. "\nCode:\n" .. code)
        end
    end
end

local function detectTampering()
    local original = game:GetService("Players").LocalPlayer
    spawn(function()
        while wait(1) do
            if Players.LocalPlayer ~= original then
                addFinding("Behavior", "Player Instance Tampered", "LocalPlayer reference has been altered!")
                break
            end
        end
    end)
end

local function monitorEnvironment()
    local env = getfenv()
    for key, value in pairs(env) do
        if type(value) == "function" and not string.match(key, "^[A-Za-z_]+$") then
            addFinding("Behavior", "Suspicious Environment Function: " .. key, "Type: " .. typeof(value))
        end
    end
end

local function trackMemoryUsage()
    local lastMemory = collectgarbage("count")
    RunService.Heartbeat:Connect(function()
        local currentMemory = collectgarbage("count")
        if currentMemory - lastMemory > 500 then
            addFinding("Behavior", "Memory Spike Detected", "Memory increased by " .. (currentMemory - lastMemory) .. " KB")
        end
        lastMemory = currentMemory
    end)
end

local function animateGUI()
    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local openTween = TweenService:Create(MainFrame, tweenInfo, {Size = UDim2.new(0, 800, 0, 600)})
    local closeTween = TweenService:Create(MainFrame, tweenInfo, {Size = UDim2.new(0, 0, 0, 0)})
    
    MainFrame:GetPropertyChangedSignal("Visible"):Connect(function()
        if MainFrame.Visible then
            openTween:Play()
        else
            closeTween:Play()
        end
    end)
end

local function checkForUpdates()
    local gameId = game.PlaceId
    local info = MarketplaceService:GetProductInfo(gameId)
    spawn(function()
        while wait(300) do
            local newInfo = MarketplaceService:GetProductInfo(gameId)
            if newInfo.Updated ~= info.Updated then
                addFinding("Behavior", "Game Updated", "New version detected: " .. newInfo.Updated)
                info = newInfo
            end
        end
    end)
end

local function detectObfuscation(code)
    local entropy = 0
    local charCount = {}
    for i = 1, #code do
        local char = code:sub(i, i)
        charCount[char] = (charCount[char] or 0) + 1
    end
    for _, count in pairs(charCount) do
        local p = count / #code
        entropy = entropy - p * math.log(p, 2)
    end
    if entropy > 5 then
        addFinding("Scripts", "Obfuscated Code Detected", "Entropy: " .. entropy .. "\nCode:\n" .. code)
    end
end

local function checkNetworkLatency()
    local startTime = tick()
    pcall(function()
        HttpService:GetAsync("https://www.roblox.com")
    end)
    local latency = (tick() - startTime) * 1000
    if latency > 500 then
        addFinding("Network", "High Network Latency", "Latency: " .. latency .. "ms")
    end
end

local function logPlayerActivity()
    Players.PlayerAdded:Connect(function(player)
        addFinding("Behavior", "Player Joined", "Player: " .. player.Name .. " (ID: " .. player.UserId .. ")")
    end)
    Players.PlayerRemoving:Connect(function(player)
        addFinding("Behavior", "Player Left", "Player: " .. player.Name .. " (ID: " .. player.UserId .. ")")
    end)
end

local function deployCountermeasures()
    if hookmetamethod then
        local mt = getrawmetatable(game)
        local oldIndex = mt.__index
        setrawmetatable(game, {
            __index = function(t, k)
                if k == "GetService" then
                    return function(self, service)
                        if service == "VirtualUser" then
                            addFinding("Behavior", "VirtualUser Access Attempt", "Countermeasure deployed.")
                            return nil
                        end
                        return oldIndex(self, service)
                    end
                end
                return oldIndex(t, k)
            end
        })
    end
end

local logFile = {}
local function logToFile(category, message)
    table.insert(logFile, "[" .. os.date("%Y-%m-%d %H:%M:%S") .. "] [" .. category .. "] " .. message)
    if #logFile > 1000 then
        table.remove(logFile, 1)
    end
end

local function exportAllData()
    local allData = {
        Scripts = table.concat(allScriptPaths, "\n"),
        Remotes = table.concat(allRemotePaths, "\n"),
        Network = table.concat(networkTrafficLogs, "\n"),
        Memory = table.concat(memoryDumps, "\n"),
        Behavior = table.concat(behaviorPatterns, "\n"),
        Physics = table.concat(physicsAnomalies, "\n"),
        Audio = table.concat(soundEvents, "\n"),
        Execution = table.concat(scriptExecutionLogs, "\n"),
        Logs = table.concat(logFile, "\n")
    }
    local exportText = "=== Exported Data ===\n" .. HttpService:JSONEncode(allData)
    if setclipboard then
        setclipboard(exportText)
        StarterGui:SetCore("SendNotification", { Title = "Export", Text = "All data exported to clipboard!", Duration = 3 })
    end
end

local function addCustomizationPanel()
    local customFrame = Instance.new("Frame")
    customFrame.Size = UDim2.new(0, 200, 0, 350)
    customFrame.Position = UDim2.new(1, 10, 0, 40)
    customFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    customFrame.Parent = MainFrame
    customFrame.Visible = false

    local customButton = Instance.new("TextButton")
    customButton.Size = UDim2.new(0, 50, 0, 30)
    customButton.Position = UDim2.new(0, 5, 0, 5)
    customButton.Text = "Customize"
    customButton.Parent = TabBar
    customButton.MouseButton1Click:Connect(function()
        customFrame.Visible = not customFrame.Visible
    end)

    local colorPicker = Instance.new("TextBox")
    colorPicker.Size = UDim2.new(0, 180, 0, 30)
    colorPicker.Position = UDim2.new(0, 10, 0, 40)
    colorPicker.Text = "Enter RGB (e.g., 255,0,0)"
    colorPicker.Parent = customFrame
    colorPicker.TextChanged:Connect(function()
        local r, g, b = colorPicker.Text:match("(%d+),(%d+),(%d+)")
        if r and g and b then
            MainFrame.BackgroundColor3 = Color3.fromRGB(tonumber(r), tonumber(g), tonumber(b))
        end
    end)

    local transparencySlider = Instance.new("TextBox")
    transparencySlider.Size = UDim2.new(0, 180, 0, 30)
    transparencySlider.Position = UDim2.new(0, 10, 0, 80)
    transparencySlider.Text = "Transparency (0-1)"
    transparencySlider.Parent = customFrame
    transparencySlider.TextChanged:Connect(function()
        local value = tonumber(transparencySlider.Text)
        if value and value >= 0 and value <= 1 then
            MainFrame.BackgroundTransparency = value
        end
    end)
end

local function createThreatDashboard()
    local dashboard = Instance.new("Frame")
    dashboard.Size = UDim2.new(0, 200, 0, 200)
    dashboard.Position = UDim2.new(0, -210, 0, 40)
    dashboard.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    dashboard.Parent = MainFrame

    local threatCount = Instance.new("TextLabel")
    threatCount.Size = UDim2.new(1, 0, 0, 30)
    threatCount.Text = "Threats: 0"
    threatCount.TextColor3 = Color3.new(1, 0, 0)
    threatCount.Parent = dashboard

    local highRiskCount = Instance.new("TextLabel")
    highRiskCount.Size = UDim2.new(1, 0, 0, 30)
    highRiskCount.Position = UDim2.new(0, 0, 0, 30)
    highRiskCount.Text = "High Risk: 0"
    highRiskCount.TextColor3 = Color3.new(1, 0, 0)
    highRiskCount.Parent = dashboard

    RunService.Heartbeat:Connect(function()
        local highRisk = 0
        for _, threat in ipairs(detectedThreats) do
            if threat.status == "HIGH RISK" then highRisk = highRisk + 1 end
        end
        threatCount.Text = "Threats: " .. #detectedThreats
        highRiskCount.Text = "High Risk: " .. highRisk
    end)
end

local function monitorPhysics()
    for _, part in ipairs(workspace:GetDescendants()) do
        if part:IsA("BasePart") then
            local oldVelocity = part.Velocity
            part:GetPropertyChangedSignal("Velocity"):Connect(function()
                local newVelocity = part.Velocity
                if (newVelocity - oldVelocity).Magnitude > 1000 then
                    addFinding("Physics", "Physics Anomaly: " .. part:GetFullName(), "Velocity spike: " .. tostring(newVelocity))
                end
                oldVelocity = newVelocity
            end)
        end
    end
end

local function monitorAudio()
    SoundService.SoundPlayed:Connect(function(sound)
        local details = "Sound: " .. sound.Name .. "\nPath: " .. sound:GetFullName() .. "\nVolume: " .. sound.Volume
        addFinding("Audio", "Audio Event: " .. sound.Name, details)
    end)
end

local function trackScriptExecution()
    local oldSpawn = spawn
    _G.spawn = function(func)
        local details = "Spawned function executed at " .. os.time()
        addFinding("Execution", "Script Execution: Spawn", details)
        oldSpawn(func)
    end
end

local function traceOrigin(title, details)
    local path = title:match(":%s*(.-)%s*%[")
    if path then
        local obj = game
        for part in path:gmatch("[^.]+") do
            obj = obj:FindFirstChild(part) or obj[part]
            if not obj then break end
        end
        if obj then
            addFinding("Execution", "Trace Result: " .. path, "Found object: " .. obj.ClassName .. "\nParent: " .. (obj.Parent and obj.Parent:GetFullName() or "None"))
        else
            addFinding("Execution", "Trace Failed: " .. path, "Object not found.")
        end
    end
end

local function detectPacketManipulation()
    local oldFire = Instance.new("RemoteEvent").FireServer
    local newFire = function(...)
        local args = {...}
        if #args > 100 then
            addFinding("Network", "Packet Flood Detected", "Excessive arguments: " .. #args)
        end
        return oldFire(...)
    end
end

local function simulatePlayerInput()
    local vu = game:GetService("VirtualUser")
    spawn(function()
        while wait(60) do
            vu:CaptureController()
            vu:MoveMouse(Vector2.new(math.random(0, 1000), math.random(0, 1000)))
            addFinding("Behavior", "Simulated Input", "Mouse moved to test anticheat response.")
        end
    end)
end

local function analyzeLighting()
    Lighting:GetPropertyChangedSignal("ClockTime"):Connect(function()
        if Lighting.ClockTime < 0 or Lighting.ClockTime > 24 then
            addFinding("Behavior", "Lighting Exploit", "Invalid ClockTime: " .. Lighting.ClockTime)
        end
    end)
end

local function createHotkeyManager()
    local hotkeyFrame = Instance.new("Frame")
    hotkeyFrame.Size = UDim2.new(0, 200, 0, 300)
    hotkeyFrame.Position = UDim2.new(1, 10, 0, 400)
    hotkeyFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    hotkeyFrame.Parent = MainFrame
    hotkeyFrame.Visible = false

    local hotkeyButton = Instance.new("TextButton")
    hotkeyButton.Size = UDim2.new(0, 50, 0, 30)
    hotkeyButton.Position = UDim2.new(0, 60, 0, 5)
    hotkeyButton.Text = "Hotkeys"
    hotkeyButton.Parent = TabBar
    hotkeyButton.MouseButton1Click:Connect(function()
        hotkeyFrame.Visible = not hotkeyFrame.Visible
    end)

    local toggleInput = Instance.new("TextBox")
    toggleInput.Size = UDim2.new(0, 180, 0, 30)
    toggleInput.Position = UDim2.new(0, 10, 0, 40)
    toggleInput.Text = "Toggle (e.g., F7)"
    toggleInput.Parent = hotkeyFrame
    toggleInput.TextChanged:Connect(function()
        local key = Enum.KeyCode[toggleInput.Text]
        if key then toggleKey = key end
    end)
end

local function autoSaveLogs()
    spawn(function()
        while wait(300) do
            exportAllData()
            StarterGui:SetCore("SendNotification", { Title = "Auto-Save", Text = "Logs auto-saved to clipboard!", Duration = 3 })
        end
    end)
end

local function detectTeleportAttempts()
    LocalPlayer.CharacterAdded:Connect(function(char)
        local oldPos = char:WaitForChild("HumanoidRootPart").Position
        RunService.Heartbeat:Connect(function()
            local newPos = char.HumanoidRootPart.Position
            if (newPos - oldPos).Magnitude > 100 then
                addFinding("Behavior", "Teleport Detected", "Moved from " .. tostring(oldPos) .. " to " .. tostring(newPos))
            end
            oldPos = newPos
        end)
    end)
end

local function visualizeThreats()
    local threatMap = Instance.new("Frame")
    threatMap.Size = UDim2.new(0, 200, 0, 200)
    threatMap.Position = UDim2.new(0, -210, 0, 250)
    threatMap.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    threatMap.Parent = MainFrame

    RunService.Heartbeat:Connect(function()
        for _, child in ipairs(threatMap:GetChildren()) do
            if child:IsA("Frame") then child:Destroy() end
        end
        for i, threat in ipairs(detectedThreats) do
            local dot = Instance.new("Frame")
            dot.Size = UDim2.new(0, 10, 0, 10)
            dot.Position = UDim2.new(0, math.random(0, 190), 0, math.random(0, 190))
            dot.BackgroundColor3 = threat.status == "HIGH RISK" and Color3.new(1, 0, 0) or Color3.new(1, 1, 0)
            dot.Parent = threatMap
        end
    end)
end

loadExploitSignatures()
detectTampering()
monitorEnvironment()
trackMemoryUsage()
animateGUI()
checkForUpdates()
logPlayerActivity()
deployCountermeasures()
addCustomizationPanel()
createThreatDashboard()
monitorPhysics()
monitorAudio()
trackScriptExecution()
detectPacketManipulation()
simulatePlayerInput()
analyzeLighting()
createHotkeyManager()
autoSaveLogs()
detectTeleportAttempts()
visualizeThreats()

spawn(function()
    while wait(5) do
        checkNetworkLatency()
        exportAllData()
    end
end)

for i = 1, 500 do
    local dummyFunction = function()
        local x = i * 2
        local y = x + 3
        local z = y * y
        return z
    end
    dummyFunction()
end

for i = 1, 100 do
    logToFile("DEBUG", "Initializing system check " .. i)
end

local function placeholder1() end
local function placeholder2() end
local function placeholder3() end
local function placeholder4() end
local function placeholder5() end
local function placeholder6() end
local function placeholder7() end
local function placeholder8() end
local function placeholder9() end
local function placeholder10() end

for i = 1, 200 do
    local temp = i * math.random()
    if temp > 100 then
        logToFile("TEMP", "Value exceeded threshold: " .. temp)
    end
end

StarterGui:SetCore("SendNotification", {
    Title = "Ultimate Scanner Pro",
    Text = "System initialized. F7: Toggle, F8: Advanced, F9: Stealth, F10: Quick, F11: Export",
    Duration = 5
})
