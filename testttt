--// ðŸ”’ Universal Anti-Cheat Bypass v7 - ULTRA OPTIMIZED FOR LOW-END

-- Minimal GUI (reuses objects)
local gui = Instance.new('ScreenGui')
local frame = Instance.new('Frame')
local titleLabel = Instance.new('TextLabel')
local progressFill = Instance.new('Frame')
local percentLabel = Instance.new('TextLabel')

gui.Name = 'BypassLoader'
gui.Parent = game.CoreGui

-- Optimized frame setup
frame.Size = UDim2.new(0, 280, 0, 120)
frame.Position = UDim2.new(0.5, -140, 0.5, -60)
frame.BackgroundColor3 = Color3.new(0.12, 0.12, 0.12)
frame.BorderSizePixel = 0
frame.Parent = gui

titleLabel.Size = UDim2.new(1, 0, 0.3, 0)
titleLabel.Text = 'ðŸ”’ Loading...'
titleLabel.TextColor3 = Color3.new(1, 1, 1)
titleLabel.BackgroundTransparency = 1
titleLabel.TextScaled = true
titleLabel.Parent = frame

progressFill.Size = UDim2.new(0, 0, 0, 4)
progressFill.Position = UDim2.new(0, 10, 0.5, 0)
progressFill.BackgroundColor3 = Color3.new(0, 1, 0.5)
progressFill.BorderSizePixel = 0
progressFill.Parent = frame

percentLabel.Size = UDim2.new(1, 0, 0.3, 0)
percentLabel.Position = UDim2.new(0, 0, 0.6, 0)
percentLabel.Text = '0%'
percentLabel.TextColor3 = Color3.new(1, 1, 1)
percentLabel.BackgroundTransparency = 1
percentLabel.TextScaled = true
percentLabel.Parent = frame

-- Cached services
local Players = game.Players
local player = Players.LocalPlayer

-- Single progress update function
local function updateProgress(p)
    progressFill.Size = UDim2.new((p * 260) / 100 / 260, 0, 0, 4)
    percentLabel.Text = p .. '%'
end

-- Get metatable once
updateProgress(10)
local mt = getrawmetatable(game)
if setreadonly then setreadonly(mt, false) end

updateProgress(20)

-- Store only what we need
local oldNamecall = rawget(mt, '__namecall')
local oldIndex = rawget(mt, '__index') 
local oldNewindex = rawget(mt, '__newindex')

updateProgress(30)

-- Single bypass state
local active = false

-- Optimized bypass setup (single function)
local function setupBypass()
    rawset(mt, '__namecall', function(self, ...)
        local method = getnamecallmethod()
        
        if active and not checkcaller() then
            -- Block kicks only
            if method:find('ick') and self == player then
                return
            end
            -- Block suspicious remotes only
            if (method == 'FireServer' or method == 'InvokeServer') then
                local n = tostring(self)
                if n:find('ban') or n:find('kick') or n:find('anti') then
                    return
                end
            end
        end
        
        return oldNamecall(self, ...)
    end)
    
    rawset(mt, '__index', function(self, key)
        if active and not checkcaller() and self == player and tostring(key):find('ick') then
            return function() end
        end
        return oldIndex(self, key)
    end)
end

updateProgress(50)

-- Ultra lightweight cycle
spawn(function()
    while true do
        active = true
        setupBypass()
        
        -- Only check scripts every 10 seconds instead of every second
        for i = 1, 3 do
            if i == 3 then
                -- Minimal script check (only check name, not full scan)
                for _, obj in pairs(game:GetChildren()) do
                    if obj:IsA('LocalScript') and obj.Name:find('anti') then
                        pcall(function() obj.Enabled = false end)
                    end
                end
            end
            wait(10) -- Increased wait time
        end
        
        active = false
        -- Restore originals briefly
        rawset(mt, '__namecall', oldNamecall)
        rawset(mt, '__index', oldIndex)
        
        wait(5) -- Shorter restore window
    end
end)

updateProgress(70)

-- Minimal kick protection (no loops)
pcall(function()
    if player.Kick then
        hookfunction(player.Kick, function() end)
    end
end)

updateProgress(90)

-- Lock metatable
if setreadonly then setreadonly(mt, true) end

updateProgress(100)

-- Quick cleanup
wait(0.3)
gui:Destroy()

print('[âœ… BYPASS ACTIVE] Optimized | Low Resource')
