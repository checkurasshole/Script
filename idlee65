local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Players = game:GetService("Players")
local Debris = game:GetService("Debris")
local RunService = game:GetService("RunService")
local workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

local LocalPlayer = Players.LocalPlayer

-- Create movable GUI toggle button
local ScreenGui = Instance.new("ScreenGui")
local ToggleButton = Instance.new("TextButton")
local UICorner = Instance.new("UICorner")
local UIStroke = Instance.new("UIStroke")

ScreenGui.Name = "ComboWickToggle"
ScreenGui.Parent = game.CoreGui
ScreenGui.ResetOnSpawn = false

ToggleButton.Parent = ScreenGui
ToggleButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
ToggleButton.BorderSizePixel = 0
ToggleButton.Position = UDim2.new(0, 20, 0, 100)
ToggleButton.Size = UDim2.new(0, 120, 0, 40)
ToggleButton.Font = Enum.Font.GothamBold
ToggleButton.Text = "COMBO_WICK"
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.TextSize = 12
ToggleButton.Active = true
ToggleButton.Draggable = true

UICorner.CornerRadius = UDim.new(0, 8)
UICorner.Parent = ToggleButton

UIStroke.Parent = ToggleButton
UIStroke.Color = Color3.fromRGB(0, 150, 255)
UIStroke.Thickness = 2

-- Animate button on hover
ToggleButton.MouseEnter:Connect(function()
    local tween = TweenService:Create(ToggleButton, TweenInfo.new(0.2), {
        BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    })
    tween:Play()
end)

ToggleButton.MouseLeave:Connect(function()
    local tween = TweenService:Create(ToggleButton, TweenInfo.new(0.2), {
        BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    })
    tween:Play()
end)

-- ADVANCED FLING VARIABLES (Credits: Jesse_VIP)
local flingActive = false
local flingBox = Instance.new("Part")
flingBox.Anchored = true
flingBox.CanCollide = false
local flingStrength = 200
local walls = {}
local boxSize = Vector3.new(50, 30, 50)

-- Function to get current root part
local function getRoot()
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    return char:WaitForChild("HumanoidRootPart", 5)
end

local rootPart = getRoot()

-- Update root when respawning/buying body (Credits: Jesse_VIP)
LocalPlayer.CharacterAdded:Connect(function(newChar)
    task.wait(1) -- wait a bit to load
    rootPart = newChar:WaitForChild("HumanoidRootPart", 5)
    
    -- Auto-restart fling if it was active
    if flingActive then
        print("Character respawned, continuing fling...")
    end
end)

-- SHOP AND AFK VARIABLES
local autoBuyLeg = false
local autoBuyArm = false
local autoBuyTorso = false
local autoBuyHead = false
local PurchaseBoneUpgrade = ReplicatedStorage.Remotes.PurchaseBoneUpgrade
local afkConnections = {}
local autoBuyLoops = {}

-- Create walls function
local function createWalls()
    if not rootPart then return end
    
    -- Clear existing walls first
    for _, wall in ipairs(walls) do
        if wall and wall.Parent then
            wall:Destroy()
        end
    end
    walls = {}
    
    local center = rootPart.Position
    local s = boxSize/2
    
    -- Create 6 walls around the player
    local wallPositions = {
        {center + Vector3.new(s.X, 0, 0), Vector3.new(2, boxSize.Y, boxSize.Z)},
        {center - Vector3.new(s.X, 0, 0), Vector3.new(2, boxSize.Y, boxSize.Z)},
        {center + Vector3.new(0, s.Y, 0), Vector3.new(boxSize.X, 2, boxSize.Z)},
        {center - Vector3.new(0, s.Y, 0), Vector3.new(boxSize.X, 2, boxSize.Z)},
        {center + Vector3.new(0, 0, s.Z), Vector3.new(boxSize.X, boxSize.Y, 2)},
        {center - Vector3.new(0, 0, s.Z), Vector3.new(boxSize.X, boxSize.Y, 2)}
    }
    
    for _, wallData in ipairs(wallPositions) do
        local wall = Instance.new("Part")
        wall.Name = "FlingWall"
        wall.Anchored = true
        wall.CanCollide = true
        wall.Transparency = 0.3
        wall.Material = Enum.Material.Neon
        wall.BrickColor = BrickColor.new("Bright blue")
        wall.Size = wallData[2]
        wall.Position = wallData[1]
        wall.Parent = workspace
        
        local selectionBox = Instance.new("SelectionBox")
        selectionBox.Adornee = wall
        selectionBox.Color3 = Color3.fromRGB(0, 150, 255)
        selectionBox.LineThickness = 0.2
        selectionBox.Transparency = 0.5
        selectionBox.Parent = wall
        
        table.insert(walls, wall)
    end
    
    print("Created " .. #walls .. " walls")
end

-- Remove walls function
local function removeWalls()
    for _, wall in ipairs(walls) do
        if wall and wall.Parent then
            wall:Destroy()
        end
    end
    walls = {}
    print("Removed all walls")
end

-- ADVANCED FLING MOVEMENT (Credits: Jesse_VIP)
RunService.Heartbeat:Connect(function()
    if flingActive and rootPart then
        local pos = rootPart.Position
        flingBox.Position = pos + Vector3.new(
            math.random(-10, 10),
            math.random(-10, 10),
            math.random(-10, 10)
        )
        rootPart.Velocity = (flingBox.Position - pos).Unit * flingStrength
    end
end)

-- Start fling function
local function startFling()
    if not rootPart then
        rootPart = getRoot()
        if not rootPart then
            return false
        end
    end
    
    flingActive = true
    createWalls()
    
    flingBox.Transparency = 1
    flingBox.Size = Vector3.new(10, 10, 10)
    flingBox.Parent = workspace
    
    return true
end

-- Stop fling function
local function stopFling()
    flingActive = false
    removeWalls()
    
    if flingBox and flingBox.Parent then
        flingBox.Parent = nil
    end
    
    -- Stop character movement
    if rootPart then
        rootPart.Velocity = Vector3.new(0, 0, 0)
        rootPart.AngularVelocity = Vector3.new(0, 0, 0)
    end
end

-- Anti-AFK functions
local function startAntiAFK()
    afkConnections[1] = game:GetService("Players").LocalPlayer.Idled:connect(function()
        VirtualUser:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
        wait(1)
        VirtualUser:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    end)
    
    afkConnections[2] = RunService.Heartbeat:Connect(function()
        if math.random(1,600) == 1 then
            VirtualUser:MoveMouse(Vector2.new(math.random(-50,50), math.random(-50,50)))
        end
    end)
    
    afkConnections[3] = spawn(function()
        while wait(300) do
            keypress(0x20)
            wait(0.1)
            keyrelease(0x20)
        end
    end)
    
    afkConnections[4] = spawn(function()
        while wait(120) do
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(".", "All")
            wait(0.5)
        end
    end)
end

local function stopAntiAFK()
    for i, connection in pairs(afkConnections) do
        if connection then
            if type(connection) == "RBXScriptConnection" then
                connection:Disconnect()
            end
        end
    end
    afkConnections = {}
end

-- Auto-buy functions
local function startAutoBuy(partName)
    autoBuyLoops[partName] = spawn(function()
        while true do
            if partName == "Leg" and autoBuyLeg then
                PurchaseBoneUpgrade:FireServer("Leg")
            elseif partName == "Arm" and autoBuyArm then
                PurchaseBoneUpgrade:FireServer("Arm")
            elseif partName == "Torso" and autoBuyTorso then
                PurchaseBoneUpgrade:FireServer("Torso")
            elseif partName == "Head" and autoBuyHead then
                PurchaseBoneUpgrade:FireServer("Head")
            end
            wait(0.1)
        end
    end)
end

local function stopAutoBuy(partName)
    if autoBuyLoops[partName] then
        autoBuyLoops[partName] = nil
    end
end

-- Create Fluent GUI
local Window = Fluent:CreateWindow({
    Title = "COMBO_WICK",
    SubTitle = "",
    TabWidth = 160,
    Size = UDim2.fromOffset(350, 250),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "activity" }),
    Shop = Window:AddTab({ Title = "Shop", Icon = "shopping-cart" }),
    AntiAFK = Window:AddTab({ Title = "No Kick", Icon = "shield" })
}

-- GUI Toggle functionality
local guiVisible = true
local fluentGuis = {}

local function findAllFluentGuis()
    fluentGuis = {}
    
    for _, gui in pairs(game.CoreGui:GetChildren()) do
        if gui:IsA("ScreenGui") and gui ~= ScreenGui then
            local isFluentGui = false
            
            if gui.Name:lower():find("fluent") or gui.Name:lower():find("library") then
                isFluentGui = true
            end
            
            if gui:FindFirstChild("Main") then
                local main = gui.Main
                if main:FindFirstChild("Navigation") and main:FindFirstChild("TabContainer") then
                    isFluentGui = true
                end
            end
            
            for _, child in pairs(gui:GetDescendants()) do
                if child.Name == "Acrylic" or child.Name == "DropShadow" or 
                   (child:IsA("TextLabel") and child.Text == "COMBO_WICK") then
                    isFluentGui = true
                    break
                end
            end
            
            if isFluentGui then
                table.insert(fluentGuis, gui)
            end
        end
    end
end

ToggleButton.MouseButton1Click:Connect(function()
    guiVisible = not guiVisible
    
    findAllFluentGuis()
    
    for _, gui in pairs(fluentGuis) do
        if gui and gui.Parent then
            gui.Enabled = guiVisible
        end
    end
    
    if guiVisible then
        ToggleButton.Text = "COMBO_WICK"
        UIStroke.Color = Color3.fromRGB(0, 150, 255)
        ToggleButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    else
        ToggleButton.Text = "HIDDEN"  
        UIStroke.Color = Color3.fromRGB(255, 100, 100)
        ToggleButton.BackgroundColor3 = Color3.fromRGB(60, 30, 30)
    end
end)

-- Main tab controls
Tabs.Main:AddToggle("BounceToggle", {
    Title = "Start Autofarm",
    Default = false,
    Callback = function(Value)
        if Value then
            if startFling() then
                Fluent:Notify({
                    Title = "Autofarm Started",
                    Content = "Advanced fling system is now active!",
                    Duration = 3
                })
            else
                Fluent:Notify({
                    Title = "Start Failed",
                    Content = "Could not initialize fling system. Try again.",
                    Duration = 3
                })
            end
        else
            stopFling()
            Fluent:Notify({
                Title = "Autofarm Stopped", 
                Content = "Fling system disabled and walls removed.",
                Duration = 3
            })
        end
    end
})

Tabs.Main:AddSlider("PowerSlider", {
    Title = "Fling Power",
    Default = 200,
    Min = 50,
    Max = 500,
    Rounding = 10,
    Callback = function(Value)
        flingStrength = Value
    end
})

-- Shop tab controls
Tabs.Shop:AddToggle("AutoLeg", {
    Title = "Auto Buy Legs",
    Default = false,
    Callback = function(Value)
        autoBuyLeg = Value
        if Value then
            startAutoBuy("Leg")
        else
            stopAutoBuy("Leg")
        end
    end
})

Tabs.Shop:AddToggle("AutoArm", {
    Title = "Auto Buy Arms", 
    Default = false,
    Callback = function(Value)
        autoBuyArm = Value
        if Value then
            startAutoBuy("Arm")
        else
            stopAutoBuy("Arm")
        end
    end
})

Tabs.Shop:AddToggle("AutoTorso", {
    Title = "Auto Buy Torso",
    Default = false,
    Callback = function(Value)
        autoBuyTorso = Value
        if Value then
            startAutoBuy("Torso")
        else
            stopAutoBuy("Torso")
        end
    end
})

Tabs.Shop:AddToggle("AutoHead", {
    Title = "Auto Buy Head",
    Default = false,
    Callback = function(Value)
        autoBuyHead = Value
        if Value then
            startAutoBuy("Head")
        else
            stopAutoBuy("Head")
        end
    end
})

-- Anti-AFK tab
Tabs.AntiAFK:AddToggle("AntiAFKToggle", {
    Title = "Anti AFK",
    Default = false,
    Callback = function(Value)
        if Value then
            startAntiAFK()
        else
            stopAntiAFK()
        end
    end
})

Window:SelectTab(1)

-- Initial notification
Fluent:Notify({
    Title = "COMBO_WICK Loaded",
    Content = "Simple fling system with auto-respawn support loaded!",
    Duration = 5
})
