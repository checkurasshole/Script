-- Protected Script (Vietnamese)
-- Script ID: e3fe6b31665cacad5414a57b3bf41a00
-- Created: 2025-10-18T02:33:51.752Z
-- Source: External API
-- Auto-generated by Lua Script Vault

local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local VaultModule = loadstring(game:HttpGet("https://raw.githubusercontent.com/checkurasshole/MainModule/refs/heads/main/MainModule"))()
local HttpService = game:GetService("HttpService")
local RbxAnalytics = game:GetService("RbxAnalyticsService")
local Players = game:GetService('Players')
local LocalPlayer = Players.LocalPlayer

getgenv().VaultReady = false

VaultModule.VALIDATION_STATE.sessionToken = VaultModule.generateSessionToken("init")

local clientId = tostring(RbxAnalytics:GetClientId() or "")
if clientId == "" then
    return {
        success = false,
        error = "No Client ID"
    }
end

local encryptedClientId = VaultModule.encrypt(clientId, VaultModule.CONFIG.MASTER_KEY)

local versionValid, versionMessage, fetchedToken = VaultModule.checkVersionAndToken()
if not versionValid then
    Library:Notify({
        Title = 'Lỗi phiên bản.',
        Description = versionMessage,
        Time = 10,
    })
    return {
        success = false,
        error = "version_check_failed",
        message = versionMessage
    }
end

if VaultModule.compareVersions(VaultModule.CONFIG.VERSION, '1.3.2') <= 0 then
    Library:Notify({
        Title = 'Yêu cầu cập nhật',
        Description = 'This version is no longer supported. Please update to v' .. VaultModule.CONFIG.MIN_VERSION .. '+',
        Time = 10,
    })
    return {
        success = false,
        error = "legacy_version",
        message = "Version no longer supported"
    }
end

_G.VaultInitialized = true
_G.VaultVersionToken = fetchedToken

local whitelisted, matchData, errorType = VaultModule.isClientIdWhitelisted(clientId, encryptedClientId)

if not whitelisted or errorType == "access_denied" or errorType == "tamper_detected" or errorType == "key_expired" then
    local Window = Library:CreateWindow({
        Title = "COMBO_BẤC",
        Footer = "Validation System v" .. VaultModule.CONFIG.VERSION,
        Icon = 7733960981,
        Size = UDim2.new(0, 580, 0, 380),
        Resizable = false,
        ShowCustomCursor = true,
    })
    
    local Tabs = {
        Validation = Window:AddTab("Xác thực", "key")
    }
        
    local validationComplete = false
    local validationSuccess = false
    
    local LeftGroup = Tabs.Validation:AddLeftGroupbox("Thông tin HWID")
    
    LeftGroup:AddLabel({
        Text = "Your HWID:",
        DoesWrap = false,
    })
    
    LeftGroup:AddLabel({
        Text = clientId,
        DoesWrap = true,
    })
    
    LeftGroup:AddDivider()
    
    LeftGroup:AddLabel({
        Text = "⚠️ Thống KÊ",
        DoesWrap = false,
    })
    
    LeftGroup:AddLabel({
        Text = "Truy cập yêu cầu xác thực",
        DoesWrap = true,
    })
    
    LeftGroup:AddDivider()
    
    local savedKey = VaultModule.loadKey()
    local keyInputValue = savedKey or ""
    
    LeftGroup:AddInput("KeyInput", {
        Default = keyInputValue,
        Numeric = false,
        Finished = false,
        ClearTextOnFocus = false,
        Text = "Phím Enter",
        Placeholder = "Enter your key here...",
        Callback = function(value)
            keyInputValue = value
        end
    })
    
    LeftGroup:AddButton({
        Text = "Phím Enter",
        Func = function()
            local key = VaultModule.trim(keyInputValue)
            
            if key == "" then
                Library:Notify({
                    Title = "Khóa ⚠️ trống",
                    Description = "Please enter a validation key",
                    Time = 3
                })
                return
            end
            
            local success = VaultModule.validateKey(key, clientId, Library)
            
            if success then
                validationSuccess = true
                validationComplete = true
                
                wait(2)
                Library:Unload()
            end
        end
    })
    
    LeftGroup:AddButton({
        Text = "📋 Sao chép HWID",
        Func = function()
            setclipboard(clientId)
            Library:Notify({
                Title = "Đã sao chép",
                Description = "HWID copied to clipboard",
                Time = 2
            })
        end
    })
    
    local RightGroup = Tabs.Validation:AddRightGroupbox("Liên kết nhanh")
    
    RightGroup:AddButton({
        Text = "🔗 Nhận liên kết khóa",
        Func = function()
            setclipboard("https://chronicle-secure-admin-dashboard-kappa.vercel.app/verify/provider-select")
            Library:Notify({
                Title = "Đã sao chép",
                Description = "Key link copied to clipboard",
                Time = 2
            })
        end
    })

    RightGroup:AddButton({
        Text = "Kênh Youtube",
        Func = function()
            setclipboard("https://www.youtube.com/@COMBO_WICK")
            Library:Notify({
                Title = "Đã sao chép",
                Description = "YouTube link copied to clipboard",
                Time = 2
            })
        end
    })
    
    RightGroup:AddButton({
        Text = "Máy chủ 💬 Discord",
        Func = function()
            setclipboard("https://discord.gg/9FWBQnVXCy")
            Library:Notify({
                Title = "Đã sao chép",
                Description = "Discord link copied to clipboard",
                Time = 2
            })
        end
    })
    
    RightGroup:AddDivider()
    
    RightGroup:AddButton({
        Text = "Đóng",
        Func = function()
            Library:Unload()
        end
    })
    
    local timeout = 300
    local elapsed = 0
    while not validationComplete and elapsed < timeout do
        wait(1)
        elapsed = elapsed + 1
    end
    
    if validationSuccess then
        wait(2)
        
        VaultModule.resetCache(clientId)
        
        whitelisted, matchData, errorType = VaultModule.isClientIdWhitelisted(clientId, encryptedClientId)
        
        if whitelisted then
            VaultModule.startSessionMonitoring(clientId)
            
            getgenv().VaultReady = true
            
            Library:Notify({
                Title = "Đang tải",
                Description = "Loading script...",
                Time = 2
            })
            
            local scriptApiUrl = VaultModule.getScriptApiUrl()
            local defaultScriptUrl = VaultModule.getDefaultScriptUrl()
            
            local scriptToLoad = defaultScriptUrl
            
            local success, response = pcall(function()
                return VaultModule.httpRequest({
                    Url = scriptApiUrl,
                    Method = 'GET',
                })
            end)
            
            if success and response and response.Body then
                local parseSuccess, data = pcall(function()
                    return HttpService:JSONDecode(response.Body)
                end)
                
                if parseSuccess and data then
                    local gameIdStr = tostring(game.PlaceId)
                    if data[gameIdStr] then
                        scriptToLoad = data[gameIdStr]
                    elseif data['default'] then
                        scriptToLoad = data['default']
                    end
                end
            end
            
            wait(1)
            VaultModule.memoryCleanup:disconnectAll()
            
            if type(scriptToLoad) == 'table' then
                for i, url in ipairs(scriptToLoad) do
                    spawn(function()
                        pcall(function()
                            loadstring(game:HttpGet(url:match('^[^%s]+')))()
                        end)
                    end)
                end
            else
                spawn(function()
                    pcall(function()
                        loadstring(game:HttpGet(scriptToLoad:match('^[^%s]+')))()
                    end)
                end)
            end
            
            return {
                success = true,
                whitelisted = true,
                matchData = matchData,
                validated = true,
                sessionToken = VaultModule.VALIDATION_STATE.sessionToken
            }
        else
            return {
                success = false,
                error = "not_whitelisted_after_validation"
            }
        end
    else
        return {
            success = false,
            error = "validation_cancelled"
        }
    end
end

if whitelisted then
    VaultModule.startSessionMonitoring(clientId)
    
    getgenv().VaultReady = true
    
    Library:Notify({
        Title = "Đã được xác thực",
        Description = "Loading script...",
        Time = 2
    })
    
    local scriptApiUrl = VaultModule.getScriptApiUrl()
    local defaultScriptUrl = VaultModule.getDefaultScriptUrl()
    
    local scriptToLoad = defaultScriptUrl
    
    local success, response = pcall(function()
        return VaultModule.httpRequest({
            Url = scriptApiUrl,
            Method = 'GET',
        })
    end)
    
    if success and response and response.Body then
        local parseSuccess, data = pcall(function()
            return HttpService:JSONDecode(response.Body)
        end)
        
        if parseSuccess and data then
            local gameIdStr = tostring(game.PlaceId)
            if data[gameIdStr] then
                scriptToLoad = data[gameIdStr]
            elseif data['default'] then
                scriptToLoad = data['default']
            end
        end
    end
    
    wait(1)
    VaultModule.memoryCleanup:disconnectAll()
    
    if type(scriptToLoad) == 'table' then
        for i, url in ipairs(scriptToLoad) do
            spawn(function()
                pcall(function()
                    loadstring(game:HttpGet(url:match('^[^%s]+')))()
                end)
            end)
        end
    else
        spawn(function()
            pcall(function()
                loadstring(game:HttpGet(scriptToLoad:match('^[^%s]+')))()
            end)
        end)
    end
    
    return {
        success = true,
        whitelisted = true,
        matchData = matchData,
        sessionToken = VaultModule.VALIDATION_STATE.sessionToken
    }
else
    return {
        success = false,
        whitelisted = false
    }
end