-- Protected Script (German)
-- Script ID: 48fff63242c8fb8563115052945e969a
-- Created: 2025-10-01T19:35:13.215Z
-- Source: External API
-- Auto-generated by Lua Script Vault

-- Load WindUI Library
local WindUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/Footagesus/WindUI/main/dist/main.lua"))()

-- Toggle Button for WindUI
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "WindUIToggleBtn"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = CoreGui

local Button = Instance.new("TextButton")
Button.Size = UDim2.new(0, 50, 0, 50)
Button.Position = UDim2.new(0, 10, 0.5, -25)
Button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
Button.Text = "X"
Button.TextSize = 18
Button.TextColor3 = Color3.fromRGB(255, 255, 255)
Button.Font = Enum.Font.GothamBold
Button.Active = true
Button.Draggable = true
Button.Parent = ScreenGui

local Corner = Instance.new("UICorner")
Corner.CornerRadius = UDim.new(0, 10)
Corner.Parent = Button

local Stroke = Instance.new("UIStroke")
Stroke.Color = Color3.fromRGB(48, 255, 106)
Stroke.Thickness = 2
Stroke.Parent = Button

local visible = true

local function toggle()
    visible = not visible
    
    -- Use WindUI's toggle method
    Window:Toggle()
    
    -- Update button appearance
    Button.Text = visible and "X" or "UI"
    Stroke.Color = visible and Color3.fromRGB(48, 255, 106) or Color3.fromRGB(255, 72, 48)
    
    WindUI:Notify({
        Title = visible and "UI Shown" or "UI Hidden",
        Content = "",
        Icon = visible and "eye" or "eye-off",
        Duration = 1
    })
end

Button.MouseButton1Click:Connect(toggle)

-- Add this section at the very top of your script, right after loading WindUI

-- URL Obfuscation System
local function constructUrl(parts)
    return table.concat(parts, '')
end

local function getModuleUrl()
    local urlParts = {}
    urlParts[1] = string.char(104, 116, 116, 112, 115, 58, 47, 47)  -- "https://"
    local noise1 = math.random(10, 99) * 2.718
    local dummy1 = 'noise_' .. tostring(noise1)
    urlParts[2] = 'raw.githubusercontent'
    for i = 1, 3 do
        local temp = i * i * 3
    end
    local garbage1 = 'skip_this'
    urlParts[3] = '.com/checkurasshole/'
    local decoy1 = {}
    for i = 1, 4 do
        table.insert(decoy1, i * 9)
    end
    local unused1 = table.concat(decoy1, '-')
    urlParts[4] = 'PET/refs/heads/main/'
    local junkMath1 = math.sin(os.time() % 10) * 77
    local extra1 = 'not_used_' .. tostring(junkMath1)
    urlParts[5] = 'Mainscript'
    return table.concat(urlParts)
end

local function getLogWallUrl()
    local segments = {}
    segments[1] = string.char(104, 116, 116, 112, 115, 58, 47, 47)
    local mockData = tostring(math.random(1000, 9999))
    local fakeRef = 'ref_' .. mockData
    segments[2] = 'raw.githubusercontent'
    for m = 1, 5 do
        local throwaway = m * m + 7
    end
    local dummyToken = 'token_' .. tostring(os.time() % 100)
    segments[3] = '.com/checkurasshole/'
    local noise = {}
    for i = 1, 4 do
        table.insert(noise, i * 11)
    end
    local jumble = table.concat(noise, '-')
    segments[4] = 'PET/refs/heads/main/'
    local lastCalc = math.abs(math.sin(os.clock())) * 200
    local dummyEnd = 'verify_' .. tostring(lastCalc)
    segments[5] = 'wadadd'
    return table.concat(segments)
end

local function getPlantHouseUrl()
    local fragments = {}
    fragments[1] = string.char(104, 116, 116, 112, 115, 58, 47, 47)
    local randomBits = math.random(1, 64) * 4
    local skipMe = 'skip_' .. tostring(randomBits)
    fragments[2] = 'raw.githubusercontent'
    for n = 3, 6 do
        local useless = n * 3.33
    end
    local dummyVar = 'debug_' .. tostring(math.floor(math.random() * 1000))
    fragments[3] = '.com/checkurasshole/'
    local fakeData = {}
    for i = 1, 3 do
        table.insert(fakeData, i * 33)
    end
    local junkStr = table.concat(fakeData, '_')
    fragments[4] = 'Script/refs/heads/main/'
    local endJunk = math.ceil(os.clock() * 50)
    local dummyEnd = 'end_' .. tostring(endJunk)
    fragments[5] = '9999'
    return table.concat(fragments)
end

local function getDiamondFarmUrl()
    local urlBits = {}
    urlBits[1] = string.char(104, 116, 116, 112, 115, 58, 47, 47)
    local mockTime = os.time() % 86400
    local fakeClock = 'time_' .. tostring(mockTime)
    urlBits[2] = 'raw.githubusercontent'
    for q = 2, 5 do
        local throwaway = q * 17 - 5
    end
    local unusedVar = 'unused_' .. tostring(math.random(100, 999))
    urlBits[3] = '.com/checkurasshole/'
    local junkVal = {}
    for i = 1, 5 do
        table.insert(junkVal, i * 12)
    end
    local garbage = table.concat(junkVal, ':')
    urlBits[4] = 'Script/refs/heads/main/'
    local lastVal = math.floor(math.random() * 444)
    local dummyEnd = 'check_' .. tostring(lastVal)
    urlBits[5] = 'brennan/bre2nnan-stealth-vertex-mod-4551.lua'
    return table.concat(urlBits)
end

Module = loadstring(game:HttpGet(getModuleUrl()))()
local LogWallModule = getLogWallUrl()
local PlantHouseModule = getPlantHouseUrl()

local LogWallBuilder = loadstring(game:HttpGet(LogWallModule))()
local PlantHouseBuilder = loadstring(game:HttpGet(PlantHouseModule))()

-- Setup character handlers (with safety check)
if Module and typeof(Module.setupCharacterHandlers) == "function" then
    Module.setupCharacterHandlers()
end

LogWallBuilder:Initialize()

local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local player = Players.LocalPlayer
local isActive = true

-- Auto-load settings
local settingsFile = "CombinedBuilderPro/autoload_settings.json"
local autoLoadSettings = {
    enabled = false,
    configName = "defaultBuild"
}

local function loadAutoLoadSettings()
    pcall(function()
        if isfile(settingsFile) then
            local data = HttpService:JSONDecode(readfile(settingsFile))
            autoLoadSettings.enabled = data.enabled or false
            autoLoadSettings.configName = data.configName or "defaultBuild"
        end
    end)
end

local function saveAutoLoadSettings()
    pcall(function()
        local folder = settingsFile:match("(.+)/")
        if folder and not isfolder(folder) then
            makefolder(folder)
        end
        writefile(settingsFile, HttpService:JSONEncode(autoLoadSettings))
    end)
end

loadAutoLoadSettings()

local function handleBuildStatus(status, data)
    if status == "started" then
        WindUI:Notify({
            Title = "Baubeginn",
            Content = data.walls .. " walls",
            Icon = "hammer",
            Duration = 2
        })
    elseif status == "cancelled" then
        WindUI:Notify({
            Title = "Gestorbenes Gebäude",
            Content = "Angehalten bei" .. data.wallNumber,
            Icon = "x-circle",
            Duration = 3
        })
    elseif status == "placement_failed" then
        WindUI:Notify({
            Title = "EINZELPLANUNG",
            Content = "Wand" .. data.wallNumber,
            Icon = "alert-triangle",
            Duration = 10
        })
    elseif status == "walls_not_appearing" then
        WindUI:Notify({
            Title = "SCHREIT NICHT AUF",
            Content = "",
            Icon = "alert-triangle",
            Duration = 10
        })
    elseif status == "complete" then
        WindUI:Notify({
            Title = "Gebäude komplett!",
            Content = data.successCount .. " / " .. data.total,
            Icon = "check-circle",
            Duration = 3
        })
    end
end

WindUI:SetTheme("Dark")

-- Create Window
local Window = WindUI:CreateWindow({
    Title = "KOMBO_WICK",
    Icon = "",
    Author = "Helped By ProBaconHub",
    Folder = "UltimateMultiTool",
    Size = UDim2.fromOffset(580, 500),
    Theme = "Dark",
    Transparent = true,
    SideBarWidth = 160,
    HideSearchBar = false
})

Window:Tag({
    Title = "v2.0",
    Color = Color3.fromHex("#30ff6a"),
    Radius = 5
})

-- FLUENT UI TABS (ABOVE)
local MainTab = Window:Tab({ Title = "Wichtigste Aufgabe", Icon = "zap" })
local DiamondFarmTab = Window:Tab({ Title = "Diamantfarm", Icon = "gem" })
local CollectorTab = Window:Tab({ Title = "Artikel-Sammler", Icon = "package" })
local PivotTab = Window:Tab({ Title = "Hauptfeuer", Icon = "move" })
local CombatTab = Window:Tab({ Title = "Bekämpfungssystem", Icon = "sword" })
local CookingTab = Window:Tab({ Title = "Kochen & Essen", Icon = "flame" })
local VisualTab = Window:Tab({ Title = "Visuelle Werkzeuge", Icon = "eye" })

-- WINDUI TABS (BELOW)
local LogWallTab = Window:Tab({ Title = "Protokollwände", Icon = "shield" })
local PlantHouseTab = Window:Tab({ Title = "Pflanzen/Häuser", Icon = "home" })
local ConfigTab = Window:Tab({ Title = "Einfügen", Icon = "save" })
local SettingsTab = Window:Tab({ Title = "Einstellungen", Icon = "settings" })

-- =====================
-- MAIN QUEST TAB
-- =====================
MainTab:Button({
    Title = "Quest Automation",
    Desc = "",
    Icon = "info",
    Callback = function() end
})

MainTab:Space()

MainTab:Toggle({
    Title = "Karte entsperren + Kinder bekommen",
    Desc = "",
    Value = false,
    Callback = function(Value)
        if Value then
            Module.Vars.MAP_UNLOCK_ENABLED = true
            Module.Vars.CHILDREN_COLLECTION_ENABLED = true
            task.spawn(function()
                Module.unlockAllMapAreas()
                task.wait(2)
                Module.collectAllChildren()
            end)
        else
            Module.Vars.MAP_UNLOCK_ENABLED = false
            Module.Vars.CHILDREN_COLLECTION_ENABLED = false
            Module.Vars.stopMapUnlocking = true
        end
    end
})

MainTab:Space()

local childDropdownValue = "None"
MainTab:Dropdown({
    Title = "Kinder bekommen",
    Desc = "",
    Values = {"None", "DinoKid", "KrakenKid", "SquidKid", "KoalaKid"},
    Value = "None",
    Callback = function(Value)
        childDropdownValue = Value
        Module.teleportToSpecificChild(Value)
    end
})


-- =====================
-- DIAMOND FARM TAB
-- =====================
DiamondFarmTab:Button({
    Title = "Diamond Farm System",
    Desc = "",
    Icon = "info",
    Callback = function() end
})

DiamondFarmTab:Space()

local diamondFarmActive = false
local diamondFarmToggle  -- Add this line

diamondFarmToggle = DiamondFarmTab:Toggle({  -- Store the toggle reference
    Title = "Diamond Farm aktivieren",
    Desc = "Load and activate diamond farming script",
    Value = false,
    Callback = function(Value)
        diamondFarmActive = Value
        if Value then
            local success, err = pcall(function()
                loadstring(game:HttpGet(getDiamondFarmUrl()))()
            end)
            
            if success then
                WindUI:Notify({
                    Title = "Diamond Farm geladen",
                    Content = "Skript erfolgreich aktiviert",
                    Icon = "gem",
                    Duration = 3
                })
            else
                WindUI:Notify({
                    Title = "Last fehlgeschlagen",
                    Content = "Konnte Diamant Bauernhof Skript nicht laden",
                    Icon = "x-circle",
                    Duration = 5
                })
            end
        else
            WindUI:Notify({
                Title = "Diamond Farm deaktiviert",
                Content = "Abschalten - Skript kann noch laufen",
                Icon = "info",
                Duration = 2
            })
        end
    end
})

-- =====================
-- ITEM COLLECTOR TAB
-- =====================
CollectorTab:Button({
    Title = "System für die Erfassung von Posten",
    Desc = "Automated item collection with filters",
    Icon = "info",
    Callback = function() end
})

CollectorTab:Space()

local selectedPlayer = nil
local PlayerDropdown = CollectorTab:Dropdown({
    Title = "Elemente für den Player sammeln",
    Desc = "",
    Values = Module.getPlayerList(),
    Value = Module.getPlayerList()[1],
    Callback = function(Value)
        selectedPlayer = Value
        Module.Vars.selectedPlayer = Value
        WindUI:Notify({
            Title = "Zielspieler geändert",
            Content = "Artikel werden gesammelt, um" .. Value,
            Duration = 2
        })
    end
})

task.spawn(function()
    while true do
        task.wait(5)
        PlayerDropdown:Refresh(Module.getPlayerList())
    end
end)

local selectedItem = nil
local ItemDropdown = CollectorTab:Dropdown({
    Title = "Objekttyp auswählen",
    Desc = "",
    Values = Module.getDropdownItems(),
    Value = Module.getDropdownItems()[1],
    Callback = function(Value)
        selectedItem = Value
    end
})

CollectorTab:Button({
    Title = "Ausgewählte Einträge sammeln",
    Desc = "",
    Icon = "download",
    Color = Color3.fromHex("#30ff6a"),
    Callback = function()
        if selectedItem then
            Module.collectItems(selectedItem, WindUI)
        else
            WindUI:Notify({
                Title = "Keine Auswahl gemacht",
                Content = "Bitte wählen Sie zuerst Artikeltyp",
                Duration = 2
            })
        end
    end
})

CollectorTab:Space()

CollectorTab:Button({
    Title = "Hören Sie auf zu sammeln",
    Desc = "",
    Icon = "square",
    Color = Color3.fromHex("#ff4830"),
    Callback = function()
        Module.Vars.collectingActive = false
    end
})

CollectorTab:Button({
    Title = "Alle Brusthöhlen öffnen",
    Desc = "",
    Icon = "box",
    Callback = function()
        Module.openAndLootChests(WindUI)
    end
})

CollectorTab:Space()

CollectorTab:Toggle({
    Title = "Nachweis der Diamant-Truhe",
    Desc = "Auto detect and move to Diamond Chests",
    Value = true,
    Callback = function(Value)
        Module.Vars.DIAMOND_CHEST_DETECTION = Value
        if Value then
            Module.setupDiamondChestDetection(WindUI)
        else
            if Module.diamondChestConnection then
                Module.diamondChestConnection:Disconnect()
            end
        end
    end
})

CollectorTab:Toggle({
    Title = "Neue Elemente automatisch looten",
    Desc = "Automatically collect new items",
    Value = false,
    Callback = function(Value)
        Module.Vars.autoLootEnabled = Value
        if Value then
            Module.setupAutoLoot()
        end
    end
})

CollectorTab:Space()

CollectorTab:Toggle({
    Title = "Münzen automatisch sammeln",
    Desc = "Automatically collect coins",
    Value = false,
    Callback = function(Value)
        Module.Vars.AUTO_COLLECT_COINS_ENABLED = Value
        Module.setupCoinAutoCollection()
        
        if Value and Module.Vars.COIN_COLLECTION_METHOD == "Get Coins Instant V2" then
            task.spawn(function()
                while Module.Vars.AUTO_COLLECT_COINS_ENABLED and Module.Vars.COIN_COLLECTION_METHOD == "Get Coins Instant V2" do
                    Module.bringCoinsToPlayer()
                    task.wait(1)
                end
            end)
        end
    end
})

CollectorTab:Dropdown({
    Title = "Methode der Münzsammlung",
    Desc = "",
    Values = Module.Categories.COIN_METHODS,
    Value = Module.Categories.COIN_METHODS[1],
    Callback = function(Value)
        Module.Vars.COIN_COLLECTION_METHOD = Value
        Module.setupCoinAutoCollection()
        
        if Module.Vars.AUTO_COLLECT_COINS_ENABLED and Value == "Get Coins Instant V2" then
            task.spawn(function()
                while Module.Vars.AUTO_COLLECT_COINS_ENABLED and Module.Vars.COIN_COLLECTION_METHOD == "Get Coins Instant V2" do
                    Module.bringCoinsToPlayer()
                    task.wait(1)
                end
            end)
        end
    end
})

-- =====================
-- MAINFIRE TAB
-- =====================
PivotTab:Button({
    Title = "Hauptfeuer-Sammlung",
    Desc = "",
    Icon = "info",
    Callback = function() end
})

PivotTab:Space()

PivotTab:Dropdown({
    Title = "Erhebungsposition",
    Desc = "",
    Values = {"MainFire", "Scrapper"},
    Value = "MainFire",
    Callback = function(Value)
        Module.Vars.POSITION_MODE = Value
    end
})

PivotTab:Button({
    Title = "Alles Holz einsammeln",
    Desc = "",
    Icon = "download",
    Color = Color3.fromHex("#30ff6a"),
    Callback = function()
        if Module.Vars.POSITION_MODE == "Scrapper" then
            Module.collectScrapperItems(WindUI)
        else
            Module.collectFuelPivot(WindUI)
        end
    end
})

PivotTab:Button({
    Title = "Hören Sie auf zu sammeln",
    Desc = "",
    Icon = "square",
    Color = Color3.fromHex("#ff4830"),
    Callback = function()
        Module.Vars.collectingActive = false
    end
})

PivotTab:Button({
    Title = "Teleport auf ausgewählte Position",
    Desc = "",
    Icon = "map-pin",
    Callback = function()
        local LocalPlayer = Module.Services.Players.LocalPlayer
        local Character = LocalPlayer.Character
        if Character and Character:FindFirstChild("HumanoidRootPart") then
            local targetPos = Module.getTargetPosition()
            Character.HumanoidRootPart.CFrame = CFrame.new(targetPos)
        end
    end
})

PivotTab:Space()

PivotTab:Slider({
    Title = "Erfassungsgeschwindigkeit",
    Desc = "",
    Value = {
        Min = 0.01,
        Max = 0.3,
        Default = 0.05
    },
    Callback = function(Value)
        Module.Vars.BRING_SPEED = Value
    end
})

PivotTab:Toggle({
    Title = "Streuen Sie die Gegenstände herum",
    Desc = "",
    Value = true,
    Callback = function(Value)
        Module.Vars.SCATTER_ENABLED = Value
    end
})

PivotTab:Slider({
    Title = "Streuen Sie die Gegenstände nicht",
    Desc = "",
    Value = {
        Min = 1,
        Max = 15,
        Default = 5
    },
    Callback = function(Value)
        Module.Vars.SCATTER_RANGE = Value
    end
})

-- =====================
-- COMBAT TAB
-- =====================
CombatTab:Button({
    Title = "Auto-Waffenerkennung",
    Desc = "Script detects equipped/inventory weapons",
    Icon = "info",
    Callback = function() end
})

local function getWeaponStatus()
    Module.getCurrentEquipped()
    local weapon = Module.getCurrentWeapon()
    if weapon then
        local isEquipped = Module.Vars.currentEquippedItem ~= "None" and weapon.Name == Module.Vars.currentEquippedItem
        return weapon.Name .. (isEquipped and " (Equipped)" or " (In Inventory)")
    else
        return "No weapon found"
    end
end

local weaponStatusButton = CombatTab:Button({
    Title = "Laufende Waffe",
    Desc = getWeaponStatus(),
    Icon = "crosshair",
    Callback = function() end
})

task.spawn(function()
    while true do
        task.wait(1)
        weaponStatusButton:SetDesc(getWeaponStatus())
    end
end)

CombatTab:Space()

local treeType = "smalltree"
CombatTab:Dropdown({
    Title = "Baumtyp auswählen",
    Desc = "",
    Values = {"smalltree", "bigtree"},
    Value = "smalltree",
    Callback = function(Value)
        treeType = Value
        Module.Vars.selectedTreeType = Value
    end
})

CombatTab:Space()

CombatTab:Button({
    Title = "Angriff auf die NPCs",
    Desc = "",
    Icon = "sword",
    Color = Color3.fromHex("#ff4830"),
    Callback = function()
        local currentWeapon = Module.getCurrentWeapon()
        if currentWeapon then
            Module.attackWithItem(currentWeapon)
        end
    end
})

CombatTab:Button({
    Title = "Baumstämme hacken",
    Desc = "",
    Icon = "axe",
    Callback = function()
        local currentWeapon = Module.getCurrentWeapon()
        if currentWeapon then
            Module.chopTreesWithItem(currentWeapon)
        end
    end
})

CombatTab:Space()

CombatTab:Toggle({
    Title = "Gott mode",
    Desc = "",
    Value = getgenv().onelinegodmode or false,
    Callback = function(Value)
        getgenv().onelinegodmode = Value
    end
})

CombatTab:Button({
    Title = "Sofortige ALLE Eingabeaufforderung",
    Desc = "",
    Icon = "zap",
    Callback = function()
        local modified = 0
        for _, v in pairs(workspace:GetDescendants()) do
            if v:IsA("ProximityPrompt") then
                v.HoldDuration = 0
                modified = modified + 1
            end
        end
        
        WindUI:Notify({
            Title = "Veränderte Schritte",
            Content = "Satz" .. modified .. " prompts to instant",
            Duration = 2
        })
    end
})

-- =====================
-- COOKING TAB
-- =====================
CookingTab:Button({
    Title = "Lebensmittelmanagement",
    Desc = "",
    Icon = "info",
    Callback = function() end
})

CookingTab:Space()

CookingTab:Toggle({
    Title = "Automatisches Essen",
    Desc = "",
    Value = false,
    Callback = function(Value)
        Module.Vars.AUTO_EAT_ENABLED = Value
        if Value then
            task.spawn(function()
                while Module.Vars.AUTO_EAT_ENABLED do
                    Module.autoEatFood()
                    task.wait(0.5)
                end
            end)
        end
    end
})

CookingTab:Dropdown({
    Title = "Essen für Auto-Essen",
    Desc = "",
    Values = Module.Categories.EATABLE_FOODS,
    Value = Module.Categories.EATABLE_FOODS[1],
    Callback = function(Value)
        Module.Vars.SELECTED_FOOD_TO_EAT = Value
    end
})

CookingTab:Space()

CookingTab:Toggle({
    Title = "Automatisches Cook-System",
    Desc = "",
    Value = false,
    Callback = function(Value)
        Module.Vars.AUTO_COOK_ENABLED = Value
        if Value then
            Module.autoCook(WindUI)
        end
    end
})

CookingTab:Toggle({
    Title = "Essen nach dem Kochen bringen",
    Desc = "",
    Value = false,
    Callback = function(Value)
        Module.Vars.TELEPORT_TO_PLAYER_AFTER = Value
    end
})

CookingTab:Button({
    Title = "Auf dem Weg zum Camp",
    Desc = "",
    Icon = "flame",
    Callback = function()
        Module.teleportToMainFire()
    end
})

-- =====================
-- VISUAL TAB
-- =====================
VisualTab:Button({
    Title = "Visuelle Verbesserungen",
    Desc = "",
    Icon = "info",
    Callback = function() end
})

VisualTab:Space()

VisualTab:Toggle({
    Title = "Voll hell",
    Desc = "",
    Value = false,
    Callback = function(Value)
        Module.toggleFullBright(Value)
    end
})

VisualTab:Toggle({
    Title = "Spielername hervorheben",
    Desc = "",
    Value = false,
    Callback = function(Value)
        Module.togglePlayerESP(Value)
    end
})

VisualTab:Space()

VisualTab:Slider({
    Title = "Laufgeschwindigkeit",
    Desc = "",
    Value = {
        Min = 16,
        Max = 100,
        Default = 16
    },
    Callback = function(Value)
        local LocalPlayer = Module.Services.Players.LocalPlayer
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = Value
        end
    end
})

VisualTab:Space()

VisualTab:Button({
    Title = "Kopieren Spiel Teleport Script",
    Desc = "",
    Icon = "copy",
    Callback = function()
        Module.copyGameTeleport()
    end
})

-- =====================
-- LOG WALL TAB (WINDUI ORIGINAL)
-- =====================
local resourceButton, requiredButton, continueButton
local radiusSlider, numWallsSlider, buildSpeedSlider, maxZoomSlider, previewToggle, structureInput

LogWallTab:Button({
    Title = "BETA MODE - ERWÄGLICHE GEBÄUDE",
    Desc = "",
    Icon = "alert-triangle",
    Color = Color3.fromHex("#ff4830"),
    Callback = function() end
})

LogWallTab:Space()

local function updateLogWallResourceDisplay()
    local availableLogs = LogWallBuilder:CountAvailableLogs()
    local availableWood = LogWallBuilder:GetAvailableWood()
    local totalWallsNeeded = LogWallBuilder.Config.numWalls
    local woodPerWall = LogWallBuilder.Config.woodPerWall
    local totalWoodNeeded = totalWallsNeeded * woodPerWall
    local currentTime = os.date("%H:%M:%S")
    
    if resourceButton then
        resourceButton:SetTitle("Available Resources")
        resourceButton:SetDesc("Logs: " .. availableLogs .. " | Wood: " .. availableWood .. " | " .. currentTime)
    end
    
    if requiredButton then
        local hasEnoughWood = availableWood >= totalWoodNeeded
        local status = hasEnoughWood and "✓ READY" or "✗ NEED MORE"
        local missingWood = math.max(0, totalWoodNeeded - availableWood)
        
        local desc = totalWallsNeeded .. " walls × " .. woodPerWall .. " wood • " .. status
        if missingWood > 0 then
            desc = desc .. " • Missing: " .. missingWood
        end
        
        requiredButton:SetTitle("Required: " .. totalWoodNeeded .. " wood")
        requiredButton:SetDesc(desc)
    end
end

resourceButton = LogWallTab:Button({
    Title = "Verfügbare Mittel",
    Desc = "",
    Icon = "package",
    Callback = function()
        updateLogWallResourceDisplay()
        WindUI:Notify({
            Title = "Ressourcen aktualisiert",
            Content = "",
            Icon = "refresh-cw",
            Duration = 2
        })
    end
})

requiredButton = LogWallTab:Button({
    Title = "Erforderliches Holz", 
    Desc = "",
    Icon = "info",
    Callback = function() end
})

LogWallTab:Button({
    Title = "Ressourcen aktualisieren",
    Desc = "",
    Icon = "refresh-cw",
    Callback = function()
        updateLogWallResourceDisplay()
        WindUI:Notify({
            Title = "Ressourcen aktualisiert",
            Content = "",
            Icon = "refresh-cw",
            Duration = 2
        })
    end
})

spawn(function()
    while isActive do
        updateLogWallResourceDisplay()
        wait(10)
    end
end)

LogWallTab:Space()

structureInput = LogWallTab:Input({
    Title = "Strukturbezeichnung",
    Desc = "",
    Placeholder = "Log Wall",
    Value = LogWallBuilder.Config.structureName,
    Icon = "package",
    Callback = function(value)
        LogWallBuilder.Config.structureName = value
    end
})

LogWallTab:Space()

radiusSlider = LogWallTab:Slider({
    Title = "Radius des Kreises",
    Desc = "",
    Value = {
        Min = 3,
        Max = 500,
        Default = LogWallBuilder.Config.radius
    },
    Callback = function(value)
        LogWallBuilder.Config.radius = value
        LogWallBuilder:UpdatePreview()
    end
})

numWallsSlider = LogWallTab:Slider({
    Title = "Anzahl der Wände",
    Desc = "",
    Value = {
        Min = 4,
        Max = 500,
        Default = LogWallBuilder.Config.numWalls
    },
    Callback = function(value)
        LogWallBuilder.Config.numWalls = value
        LogWallBuilder:UpdatePreview()
        updateLogWallResourceDisplay()
    end
})

LogWallTab:Space()

buildSpeedSlider = LogWallTab:Slider({
    Title = "Geschwindigkeit erstellen",
    Desc = "",
    Value = {
        Min = 0,
        Max = 1,
        Default = LogWallBuilder.Config.buildSpeed
    },
    Callback = function(value)
        LogWallBuilder.Config.buildSpeed = value
    end
})

maxZoomSlider = LogWallTab:Slider({
    Title = "Maximale Entfernung vergrößern",
    Desc = "",
    Value = {
        Min = 50,
        Max = 2000,
        Default = LogWallBuilder.Config.maxZoom
    },
    Callback = function(value)
        LogWallBuilder.Config.maxZoom = value
        player.CameraMaxZoomDistance = value
    end
})

LogWallTab:Space()

previewToggle = LogWallTab:Toggle({
    Title = "Vorschau anzeigen",
    Desc = "",
    Value = LogWallBuilder.Config.previewEnabled,
    Callback = function(state)
        LogWallBuilder.Config.previewEnabled = state
        LogWallBuilder:UpdatePreview()
    end
})

LogWallTab:Space()

LogWallTab:Button({
    Title = "Vorschau löschen",
    Desc = "",
    Icon = "trash-2",
    Callback = function()
        LogWallBuilder:ClearPreview()
        WindUI:Notify({
            Title = "Vorschau gelöscht",
            Content = "",
            Icon = "trash-2",
            Duration = 2
        })
    end
})

LogWallTab:Space()

LogWallTab:Button({
    Title = "GEBÄUDE GEBÄUDE AROUND CAMP",
    Desc = "",
    Icon = "zap",
    Color = Color3.fromHex("#30ff6a"),
    Callback = function()
        local success, result = LogWallBuilder:BuildCircle(LogWallBuilder.Config.structureName, handleBuildStatus)
        if not success then
            WindUI:Notify({
                Title = result:find("Already") and "Already Building" or "Not Enough Wood!",
                Content = result,
                Icon = "alert-circle",
                Duration = 5
            })
        end
    end
})

continueButton = LogWallTab:Button({
    Title = "Weiterbauen",
    Desc = "",
    Icon = "play",
    Color = Color3.fromHex("#ffa500"),
    Callback = function()
        if LogWallBuilder:ContinueBuilding() then
            WindUI:Notify({
                Title = "Gebäude wiederaufgenommen",
                Content = "",
                Icon = "play",
                Duration = 2
            })
        else
            WindUI:Notify({
                Title = "Nicht gestillt",
                Content = "",
                Icon = "info",
                Duration = 2
            })
        end
    end
})

LogWallTab:Button({
    Title = "AUFBAU",
    Desc = "",
    Icon = "square",
    Color = Color3.fromHex("#ff4830"),
    Callback = function()
        LogWallBuilder:StopBuilding()
        WindUI:Notify({
            Title = "Gebäude gestoppt",
            Content = "",
            Icon = "square",
            Duration = 2
        })
    end
})

-- =====================
-- PLANT/HOUSE TAB (WINDUI ORIGINAL)
-- =====================
local plantResourceButton, plantRequiredButton
local plantShapeDropdown, houseTypeDropdown, sizeSlider, densitySlider
local xPosSlider, zPosSlider, yPosSlider, tiltSlider
local itemFilterInput, plantBuildSpeedSlider, plantPreviewToggle, skyModeToggle, plantMaxZoomSlider

local function updatePlantHouseResourceDisplay()
    local available = PlantHouseBuilder.countAvailableItems(PlantHouseBuilder.config.itemFilter)
    local currentTime = os.date("%H:%M:%S")
    
    local totalRequired = 0
    local breakdown = ""
    
    if PlantHouseBuilder.config.plantShape ~= "none" and PlantHouseBuilder.shapes[PlantHouseBuilder.config.plantShape] then
        local plantPoints = PlantHouseBuilder.shapes[PlantHouseBuilder.config.plantShape](PlantHouseBuilder.config.size, PlantHouseBuilder.config.density)
        totalRequired = totalRequired + #plantPoints
        breakdown = breakdown .. "Plants: " .. #plantPoints .. "\n"
    end
    
    if PlantHouseBuilder.config.houseType ~= "none" and PlantHouseBuilder.houses[PlantHouseBuilder.config.houseType] then
        local housePoints = PlantHouseBuilder.houses[PlantHouseBuilder.config.houseType](PlantHouseBuilder.config.size)
        totalRequired = totalRequired + #housePoints
        breakdown = breakdown .. "House blocks: " .. #housePoints .. "\n"
    end
    
    if plantResourceButton then
        plantResourceButton:SetTitle("You have " .. available .. " " .. PlantHouseBuilder.config.itemFilter .. " items available")
        plantResourceButton:SetDesc("Last checked: " .. currentTime)
    end
    
    if plantRequiredButton then
        if totalRequired > 0 then
            local status = available >= totalRequired and "ENOUGH ITEMS" or "NEED MORE ITEMS"
            local missing = math.max(0, totalRequired - available)
            
            plantRequiredButton:SetTitle(breakdown .. "Total needed: " .. totalRequired)
            plantRequiredButton:SetDesc(status .. (missing > 0 and " • Missing: " .. missing .. " items" or " • Ready to build!"))
        else
            plantRequiredButton:SetTitle("Required Items")
            plantRequiredButton:SetDesc("Select a plant shape or house type to see requirements")
        end
    end
end

plantResourceButton = PlantHouseTab:Button({
    Title = "Verfügbare Einträge",
    Desc = "",
    Icon = "package",
    Callback = function()
        updatePlantHouseResourceDisplay()
        WindUI:Notify({
            Title = "Ressourcen aktualisiert",
            Content = "Artikelanzahl wurde aktualisiert",
            Icon = "refresh-cw",
            Duration = 2
        })
    end
})

plantRequiredButton = PlantHouseTab:Button({
    Title = "Erforderliche Posten", 
    Desc = "",
    Icon = "info",
    Callback = function() end
})

PlantHouseTab:Button({
    Title = "Anzahl aktualisieren",
    Desc = "",
    Icon = "refresh-cw",
    Callback = function()
        updatePlantHouseResourceDisplay()
        WindUI:Notify({
            Title = "Ressourcen aktualisiert",
            Content = "",
            Icon = "refresh-cw",
            Duration = 2
        })
    end
})

spawn(function()
    while isActive do
        updatePlantHouseResourceDisplay()
        wait(10)
    end
end)

PlantHouseTab:Space()

plantShapeDropdown = PlantHouseTab:Dropdown({
    Title = "Pflanzenform",
    Desc = "",
    Values = {"none", "circle", "square", "star"},
    Value = PlantHouseBuilder.config.plantShape,
    Callback = function(value)
        PlantHouseBuilder.config.plantShape = value
        PlantHouseBuilder.updatePreview()
        updatePlantHouseResourceDisplay()
    end
})

houseTypeDropdown = PlantHouseTab:Dropdown({
    Title = "Haustyp",
    Desc = "",
    Values = {"none", "small_house", "large_house", "castle", "fortress"},
    Value = PlantHouseBuilder.config.houseType,
    Callback = function(value)
        PlantHouseBuilder.config.houseType = value
        PlantHouseBuilder.updatePreview()
        updatePlantHouseResourceDisplay()
    end
})

PlantHouseTab:Space()

sizeSlider = PlantHouseTab:Slider({
    Title = "Size",
    Desc = "",
    Value = {
        Min = 20,
        Max = 150,
        Default = PlantHouseBuilder.config.size
    },
    Callback = function(value)
        PlantHouseBuilder.config.size = value
        PlantHouseBuilder.updatePreview()
        updatePlantHouseResourceDisplay()
    end
})

densitySlider = PlantHouseTab:Slider({
    Title = "Anzahl der Pflanzen",
    Desc = "",
    Value = {
        Min = 5,
        Max = 80,
        Default = PlantHouseBuilder.config.density
    },
    Callback = function(value)
        PlantHouseBuilder.config.density = value
        PlantHouseBuilder.updatePreview()
        updatePlantHouseResourceDisplay()
    end
})

PlantHouseTab:Space()

xPosSlider = PlantHouseTab:Slider({
    Title = "X Position",
    Desc = "",
    Value = {
        Min = -300,
        Max = 300,
        Default = PlantHouseBuilder.config.centerX
    },
    Callback = function(value)
        PlantHouseBuilder.config.centerX = value
        PlantHouseBuilder.updatePreview()
    end
})

zPosSlider = PlantHouseTab:Slider({
    Title = "Z-Position",
    Desc = "",
    Value = {
        Min = -300,
        Max = 300,
        Default = PlantHouseBuilder.config.centerZ
    },
    Callback = function(value)
        PlantHouseBuilder.config.centerZ = value
        PlantHouseBuilder.updatePreview()
    end
})

yPosSlider = PlantHouseTab:Slider({
    Title = "Y-Position (Höhe)",
    Desc = "",
    Value = {
        Min = -50,
        Max = 100,
        Default = PlantHouseBuilder.config.centerY
    },
    Callback = function(value)
        PlantHouseBuilder.config.centerY = value
        PlantHouseBuilder.updatePreview()
    end
})

tiltSlider = PlantHouseTab:Slider({
    Title = "Kippen",
    Desc = "",
    Value = {
        Min = -90,
        Max = 90,
        Default = PlantHouseBuilder.config.tilt
    },
    Callback = function(value)
        PlantHouseBuilder.config.tilt = value
        PlantHouseBuilder.updatePreview()
    end
})

PlantHouseTab:Button({
    Title = "Spielerposition verwenden",
    Desc = "",
    Icon = "map-pin",
    Callback = function()
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local pos = player.Character.HumanoidRootPart.Position
            PlantHouseBuilder.config.centerX = math.floor(pos.X)
            PlantHouseBuilder.config.centerZ = math.floor(pos.Z)
            PlantHouseBuilder.updatePreview()
            
            WindUI:Notify({
                Title = "Position aktualisiert",
                Content = "Auf die Position des Spielers einstellen",
                Icon = "map-pin",
                Duration = 2
            })
        end
    end
})

PlantHouseTab:Space()

itemFilterInput = PlantHouseTab:Input({
    Title = "Artikelfilter",
    Desc = "",
    Placeholder = "sap",
    Value = PlantHouseBuilder.config.itemFilter,
    Icon = "search",
    Callback = function(value)
        PlantHouseBuilder.config.itemFilter = value
        updatePlantHouseResourceDisplay()
    end
})

plantBuildSpeedSlider = PlantHouseTab:Slider({
    Title = "Geschwindigkeit (schnell) erstellen",
    Desc = "",
    Value = {
        Min = 5,
        Max = 50,
        Default = PlantHouseBuilder.config.buildSpeed
    },
    Callback = function(value)
        PlantHouseBuilder.config.buildSpeed = value
    end
})

plantPreviewToggle = PlantHouseTab:Toggle({
    Title = "Vorschau anzeigen",
    Desc = "",
    Value = PlantHouseBuilder.config.previewEnabled,
    Callback = function(state)
        PlantHouseBuilder.config.previewEnabled = state
        PlantHouseBuilder.updatePreview()
    end
})

skyModeToggle = PlantHouseTab:Toggle({
    Title = "Himmelsmodus",
    Desc = "",
    Value = PlantHouseBuilder.config.skyMode,
    Callback = function(state)
        PlantHouseBuilder.config.skyMode = state
        PlantHouseBuilder.updatePreview()
    end
})

plantMaxZoomSlider = PlantHouseTab:Slider({
    Title = "Maximale Entfernung vergrößern",
    Desc = "",
    Value = {
        Min = 50,
        Max = 2000,
        Default = PlantHouseBuilder.config.maxZoom
    },
    Callback = function(value)
        PlantHouseBuilder.config.maxZoom = value
        player.CameraMaxZoomDistance = value
    end
})

PlantHouseTab:Space()

PlantHouseTab:Button({
    Title = "START-BAU",
    Desc = "",
    Icon = "play",
    Color = Color3.fromHex("#30ff6a"),
    Callback = function()
        if PlantHouseBuilder.config.isBuilding then
            WindUI:Notify({
                Title = "Bauen bereits",
                Content = "Bitte warten Sie, bis der aktuelle Bau abgeschlossen ist",
                Icon = "alert-circle",
                Duration = 3
            })
            return
        end
        
        local allPoints = {}
        
        if PlantHouseBuilder.config.plantShape ~= "none" and PlantHouseBuilder.shapes[PlantHouseBuilder.config.plantShape] then
            local plantPoints = PlantHouseBuilder.shapes[PlantHouseBuilder.config.plantShape](PlantHouseBuilder.config.size, PlantHouseBuilder.config.density)
            for _, point in pairs(plantPoints) do
                table.insert(allPoints, point)
            end
        end
        
        if PlantHouseBuilder.config.houseType ~= "none" and PlantHouseBuilder.houses[PlantHouseBuilder.config.houseType] then
            local housePoints = PlantHouseBuilder.houses[PlantHouseBuilder.config.houseType](PlantHouseBuilder.config.size)
            for _, point in pairs(housePoints) do
                table.insert(allPoints, point)
            end
        end
        
        if #allPoints > 0 then
            local available = PlantHouseBuilder.countAvailableItems(PlantHouseBuilder.config.itemFilter)
            if available < #allPoints then
                WindUI:Notify({
                    Title = "Nicht genug Sachen!",
                    Content = "Bedarf" .. (#allPoints - available) .. " more items",
                    Icon = "x-circle",
                    Duration = 5
                })
                return
            end
            
            PlantHouseBuilder.buildAtPositions(allPoints)
            WindUI:Notify({
                Title = "Baubeginn!",
                Content = "Gebäude" .. #allPoints .. " blocks",
                Icon = "hammer",
                Duration = 3
            })
        else
            WindUI:Notify({
                Title = "Nichts ausgewählt",
                Content = "Bitte wählen Sie eine Pflanzenform oder einen Haustyp",
                Icon = "alert-triangle",
                Duration = 3
            })
        end
    end
})

PlantHouseTab:Button({
    Title = "AUFBAU",
    Desc = "",
    Icon = "square",
    Color = Color3.fromHex("#ff4830"),
    Callback = function()
        PlantHouseBuilder.config.isBuilding = false
        PlantHouseBuilder.config.pendingPositions = {}
        WindUI:Notify({
            Title = "Gebäude gestoppt",
            Content = "Alle anstehenden Builds abgesagt",
            Icon = "square",
            Duration = 2
        })
    end
})

PlantHouseTab:Button({
    Title = "Vorschau löschen",
    Desc = "",
    Icon = "trash-2",
    Callback = function()
        PlantHouseBuilder.previewFolder:ClearAllChildren()
        WindUI:Notify({
            Title = "Vorschau gelöscht",
            Content = "",
            Icon = "trash-2",
            Duration = 2
        })
    end
})

-- =====================
-- CONFIG TAB (WINDUI ORIGINAL)
-- =====================
local ConfigManager = Window.ConfigManager
local buildConfig = ConfigManager:CreateConfig("defaultBuild")

buildConfig:Register("logWall_structureName", structureInput)
buildConfig:Register("logWall_circleRadius", radiusSlider)
buildConfig:Register("logWall_wallCount", numWallsSlider)
buildConfig:Register("logWall_buildSpeed", buildSpeedSlider)
buildConfig:Register("logWall_maxZoom", maxZoomSlider)
buildConfig:Register("logWall_showPreview", previewToggle)
-- Add this line:
buildConfig:Register("diamondFarm_enabled", diamondFarmToggle)

local configNameInput = ""
local selectedConfig = "defaultBuild"
local configDropdown
local autoLoadToggle, autoLoadConfigDropdown

local function refreshConfigList()
    local configs = ConfigManager:AllConfigs()
    if configDropdown and #configs > 0 then
        configDropdown:Refresh(configs)
    end
    if autoLoadConfigDropdown and #configs > 0 then
        autoLoadConfigDropdown:Refresh(configs)
    end
    return configs
end

ConfigTab:Input({
    Title = "Name der Rückhalteeinrichtung",
    Desc = "Enter name for new config",
    Placeholder = "myConfig",
    Value = "",
    Icon = "edit-3",
    Callback = function(v)
        configNameInput = v
    end
})

ConfigTab:Button({
    Title = "Neue Konfig erstellen",
    Desc = "Save current settings as new config",
    Icon = "plus-circle",
    Color = Color3.fromHex("#30ff6a"),
    Callback = function()
        if configNameInput == "" then
            WindUI:Notify({
                Title = "Fehler",
                Content = "Geben Sie zuerst einen Konfigurationsnamen ein",
                Icon = "alert-circle",
                Duration = 3
            })
            return
        end
        
        local newConfig = ConfigManager:CreateConfig(configNameInput)
		newConfig:Register("logWall_structureName", structureInput)
		newConfig:Register("logWall_circleRadius", radiusSlider)
		newConfig:Register("logWall_wallCount", numWallsSlider)
		newConfig:Register("logWall_buildSpeed", buildSpeedSlider)
		newConfig:Register("logWall_maxZoom", maxZoomSlider)
		newConfig:Register("logWall_showPreview", previewToggle)
		newConfig:Register("diamondFarm_enabled", diamondFarmToggle)
		newConfig:Save()
        
        selectedConfig = configNameInput
        refreshConfigList()
        
        WindUI:Notify({
            Title = "Config erstellt",
            Content = configNameInput,
            Icon = "check-circle",
            Duration = 3
        })
    end
})

ConfigTab:Space()

configDropdown = ConfigTab:Dropdown({
    Title = "Einfügen auswählen",
    Desc = "Choose config to load",
    Value = "defaultBuild",
    Values = {"defaultBuild"},
    Callback = function(v)
        selectedConfig = v
    end
})

ConfigTab:Button({
    Title = "Config laden",
    Desc = "Apply selected configuration",
    Icon = "download",
    Color = Color3.fromHex("#3b82f6"),
    Callback = function()
        local targetConfig = ConfigManager:CreateConfig(selectedConfig)
        targetConfig:Register("logWall_structureName", structureInput)
        targetConfig:Register("logWall_circleRadius", radiusSlider)
        targetConfig:Register("logWall_wallCount", numWallsSlider)
        targetConfig:Register("logWall_buildSpeed", buildSpeedSlider)
        targetConfig:Register("logWall_maxZoom", maxZoomSlider)
        targetConfig:Register("logWall_showPreview", previewToggle)
        targetConfig:Register("diamondFarm_enabled", diamondFarmToggle)
        targetConfig:Load()
        
        WindUI:Notify({
            Title = "Konfig geladen",
            Content = selectedConfig,
            Icon = "check-circle",
            Duration = 3
        })
        
        updateLogWallResourceDisplay()
    end
})

ConfigTab:Button({
    Title = "Aktuelle Konfig speichern",
    Desc = "Overwrite selected config",
    Icon = "save",
    Color = Color3.fromHex("#ffa500"),
    Callback = function()
        local targetConfig = ConfigManager:CreateConfig(selectedConfig)
        targetConfig:Register("logWall_structureName", structureInput)
        targetConfig:Register("logWall_circleRadius", radiusSlider)
        targetConfig:Register("logWall_wallCount", numWallsSlider)
        targetConfig:Register("logWall_buildSpeed", buildSpeedSlider)
        targetConfig:Register("logWall_maxZoom", maxZoomSlider)
        targetConfig:Register("logWall_showPreview", previewToggle)
        targetConfig:Register("diamondFarm_enabled", diamondFarmToggle)
        targetConfig:Save()
        
        WindUI:Notify({
            Title = "Gespeichert konfig",
            Content = selectedConfig,
            Icon = "check-circle",
            Duration = 3
        })
    end
})

ConfigTab:Space()

ConfigTab:Button({
    Title = "Config-Liste aktualisieren",
    Desc = "Update available configs",
    Icon = "refresh-cw",
    Callback = function()
        local configs = refreshConfigList()
        WindUI:Notify({
            Title = "Erfrischt",
            Content = #configs .. " configs found",
            Icon = "refresh-cw",
            Duration = 2
        })
    end
})

ConfigTab:Button({
    Title = "& Ausführen laden (Log Walls)",
    Desc = "Load config and start building log walls",
    Icon = "play-circle",
    Color = Color3.fromHex("#30ff6a"),
    Callback = function()
        local targetConfig = ConfigManager:CreateConfig(selectedConfig)
        targetConfig:Register("logWall_structureName", structureInput)
        targetConfig:Register("logWall_circleRadius", radiusSlider)
        targetConfig:Register("logWall_wallCount", numWallsSlider)
        targetConfig:Register("logWall_buildSpeed", buildSpeedSlider)
        targetConfig:Register("logWall_maxZoom", maxZoomSlider)
        targetConfig:Register("logWall_showPreview", previewToggle)
        targetConfig:Register("diamondFarm_enabled", diamondFarmToggle)
        targetConfig:Load()
        
        updateLogWallResourceDisplay()
        
        task.wait(0.3)
        
        local success, result = LogWallBuilder:BuildCircle(LogWallBuilder.Config.structureName, handleBuildStatus)
        if not success then
            WindUI:Notify({
                Title = result:find("Already") and "Already Building" or "Not Enough Wood!",
                Content = result,
                Icon = "alert-circle",
                Duration = 5
            })
        else
            WindUI:Notify({
                Title = "Ausführen von Protokollwänden",
                Content = selectedConfig,
                Icon = "zap",
                Duration = 2
            })
        end
    end
})

ConfigTab:Space()

autoLoadToggle = ConfigTab:Toggle({
    Title = "Automatisches Laden beim Starten",
    Desc = "Automatically load config when script starts",
    Value = autoLoadSettings.enabled,
    Callback = function(state)
        autoLoadSettings.enabled = state
        saveAutoLoadSettings()
        WindUI:Notify({
            Title = state and "Auto Load Enabled" or "Auto Load Disabled",
            Content = "",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

autoLoadConfigDropdown = ConfigTab:Dropdown({
    Title = "Konfig automatisch laden",
    Desc = "Select which config to auto load",
    Value = autoLoadSettings.configName,
    Values = {"defaultBuild"},
    Callback = function(v)
        autoLoadSettings.configName = v
        saveAutoLoadSettings()
        WindUI:Notify({
            Title = "Konfig-Einstellung automatisch laden",
            Content = v,
            Icon = "check-circle",
            Duration = 2
        })
    end
})

-- =====================
-- SETTINGS TAB
-- =====================
SettingsTab:Button({
    Title = "Sammlungseinstellungen",
    Desc = "Fine-tune collection behavior and performance",
    Icon = "info",
    Callback = function() end
})

SettingsTab:Space()

SettingsTab:Slider({
    Title = "Erfassungsgeschwindigkeit",
    Desc = "",
    Value = {
        Min = 0.01,
        Max = 0.3,
        Default = 0.05
    },
    Callback = function(Value)
        Module.Vars.BRING_SPEED = Value
    end
})

SettingsTab:Slider({
    Title = "Positionshöhe",
    Desc = "",
    Value = {
        Min = 1,
        Max = 8,
        Default = 3
    },
    Callback = function(Value)
        Module.Vars.ITEM_HEIGHT = Value
    end
})

SettingsTab:Toggle({
    Title = "Scatter Items",
    Desc = "",
    Value = true,
    Callback = function(Value)
        Module.Vars.SCATTER_ENABLED = Value
    end
})

SettingsTab:Input({
    Title = "Große Baumgrenze",
    Desc = "Number of bigtree to chop (0 = unlimited)",
    Placeholder = "50",
    Value = "50",
    Icon = "edit-3",
    Callback = function(Value)
        local numValue = tonumber(Value)
        if numValue and numValue >= 0 and numValue <= 1000 then
            Module.Vars.treeBigLimit = numValue
            WindUI:Notify({
                Title = "BigTree Limit Set",
                Content = "Limit: " .. (numValue == 0 and "Unlimited" or tostring(numValue)),
                Duration = 2
            })
        end
    end
})

-- =====================
-- CLEANUP AND INITIALIZATION
-- =====================
game.Players.PlayerRemoving:Connect(function(plr)
    if plr == player then 
        isActive = false
        Module.cleanup()
        PlantHouseBuilder.cleanup()
    end
end)

-- Initialize systems
Module.setupDiamondChestDetection(WindUI)

task.wait(0.5)
refreshConfigList()

-- Auto-load config if enabled
if autoLoadSettings.enabled and autoLoadSettings.configName then
    local configs = ConfigManager:AllConfigs()
    local configExists = false
    
    for _, cfg in ipairs(configs) do
        if cfg == autoLoadSettings.configName then
            configExists = true
            break
        end
    end
    
    if configExists then
        local autoConfig = ConfigManager:CreateConfig(autoLoadSettings.configName)
        autoConfig:Register("logWall_structureName", structureInput)
		autoConfig:Register("logWall_circleRadius", radiusSlider)
		autoConfig:Register("logWall_wallCount", numWallsSlider)
		autoConfig:Register("logWall_buildSpeed", buildSpeedSlider)
		autoConfig:Register("logWall_maxZoom", maxZoomSlider)
		autoConfig:Register("logWall_showPreview", previewToggle)
		autoConfig:Register("diamondFarm_enabled", diamondFarmToggle)  -- ADD THIS LINE
		autoConfig:Load()
        
        selectedConfig = autoLoadSettings.configName
        if configDropdown then
            configDropdown:SetValue(autoLoadSettings.configName)
        end
        
        WindUI:Notify({
            Title = "Automatisch geladen",
            Content = autoLoadSettings.configName,
            Icon = "check-circle",
            Duration = 3
        })
    end
end

-- Update displays and previews
updateLogWallResourceDisplay()
updatePlantHouseResourceDisplay()
LogWallBuilder:UpdatePreview()
PlantHouseBuilder.updatePreview()

WindUI:Notify({
    Title = "Ultimate Tool Hub geladen!",
    Content = "Alle Funktionen bereit",
    Icon = "check-circle",
    Duration = 3
})

print("Ultimate Multi-Tool Hub with WindUI loaded successfully")
 
 