-- Protected Script (Russian)
-- Script ID: 6f33b4b5624d47ce8317a98a61425ccf
-- Created: 2025-10-23T19:46:45.365Z
-- Source: External API
-- Auto-generated by Lua Script Vault

local moduleUrl = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/deadass"
local ComboWick = loadstring(game:HttpGet(moduleUrl))()

local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GetProfileData = ReplicatedStorage:WaitForChild("Events", 9e9):WaitForChild("GetProfileData", 9e9)

Library.ShowToggleFrameInKeybinds = true

local Window = Library:CreateWindow({
	Title = "COMBO_WICK",
	Footer = "Auto Farm & Pet Manager",
	Icon = 95816097006870,
	NotifySide = "Right",
	ShowCustomCursor = true,
})

local Tabs = {
	Main = Window:AddTab("Главное", "home"),
	["UI Settings"] = Window:AddTab("Параметры UI", "settings"),
}

local MainBox = Tabs.Main:AddLeftGroupbox("Автоматическое земледелие", "zap")

MainBox:AddToggle("Автолифт", {
	Text = "Автоматическое упражнение",
	Default = false,
	Callback = function(Value)
		ComboWick.Toggles.AutoLift = Value
	end,
})

MainBox:AddToggle("AutoPunch", {
	Text = "Автоматическое сражение",
	Default = false,
	Callback = function(Value)
		ComboWick.Toggles.AutoPunch = Value
	end,
})

MainBox:AddToggle("Автовосстановление", {
	Text = "Автоматическое возрождение",
	Default = false,
	Callback = function(Value)
		ComboWick.Toggles.AutoRebirth = Value
	end,
})

MainBox:AddDivider()

MainBox:AddToggle("Бесконечные Гемы", {
	Text = "Бесконечные семечки",
	Default = false,
	Callback = function(Value)
		ComboWick.Toggles.InfiniteGems = Value
	end,
})

MainBox:AddDivider()

MainBox:AddToggle("АнтиАФК", {
	Text = "Против AFK",
	Default = false,
	Callback = function(Value)
		ComboWick.Toggles.AntiAFK = Value
	end,
})

local PetBox = Tabs.Main:AddRightGroupbox("Peet Management", "heart")

PetBox:AddLabel("Auto Hatch and Craft")

PetBox:AddSlider("MaxHatches", {
	Text = "Шляпы перед плотом",
	Default = 5,
	Min = 1,
	Max = 20,
	Rounding = 0,
	Callback = function(Value)
		ComboWick.Options.MaxHatches = Value
	end,
})

PetBox:AddToggle("АвтоHatchCraft", {
	Text = "Автоматическая шляпа",
	Default = false,
	Callback = function(Value)
		ComboWick.Toggles.AutoHatchCraft = Value
	end,
})

PetBox:AddDivider()

PetBox:AddLabel("Remove pets by quality")

PetBox:AddToggle("Удалить ByTier", {
	Text = "Удалить по нумерации",
	Default = false,
	Callback = function(Value)
		ComboWick.Toggles.DeleteByTier = Value
	end,
})

PetBox:AddInput("DeleteTiers", {
	Default = "Basic,Uncommon,Rare",
	Finished = false,
	Text = "Уровни для удаления",
	Placeholder = "Basic,Uncommon,Rare,Epic,Shiny",
	Callback = function(Value)
		ComboWick.Options.DeleteTiers = Value
	end,
})

PetBox:AddDivider()

PetBox:AddToggle("Удалить имя@ info: whatsthis", {
	Text = "Удалить имя@ info: whatsthis",
	Default = false,
	Callback = function(Value)
		ComboWick.Toggles.DeleteByName = Value
	end,
})

PetBox:AddDropdown("DeleteNames", {
	Values = {},
	Default = 1,
	Multi = true,
	Text = "Имена, подлежащие исключению",
	Callback = function(Value)
		ComboWick.Options.DeleteNames = Value
	end,
})

PetBox:AddButton({
	Text = "Обновить имена петухов",
	Func = function()
		task.spawn(function()
			local args = { [1] = true }
			local success, profileData = pcall(function()
				return GetProfileData:InvokeServer(unpack(args))
			end)
			
			if success and profileData and profileData.Pets then
				local uniqueNames = {}
				local nameList = {}
				
				for _, petData in pairs(profileData.Pets) do
					if petData.PetName and not uniqueNames[petData.PetName] then
						uniqueNames[petData.PetName] = true
						table.insert(nameList, petData.PetName)
					end
				end
				
				table.sort(nameList)
				if Options.DeleteNames then
					Options.DeleteNames.Values = nameList
					Options.DeleteNames:SetValues(nameList)
				end
			end
		end)
	end,
})

PetBox:AddDivider()

PetBox:AddToggle("Автовыделить", {
	Text = "Автовыделить питомцев",
	Default = false,
	Callback = function(Value)
		ComboWick.Toggles.AutoDelete = Value
	end,
})

PetBox:AddButton({
	Text = "Руководитель Удалить сейчас",
	Func = function()
		ComboWick:DeletePets()
	end,
	Risky = true,
})

local lastRefreshTime = 0
local refreshCooldown = 30

task.spawn(function()
	RunService.Heartbeat:Connect(function()
		if tick() - lastRefreshTime >= refreshCooldown then
			lastRefreshTime = tick()
			
			task.spawn(function()
				local args = { [1] = true }
				local success, profileData = pcall(function()
					return GetProfileData:InvokeServer(unpack(args))
				end)
				
				if success and profileData and profileData.Pets then
					local uniqueNames = {}
					local nameList = {}
					
					for _, petData in pairs(profileData.Pets) do
						if petData.PetName and not uniqueNames[petData.PetName] then
							uniqueNames[petData.PetName] = true
							table.insert(nameList, petData.PetName)
						end
					end
					
					table.sort(nameList)
					if Options.DeleteNames then
						Options.DeleteNames.Values = nameList
						Options.DeleteNames:SetValues(nameList)
					end
				end
			end)
		end
	end)
end)

local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Меню", "wrench")

MenuGroup:AddToggle("Keybind Menu Open", {
	Default = Library.KeybindFrame.Visible,
	Text = "Открыть меню ключей",
	Callback = function(value)
		Library.KeybindFrame.Visible = value
	end,
})

MenuGroup:AddToggle("Показать CustomCoursor", {
	Text = "Обычный куратор",
	Default = true,
	Callback = function(Value)
		Library.ShowCustomCursor = Value
	end,
})

MenuGroup:AddDropdown("NotificationSide", {
	Values = { "Left", "Right" },
	Default = "Right",
	Text = "Обратная сторона уведомления",
	Callback = function(Value)
		Library:SetNotifySide(Value)
	end,
})

MenuGroup:AddDivider()
MenuGroup:AddLabel("Menu bind"):AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Меню клавиша@ info: whatsthis" })

MenuGroup:AddButton("Unload", function()
	ComboWick:Destroy()
	Library:Unload()
end)

Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })
ThemeManager:SetFolder("COMBO_WICK")
SaveManager:SetFolder("COMBO_WICK/configs")
SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToTab(Tabs["UI Settings"])

ComboWick:Initialize()