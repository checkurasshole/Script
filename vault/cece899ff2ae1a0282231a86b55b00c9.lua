-- Protected Script (Spanish)
-- Script ID: cece899ff2ae1a0282231a86b55b00c9
-- Created: 2025-10-19T14:54:40.077Z
-- Source: External API
-- Auto-generated by Lua Script Vault

loadstring(game:HttpGet("https://raw.githubusercontent.com/checkurasshole/PET/refs/heads/main/loader"))()

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local PathfindingService = game:GetService("PathfindingService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local ComboWick = loadstring(game:HttpGet("https://raw.githubusercontent.com/checkurasshole/PET/refs/heads/main/afkfarming"))()

ComboWick.InitAntiAFK()

local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

local Window = Library:CreateWindow({
    Title = "Hub COMBO_WICK",
    Footer = "Live Tracker",
    Icon = 95816097006870,
    NotifySide = "Right",
    ShowCustomCursor = true,
})

local Tabs = {
    Main = Window:AddTab("Radar", "eye"),
    AutoWalk = Window:AddTab("Apuntar a la caza", "navigation"),
    Collect = Window:AddTab("Reclamación de dinero", "dollar-sign"),
    PrivServer = Window:AddTab("Modo servidor", "server"),
    ["UI Settings"] = Window:AddTab("Configuración", "settings"),
}

local animalSettings = {}
for _, name in ipairs(ComboWick.commonAnimals) do animalSettings[name] = false end
for _, name in ipairs(ComboWick.adminAnimals) do animalSettings[name] = false end
for _, name in ipairs(ComboWick.brainrotGodAnimals) do animalSettings[name] = false end
for _, name in ipairs(ComboWick.secretAnimals) do animalSettings[name] = false end

local espEnabled = false
local tracerEnabled = false
local tracerThickness = 3
local activeESP = {}

local autoWalkEnabled = false
local currentTargetAnimal = nil
local isHoldingPrompt = false
local receivedNotification = false
local promptFiredForCurrentAnimal = false

local collectMoneyEnabled = false
local collectRunning = false
local collectStatus = "Idle"
local collectInterval = 15

local PlotController = require(ReplicatedStorage.Controllers.PlotController)

local RENotificationServiceNotify = ReplicatedStorage.Packages.Net:WaitForChild("RE/NotificationService/Notify")

local CARPET_COLOR = Color3.fromRGB(196, 40, 28)
local CARPET_SIZE = Vector3.new(20, 0.5, 401)

local function isOnCarpet(position)
    local carpet = workspace.Map:FindFirstChild("Carpet")
    if not carpet then return true end
    
    local carpetPos = carpet.Position
    local halfSize = CARPET_SIZE / 2
    
    local isWithinX = math.abs(position.X - carpetPos.X) <= halfSize.X
    local isWithinZ = math.abs(position.Z - carpetPos.Z) <= halfSize.Z
    
    return isWithinX and isWithinZ
end

local function isAnimalOnCarpet(animalModel)
    local targetPart = animalModel:FindFirstChild("Part")
    if not targetPart then return false end
    
    return isOnCarpet(targetPart.Position)
end

RENotificationServiceNotify.OnClientEvent:Connect(function(message)
    if message and (message:find("need more room") or message:find("brainrot")) then
        receivedNotification = true
        currentTargetAnimal = nil
        isHoldingPrompt = false
        promptFiredForCurrentAnimal = false
    end
end)

ComboWick.SetupProximityDetection(function(prompt)
    if not autoWalkEnabled then return end
    
    local promptParent = prompt.Parent
    if not promptParent then return end
    
    local animalModel = promptParent.Parent
    if not animalModel then return end
    
    if currentTargetAnimal == animalModel then
        promptFiredForCurrentAnimal = true
        currentTargetAnimal = nil
        isHoldingPrompt = false
        
        Library:Notify("Target Hunt", "Pet collected! Next target incoming...", 2)
    end
end)

local function StealAllClaims()
    if collectRunning then return end
    collectRunning = true
    collectStatus = "Checking plot..."
    
    local character = player.Character
    if not character then 
        collectRunning = false
        collectStatus = "No character found"
        return 
    end

    local myPlot = PlotController:GetMyPlot()
    if not myPlot or not myPlot.PlotModel then
        collectRunning = false
        collectStatus = "Plot not found"
        return
    end

    local plotId = myPlot.PlotModel.Name
    local plot = workspace.Plots:FindFirstChild(plotId)
    
    if not plot then
        collectRunning = false
        collectStatus = "Plot not in workspace"
        return
    end

    local animalPodiums = plot:FindFirstChild("AnimalPodiums")
    if not animalPodiums then
        collectRunning = false
        collectStatus = "No podiums found"
        return
    end

    collectStatus = "Walking to podiums..."
    local claimCount = 0
    local maxClaims = 10
    
    for _, podium in ipairs(animalPodiums:GetChildren()) do
        if not character.Parent or not collectMoneyEnabled or claimCount >= maxClaims then break end
        
        local claim = podium:FindFirstChild("Claim")
        if claim then
            local hitbox = claim:FindFirstChild("Hitbox")
            if hitbox then
                claimCount = claimCount + 1
                collectStatus = "Collecting " .. claimCount .. "/10..."
                ComboWick.WalkToTarget(character, hitbox.Position)
                task.wait(0.5)
            end
        end
    end
    
    collectStatus = "Collected " .. claimCount .. "/10 claims"
    collectRunning = false
end

local function stopWalking()
    currentTargetAnimal = nil
    isHoldingPrompt = false
    promptFiredForCurrentAnimal = false
    
    local character = player.Character
    if character then
        local humanoid = character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid:MoveTo(character.HumanoidRootPart.Position)
        end
    end
end

local function findClosestAnimal()
    local character = player.Character
    if not character then return nil end
    
    local root = character:FindFirstChild("HumanoidRootPart")
    if not root then return nil end
    
    local closestAnimal = nil
    local closestDistance = math.huge
    
    for _, obj in pairs(workspace:GetChildren()) do
        if obj:FindFirstChild("Part") and obj.Part:FindFirstChild("Info") then
            local info = ComboWick.GetAnimalInfo(obj)
            if info and animalSettings[info.Name] then
                if isAnimalOnCarpet(obj) then
                    local targetPart = obj:FindFirstChild("Part")
                    if targetPart then
                        local distance = (root.Position - targetPart.Position).Magnitude
                        if distance < closestDistance then
                            closestDistance = distance
                            closestAnimal = obj
                        end
                    end
                end
            end
        end
    end
    
    return closestAnimal
end

local function isInMyPlot(position)
    local myPlot = PlotController:GetMyPlot()
    if not myPlot or not myPlot.PlotModel then return false end
    
    local plotId = myPlot.PlotModel.Name
    local plot = workspace.Plots:FindFirstChild(plotId)
    
    if not plot then return false end
    
    local plotRegion = plot:FindFirstChild("PlotRegion") or plot
    if plotRegion and plotRegion:IsA("BasePart") then
        local plotPos = plotRegion.Position
        local plotSize = plotRegion.Size
        local halfSize = plotSize / 2
        
        local isWithinX = math.abs(position.X - plotPos.X) <= halfSize.X
        local isWithinY = math.abs(position.Y - plotPos.Y) <= halfSize.Y
        local isWithinZ = math.abs(position.Z - plotPos.Z) <= halfSize.Z
        
        return isWithinX and isWithinY and isWithinZ
    end
    
    local distance = (position - plot:GetPivot().Position).Magnitude
    return distance <= 50
end

local function walkToAnimalContinuous(animalModel)
    local character = player.Character
    if not character then return end
    
    local humanoid = character:FindFirstChild("Humanoid")
    local root = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not root then return end
    
    local targetPart = animalModel:FindFirstChild("Part")
    if not targetPart then return end
    
    currentTargetAnimal = animalModel
    receivedNotification = false
    promptFiredForCurrentAnimal = false
    
    local prompt = ComboWick.GetProximityPrompt(animalModel)
    if not prompt then return end
    
    local lastPathTime = 0
    local pathUpdateInterval = 1
    
    while autoWalkEnabled and animalModel.Parent and currentTargetAnimal == animalModel and not receivedNotification and not promptFiredForCurrentAnimal do
        if not isAnimalOnCarpet(animalModel) then
            Library:Notify("Target Hunt", "Pet left zone! Finding next target...", 2)
            currentTargetAnimal = nil
            break
        end
        
        local distance = (root.Position - targetPart.Position).Magnitude
        local inMyPlot = isInMyPlot(root.Position)
        
        if inMyPlot then
            local currentTime = tick()
            
            if currentTime - lastPathTime >= pathUpdateInterval then
                task.spawn(function()
                    local path = PathfindingService:CreatePath({
                        AgentRadius = 2,
                        AgentHeight = 5,
                        AgentCanJump = true,
                        AgentCanClimb = false,
                        WaypointSpacing = 4
                    })
                    
                    path:ComputeAsync(root.Position, targetPart.Position)
                    
                    if path.Status == Enum.PathStatus.Success and autoWalkEnabled and not promptFiredForCurrentAnimal and isInMyPlot(root.Position) then
                        local waypoints = path:GetWaypoints()
                        
                        for i = 1, #waypoints do
                            if not autoWalkEnabled or not animalModel.Parent or promptFiredForCurrentAnimal or not isAnimalOnCarpet(animalModel) then break end
                            if not isInMyPlot(root.Position) then break end
                            
                            local wp = waypoints[i]
                            humanoid:MoveTo(wp.Position)
                            
                            local timeout = 0
                            while (root.Position - wp.Position).Magnitude > 4 and timeout < 2 do
                                if not isInMyPlot(root.Position) then break end
                                task.wait(0.1)
                                timeout = timeout + 0.1
                            end
                        end
                    end
                end)
                
                lastPathTime = currentTime
            end
        else
            humanoid:MoveTo(targetPart.Position)
        end
        
        if distance <= (prompt.MaxActivationDistance or 10) and not isHoldingPrompt and not promptFiredForCurrentAnimal then
            isHoldingPrompt = true
            
            task.spawn(function()
                ComboWick.HoldProximityPrompt(prompt, prompt.HoldDuration or 1)
                task.wait(0.5)
                
                if not animalModel.Parent or receivedNotification or promptFiredForCurrentAnimal or not isAnimalOnCarpet(animalModel) then
                    currentTargetAnimal = nil
                end
                
                isHoldingPrompt = false
            end)
        end
        
        task.wait(0.1)
    end
    
    if receivedNotification then
        humanoid:MoveTo(root.Position)
        autoWalkEnabled = false
    elseif promptFiredForCurrentAnimal then
        currentTargetAnimal = nil
    end
end

local function autoWalkLoop()
    while autoWalkEnabled do
        if not isHoldingPrompt and not promptFiredForCurrentAnimal then
            local closest = findClosestAnimal()
            if closest and closest ~= currentTargetAnimal then
                walkToAnimalContinuous(closest)
            end
        end
        task.wait(0.5)
    end
end

local ESPGroupBox = Tabs.Main:AddLeftGroupbox("Opciones de visualización", "eye")

ESPGroupBox:AddToggle("ESPToggle", {
    Text = "Mostrar marcadores de mascotas",
    Default = false,
    Callback = function(v)
        espEnabled = v
        if not v then
            for _, esp in pairs(activeESP) do
                ComboWick.CleanupESP(esp)
            end
            activeESP = {}
        end
    end
})

ESPGroupBox:AddToggle("TracerToggle", {
    Text = "Mostrar líneas de dirección",
    Default = false,
    Callback = function(v)
        tracerEnabled = v
        if not v then
            for _, esp in pairs(activeESP) do
                if esp.Tracer then
                    esp.Tracer:Remove()
                    esp.Tracer = nil
                end
            end
        end
    end
})

local AnimalGroupBox = Tabs.Main:AddRightGroupbox("Filtro para mascotas", "filter")

AnimalGroupBox:AddDropdown("CommonDropdown", {
    Values = ComboWick.commonAnimals,
    Multi = true,
    Default = 1,
    Text = "Mascotas estándar",
    Callback = function(Value)
        for _, name in ipairs(ComboWick.commonAnimals) do
            animalSettings[name] = Value[name] or false
        end
    end
})

AnimalGroupBox:AddDropdown("AdminDropdown", {
    Values = ComboWick.adminAnimals,
    Multi = true,
    Default = 1,
    Text = "Admin/OG Mascotas",
    Callback = function(Value)
        for _, name in ipairs(ComboWick.adminAnimals) do
            animalSettings[name] = Value[name] or false
        end
    end
})

AnimalGroupBox:AddDropdown("BrainrotGodDropdown", {
    Values = ComboWick.brainrotGodAnimals,
    Multi = true,
    Default = 1,
    Text = "BrainrotGod Mascotas",
    Searchable = true,
    Callback = function(Value)
        for _, name in ipairs(ComboWick.brainrotGodAnimals) do
            animalSettings[name] = Value[name] or false
        end
    end
})

AnimalGroupBox:AddDropdown("SecretDropdown", {
    Values = ComboWick.secretAnimals,
    Multi = true,
    Default = 1,
    Text = "Mascotas secretas",
    Searchable = true,
    Callback = function(Value)
        for _, name in ipairs(ComboWick.secretAnimals) do
            animalSettings[name] = Value[name] or false
        end
    end
})

local AutoWalkGroupBox = Tabs.AutoWalk:AddLeftGroupbox("Configuración de la caza", "navigation")

AutoWalkGroupBox:AddToggle("AutoWalkToggle", {
    Text = "Iniciar la caza de mascotas",
    Default = false,
    Callback = function(v)
        autoWalkEnabled = v
        if v then
            task.spawn(autoWalkLoop)
        else
            stopWalking()
        end
    end
})

local CollectGroupBox = Tabs.Collect:AddLeftGroupbox("Configuración de la reclamación", "dollar-sign")

CollectGroupBox:AddToggle("CollectMoneyToggle", {
    Text = "Reclamación automática",
    Default = false,
    Callback = function(v)
        collectMoneyEnabled = v
        if v then
            collectStatus = "Starting..."
            task.spawn(function()
                while collectMoneyEnabled do
                    if not collectRunning then
                        StealAllClaims()
                    end
                    
                    for i = collectInterval, 1, -1 do
                        if not collectMoneyEnabled then break end
                        collectStatus = "Next run in " .. i .. "s"
                        task.wait(1)
                    end
                end
                collectStatus = "Idle"
            end)
        else
            collectStatus = "Idle"
        end
    end
})

CollectGroupBox:AddInput("CollectInterval", {
    Default = "15",
    Numeric = true,
    Finished = true,
    Text = "Intervalo (segundos)",
    Placeholder = "Enter seconds",
    Callback = function(v)
        local num = tonumber(v)
        if num and num > 0 then
            collectInterval = num
        end
    end
})

local StatusGroupBox = Tabs.Collect:AddRightGroupbox("Situación", "activity")
local StatusLabel = StatusGroupBox:AddLabel({
    Text = "Status: Idle",
    DoesWrap = true,
})

task.spawn(function()
    while task.wait(0.5) do
        StatusLabel:SetText("Status: " .. collectStatus)
    end
end)

local PrivServerGroupBox = Tabs.PrivServer:AddLeftGroupbox("Servidor privado", "server")

PrivServerGroupBox:AddLabel({
    Text = "ATAQUEADO",
    DoesWrap = true,
})

PrivServerGroupBox:AddDivider()

local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menú", "settings")

MenuGroup:AddToggle("MostrarCustomCursor", {
    Text = "Cursor personalizado",
    Default = true,
    Callback = function(Value)
        Library.ShowCustomCursor = Value
    end
})

MenuGroup:AddDropdown("NotificationSide", {
    Values = { "Left", "Right" },
    Default = 2,
    Text = "Lado de alerta",
    Callback = function(Value)
        Library:SetNotifySide(Value)
    end,
})

MenuGroup:AddDivider()
MenuGroup:AddLabel("Keybind"):AddKeyPicker("MenuKeybind", { 
    Default = "RightShift", 
    NoUI = true, 
    Text = "Teclado del menú" 
})

MenuGroup:AddButton({
    Text = "Descarga",
    Func = function()
        Library:Unload()
    end
})

Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })

ThemeManager:SetFolder("ComboWick")
SaveManager:SetFolder("ComboWick/configs")

SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToTab(Tabs["UI Settings"])

RunService.RenderStepped:Connect(function()
    if not espEnabled then return end
    
    for _, obj in pairs(workspace:GetChildren()) do
        if obj:FindFirstChild("Part") and obj.Part:FindFirstChild("Info") then
            local info = ComboWick.GetAnimalInfo(obj)
            if info and animalSettings[info.Name] then
                local mainPart = obj:FindFirstChild("Part")
                
                if mainPart then
                    if not activeESP[obj] then
                        activeESP[obj] = {
                            Billboard = ComboWick.CreateBillboard(info.Name, mainPart),
                            Highlights = ComboWick.CreateHighlights(info.Name, obj),
                            Tracer = nil,
                            Name = info.Name
                        }
                    end
                    
                    if tracerEnabled then
                        if not activeESP[obj].Tracer then
                            activeESP[obj].Tracer = ComboWick.CreateTracer(info.Name)
                        end
                        
                        local tracer = activeESP[obj].Tracer
                        tracer.Thickness = tracerThickness
                        
                        local pos, onScreen = Camera:WorldToViewportPoint(mainPart.Position)
                        if onScreen then
                            tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                            tracer.To = Vector2.new(pos.X, pos.Y)
                            tracer.Visible = true
                        else
                            tracer.Visible = false
                        end
                    elseif activeESP[obj].Tracer then
                        activeESP[obj].Tracer:Remove()
                        activeESP[obj].Tracer = nil
                    end
                end
            elseif activeESP[obj] then
                ComboWick.CleanupESP(activeESP[obj])
                activeESP[obj] = nil
            end
        end
    end

    for obj, esp in pairs(activeESP) do
        if not obj.Parent then
            ComboWick.CleanupESP(esp)
            activeESP[obj] = nil
        end
    end
end)

Library:OnUnload(function()
    for _, esp in pairs(activeESP) do
        ComboWick.CleanupESP(esp)
    end
    activeESP = {}
end)