local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
local Items = workspace:WaitForChild("Items")

-- Game Detection
local gameDetected = false
if workspace:FindFirstChild("Map") and workspace:FindFirstChild("Items") then
    gameDetected = true
end

-- Settings
local AUTO_FARM_ENABLED = false
local DIAMOND_CHEST_DETECTION = true

-- Anti-Void System (runs automatically in background)
local ANTI_VOID_ENABLED = true
local OrgDestroyHeight = workspace.FallenPartsDestroyHeight
local antivoidloop = nil

-- Diamond Chest Detection
local diamondChestConnection = nil

-- Fire Level Tracking
local currentLevel = 0
local currentText = ""
local isFullyRevealed = false
local Billboard = nil
local Frame = nil

-- Fallback positions when no trees are found
local FALLBACK_POSITIONS = {
    CFrame.new(123.113708, 1.03243303, -328.113556, 1, 0, 0, 0, 1, 0, 0, 0, 1),
    CFrame.new(245.338486, -8.13047695, -202.074432, 1, 0, 0, 0, 1, 0, 0, 0, 1),
    CFrame.new(230.796982, -2.93100095, 40.3914032, 0, 0, 1, 0, 1, -0, -1, 0, 0)
}
local currentFallbackIndex = 1

-- Fog clearing variables
local stopTweening = false
local visitedParts = {}
local fogClearingComplete = false

-- Map unlock variables
local stopMapUnlocking = false
local mapUnlockVisitedParts = {}

-- Stronghold Sign Timer Tracking
local strongholdTimerActive = false
local lastBodyText = ""
local lastLevelText = ""

local function initializeStrongholdTracking()
    pcall(function()
        local sign = workspace:WaitForChild("Map"):WaitForChild("Landmarks"):WaitForChild("Stronghold")
                        :WaitForChild("Functional"):WaitForChild("Sign")
        local surfaceGui = sign:WaitForChild("SurfaceGui")
        local frame = surfaceGui:WaitForChild("Frame")
        local bodyLabel = frame:WaitForChild("Body")
        local levelLabel = frame:WaitForChild("Level")

        -- Function to check if timer is active
        local function checkTimer()
            local bodyText = bodyLabel.Text or ""
            local levelText = levelLabel.Text or ""

            if bodyText ~= lastBodyText or levelText ~= lastLevelText then
                print("----- Stronghold Sign Update -----")
                print("[BODY]:", bodyText)
                print("[LEVEL]:", levelText)
                lastBodyText = bodyText
                lastLevelText = levelText

                -- Check if timer is running (look for time format like "XX:XX" or countdown indicators)
                if string.match(bodyText, "%d+:%d+") or 
                   string.find(string.lower(bodyText), "time") or 
                   string.find(string.lower(bodyText), "minute") or 
                   string.find(string.lower(bodyText), "second") then
                    strongholdTimerActive = true
                    print("[TIMER STATUS]: Active")
                else
                    strongholdTimerActive = false
                    print("[TIMER STATUS]: Inactive")
                end
            end
        end

        -- Connect changes
        bodyLabel:GetPropertyChangedSignal("Text"):Connect(checkTimer)
        levelLabel:GetPropertyChangedSignal("Text"):Connect(checkTimer)

        -- Initial check
        checkTimer()
        
        Fluent:Notify({
            Title = "Stronghold Timer Tracking Active",
            Content = "Monitoring stronghold timer for diamond chest priority",
            Duration = 2
        })
    end)
end

-- Anti-Void Functions (auto-enabled)
local function enableAntiVoid()
    if antivoidloop then return end
    
    antivoidloop = RunService.Stepped:Connect(function()
        local root = HumanoidRootPart
        if root and root.Position.Y <= OrgDestroyHeight + 25 then
            root.Velocity = root.Velocity + Vector3.new(0, 250, 0)
        end
    end)
end

local function disableAntiVoid()
    if antivoidloop then
        antivoidloop:Disconnect()
        antivoidloop = nil
    end
end

-- Diamond Chest Detection System (integrated with auto farm and timer checking)
local function setupDiamondChestDetection()
    if diamondChestConnection then
        diamondChestConnection:Disconnect()
    end
    
    if not DIAMOND_CHEST_DETECTION then
        return
    end
    
    diamondChestConnection = Items.ChildAdded:Connect(function(child)
        if child.Name == "Stronghold Diamond Chest" then
            -- Check if timer is active before stopping auto farm
            if strongholdTimerActive then
                Fluent:Notify({
                    Title = "Diamond Chest Found - Timer Active",
                    Content = "Stronghold timer is running, continuing auto farm...",
                    Duration = 3
                })
                return -- Don't stop auto farm or teleport
            end
            
            -- Stop auto farm if running and no timer
            if AUTO_FARM_ENABLED then
                AUTO_FARM_ENABLED = false
                stopTweening = true
                stopMapUnlocking = true
                
                Fluent:Notify({
                    Title = "DIAMOND CHEST FOUND!",
                    Content = "No timer active - Auto farm stopped! Teleporting to Diamond Chest now!",
                    Duration = 5
                })
            else
                Fluent:Notify({
                    Title = "DIAMOND CHEST FOUND!",
                    Content = "Teleporting to Diamond Chest location now!",
                    Duration = 5
                })
            end
            
            task.wait(0.5)
            
            -- Teleport to diamond chest
            local itemPosition
            if child:IsA("Model") then
                itemPosition = child:GetModelCFrame().Position
            elseif child:IsA("BasePart") then
                itemPosition = child.Position
            end
            
            if itemPosition then
                local targetPosition = itemPosition + Vector3.new(0, 5, 0)
                local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                local tween = TweenService:Create(HumanoidRootPart, tweenInfo, {CFrame = CFrame.new(targetPosition)})
                tween:Play()
            end
        end
    end)
    
    -- Check for existing diamond chests and stop auto farm if found (only if no timer)
    for _, child in ipairs(Items:GetChildren()) do
        if child.Name == "Stronghold Diamond Chest" then
            if strongholdTimerActive then
                Fluent:Notify({
                    Title = "Diamond Chest Available - Timer Active",
                    Content = "Stronghold timer is running, not interrupting auto farm",
                    Duration = 3
                })
            else
                if AUTO_FARM_ENABLED then
                    AUTO_FARM_ENABLED = false
                    stopTweening = true
                    stopMapUnlocking = true
                    
                    Fluent:Notify({
                        Title = "Diamond Chest Available",
                        Content = "No timer active - Auto farm stopped! Teleporting now!",
                        Duration = 3
                    })
                    
                    -- Teleport to existing chest
                    local itemPosition
                    if child:IsA("Model") then
                        itemPosition = child:GetModelCFrame().Position
                    elseif child:IsA("BasePart") then
                        itemPosition = child.Position
                    end
                    
                    if itemPosition then
                        local targetPosition = itemPosition + Vector3.new(0, 5, 0)
                        teleportToPosition(targetPosition)
                    end
                else
                    Fluent:Notify({
                        Title = "Diamond Chest Available",
                        Content = "Diamond Chest found on map - Click to teleport!",
                        Duration = 3
                    })
                end
            end
            break
        end
    end
end

-- Handle character respawn
LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    Character = newCharacter
    HumanoidRootPart = newCharacter:WaitForChild("HumanoidRootPart")
    
    if ANTI_VOID_ENABLED then
        task.wait(1)
        disableAntiVoid()
        enableAntiVoid()
    end
end)

-- Create GUI
local Window = Fluent:CreateWindow({
    Title = "Ultimate Auto Farm Tool",
    SubTitle = "Complete Automation + Diamond Chest Detection",
    TabWidth = 140,
    Size = UDim2.fromOffset(450, 300),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local FarmTab = Window:AddTab({ Title = "Auto Farm", Icon = "zap" })
local UtilityTab = Window:AddTab({ Title = "Utility", Icon = "tool" })

-- Get Main Fire Position Function
local function getMainFirePosition()
    local mainFirePaths = {
        workspace.Map.Campground.MainFire,
        workspace.Map.Campground,
        workspace.Map,
    }
    
    for _, obj in ipairs(mainFirePaths) do
        if obj then
            if obj:IsA("BasePart") then
                return obj.Position
            elseif obj:IsA("Model") then
                if obj.PrimaryPart then
                    return obj.PrimaryPart.Position
                elseif obj:FindFirstChildWhichIsA("BasePart") then
                    return obj:FindFirstChildWhichIsA("BasePart").Position
                else
                    return obj:GetPivot().Position
                end
            end
        end
    end
    
    return workspace:WaitForChild("Terrain").Position
end

-- Fire Level Detection System
local function initializeFireLevelTracking()
    pcall(function()
        Billboard = workspace.Map.Campground.MainFire.Center:WaitForChild("BillboardGui")
        Frame = Billboard:WaitForChild("Frame")
        
        local function checkLevel(text)
            currentText = text
            
            local levelNum = string.match(text, "LEVEL%s*(%d+)")
            if not levelNum then
                levelNum = string.match(text, "Progress:?%s*(%d+)")
            end
            if not levelNum then
                levelNum = string.match(text, "FIRE%s*LEVEL%s*(%d+)")
            end
            
            levelNum = tonumber(levelNum)
            if levelNum and levelNum > currentLevel then
                currentLevel = levelNum
                Fluent:Notify({
                    Title = "Fire Level Up!",
                    Content = "Advanced to level " .. currentLevel,
                    Duration = 3
                })
            end
            
            if string.find(string.upper(text), "FIRE FULLY UPGRADED") or 
               string.find(string.upper(text), "MAP FULLY REVEALED") then
                isFullyRevealed = true
                Fluent:Notify({
                    Title = "FULLY UPGRADED!",
                    Content = "Fire fully upgraded! Map fully revealed!",
                    Duration = 5
                })
            end
        end
        
        for _, obj in pairs(Frame:GetDescendants()) do
            if obj:IsA("TextLabel") or obj:IsA("TextButton") then
                checkLevel(obj.Text)
                obj:GetPropertyChangedSignal("Text"):Connect(function()
                    checkLevel(obj.Text)
                end)
            end
        end
        
        Fluent:Notify({
            Title = "Fire Tracking Active",
            Content = "Monitoring fire level progress",
            Duration = 2
        })
    end)
end

-- Function to check current fire level
local function getCurrentFireLevel()
    pcall(function()
        local Billboard = workspace.Map.Campground.MainFire.Center:FindFirstChild("BillboardGui")
        if Billboard then
            local Frame = Billboard:FindFirstChild("Frame")
            if Frame then
                for _, obj in pairs(Frame:GetDescendants()) do
                    if obj:IsA("TextLabel") or obj:IsA("TextButton") then
                        local text = obj.Text
                        local levelNum = string.match(text, "LEVEL%s*(%d+)")
                        if not levelNum then
                            levelNum = string.match(text, "Progress:?%s*(%d+)")
                        end
                        if not levelNum then
                            levelNum = string.match(text, "FIRE%s*LEVEL%s*(%d+)")
                        end
                        
                        levelNum = tonumber(levelNum)
                        if levelNum then
                            currentLevel = levelNum
                            return levelNum
                        end
                        
                        if string.find(string.upper(text), "FIRE FULLY UPGRADED") or 
                           string.find(string.upper(text), "MAP FULLY REVEALED") then
                            isFullyRevealed = true
                            return 999 -- Max level indicator
                        end
                    end
                end
            end
        end
    end)
    return currentLevel or 0
end

-- Tree Chopping System
local function chopSmallTrees()
    local chopped = 0
    for _, axe in pairs(LocalPlayer:WaitForChild("Inventory"):GetChildren()) do
        if string.find(string.lower(axe.Name), "axe") then
            for _, v in pairs(workspace:WaitForChild("Map"):GetDescendants()) do
                if v.Name == "Small Tree" then
                    task.spawn(function()
                        pcall(function()
                            ReplicatedStorage.RemoteEvents.ToolDamageObject:InvokeServer(
                                v, axe, "1_" .. LocalPlayer.UserId, HumanoidRootPart.CFrame
                            )
                            chopped = chopped + 1
                        end)
                    end)
                end
            end
            break
        end
    end
    return chopped
end

-- Find Small Tree Location
local function findSmallTree()
    for _, v in pairs(workspace:WaitForChild("Map"):GetDescendants()) do
        if v.Name == "Small Tree" and v:IsA("Model") then
            local position = v:GetModelCFrame().Position
            return position
        elseif v.Name == "Small Tree" and v:IsA("BasePart") then
            return v.Position
        end
    end
    return nil
end

-- Get next fallback position
local function getNextFallbackPosition()
    local position = FALLBACK_POSITIONS[currentFallbackIndex]
    currentFallbackIndex = currentFallbackIndex + 1
    if currentFallbackIndex > #FALLBACK_POSITIONS then
        currentFallbackIndex = 1
    end
    return position
end

-- Count remaining Small Trees
local function countSmallTrees()
    local count = 0
    for _, v in pairs(workspace:WaitForChild("Map"):GetDescendants()) do
        if v.Name == "Small Tree" then
            count = count + 1
        end
    end
    return count
end

-- Teleport Player to Position
local function teleportToPosition(position)
    if not position then return false end
    
    local targetCFrame
    if typeof(position) == "CFrame" then
        targetCFrame = position
    else
        targetCFrame = CFrame.new(position + Vector3.new(0, 5, 0))
    end
    
    local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local tween = TweenService:Create(HumanoidRootPart, tweenInfo, {CFrame = targetCFrame})
    
    tween:Play()
    return true
end

-- Collect Logs to Main Fire
local function collectLogsToMainFire()
    local mainFirePos = getMainFirePosition()
    local collected = 0
    
    for _, item in ipairs(Items:GetChildren()) do
        if item.Name == "Log" then
            task.spawn(function()
                local targetPos = mainFirePos + Vector3.new(
                    math.random(-2, 2), 
                    3, 
                    math.random(-2, 2)
                )
                
                pcall(function()
                    item:MoveTo(targetPos)
                    local itemDrag = require(LocalPlayer.PlayerScripts.Client.InteractionHandler).Interactions.Item
                    itemDrag(item)
                    collected = collected + 1
                end)
            end)
            task.wait(0.05)
        end
    end
    
    return collected
end

-- Fog Clearing System
local function isValidPart(part)
    return part:IsA("BasePart") and
           not part:FindFirstChildWhichIsA("Fire") and
           not part:FindFirstChild("TouchInterest") and
           not visitedParts[part]
end

local function getValidParts(folder)
    local parts = {}
    for _, obj in ipairs(folder:GetChildren()) do
        if obj:IsA("BasePart") and isValidPart(obj) then
            table.insert(parts, obj)
        elseif obj:IsA("Model") or obj:IsA("Folder") then
            local childParts = getValidParts(obj)
            for _, p in ipairs(childParts) do
                table.insert(parts, p)
            end
        end
    end
    return parts
end

local function tweenToFogParts()
    local FogFolder = workspace.Map.Boundaries.Fog
    local tweenTime = 1.5
    local easingStyle = Enum.EasingStyle.Quad
    local easingDir = Enum.EasingDirection.Out
    local offsetY = 3
    
    Fluent:Notify({
        Title = "Fog Clearing Started",
        Content = "Clearing fog areas before auto farming",
        Duration = 3
    })
    
    while not stopTweening and AUTO_FARM_ENABLED do
        local parts = getValidParts(FogFolder)
        if #parts == 0 then
            Fluent:Notify({
                Title = "Fog Clearing Complete",
                Content = "All fog areas cleared! Starting auto farm...",
                Duration = 3
            })
            fogClearingComplete = true
            break
        end
        
        for _, part in ipairs(parts) do
            if stopTweening or not AUTO_FARM_ENABLED then break end
            if HumanoidRootPart and part then
                local goalCFrame = part.CFrame * CFrame.new(0, offsetY, 0)
                local tweenInfo = TweenInfo.new(tweenTime, easingStyle, easingDir)
                local tween = TweenService:Create(HumanoidRootPart, tweenInfo, {CFrame = goalCFrame})
                tween:Play()
                tween.Completed:Wait()
                visitedParts[part] = true
            end
        end
        RunService.Heartbeat:Wait()
    end
end

-- Map Unlock System
local function isValidMapUnlockPart(part)
    return part:IsA("BasePart") and
           not part:FindFirstChildWhichIsA("Fire") and
           not part:FindFirstChild("TouchInterest") and
           not mapUnlockVisitedParts[part]
end

local function getValidMapUnlockParts(folder)
    local parts = {}
    for _, obj in ipairs(folder:GetChildren()) do
        if obj:IsA("BasePart") and isValidMapUnlockPart(obj) then
            table.insert(parts, obj)
        elseif obj:IsA("Model") or obj:IsA("Folder") then
            local childParts = getValidMapUnlockParts(obj)
            for _, p in ipairs(childParts) do
                table.insert(parts, p)
            end
        end
    end
    return parts
end

local function unlockAllMapAreas()
    local FogFolder = workspace.Map.Boundaries.Fog
    local tweenTime = 1.5
    local easingStyle = Enum.EasingStyle.Quad
    local easingDir = Enum.EasingDirection.Out
    local offsetY = 3
    
    -- Reset map unlock variables
    stopMapUnlocking = false
    mapUnlockVisitedParts = {}
    
    Fluent:Notify({
        Title = "Map Unlocking Started",
        Content = "Unlocking all remaining map areas...",
        Duration = 3
    })
    
    while not stopMapUnlocking and AUTO_FARM_ENABLED do
        local parts = getValidMapUnlockParts(FogFolder)
        if #parts == 0 then
            Fluent:Notify({
                Title = "Map Unlock Complete",
                Content = "All map areas have been unlocked!",
                Duration = 5
            })
            break
        end
        
        for _, part in ipairs(parts) do
            if stopMapUnlocking or not AUTO_FARM_ENABLED then break end
            if HumanoidRootPart and part then
                local goalCFrame = part.CFrame * CFrame.new(0, offsetY, 0)
                local tweenInfo = TweenInfo.new(tweenTime, easingStyle, easingDir)
                local tween = TweenService:Create(HumanoidRootPart, tweenInfo, {CFrame = goalCFrame})
                tween:Play()
                tween.Completed:Wait()
                mapUnlockVisitedParts[part] = true
            end
        end
        RunService.Heartbeat:Wait()
    end
end

-- Children Collection System
local function collectAllChildren()
    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local player = Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local hrp = character:WaitForChild("HumanoidRootPart")

    -- Inventory and collection setup
    local inventory = player:WaitForChild("Inventory")
    local oldSack = inventory:WaitForChild("Old Sack")
    local remote = ReplicatedStorage:WaitForChild("RemoteEvents"):WaitForChild("RequestBagStoreItem")
    local itemBag = player:WaitForChild("ItemBag")

    -- Track collection status
    local childrenStatus = {
        ["Lost Child"] = false,
        ["Lost Child2"] = false,
        ["Lost Child3"] = false,
        ["Lost Child4"] = false
    }

    -- Function to check if child is already in bag
    local function isChildInBag(name)
        return itemBag:FindFirstChild(name) ~= nil
    end

    -- Function to pick up a Lost Child with verification
    local function pickupChild(name, maxAttempts)
        maxAttempts = maxAttempts or 3
        local attempts = 0
        
        while attempts < maxAttempts and AUTO_FARM_ENABLED do
            attempts = attempts + 1
            
            -- Check if already collected
            if isChildInBag(name) then
                childrenStatus[name] = true
                Fluent:Notify({
                    Title = "Child Already Collected",
                    Content = name .. " is already in your bag",
                    Duration = 2
                })
                return true
            end
            
            local characters = workspace:WaitForChild("Characters")
            local childNPC = characters:FindFirstChild(name)
            
            if childNPC then
                local args = {oldSack, childNPC}
                local success, result = pcall(function()
                    return remote:InvokeServer(unpack(args))
                end)
                
                if success then
                    -- Wait a moment and verify collection
                    task.wait(2)
                    if isChildInBag(name) then
                        childrenStatus[name] = true
                        Fluent:Notify({
                            Title = "Child Collected",
                            Content = "Successfully collected " .. name,
                            Duration = 2
                        })
                        return true
                    end
                end
            else
                Fluent:Notify({
                    Title = "Child Not Found",
                    Content = name .. " not found in workspace",
                    Duration = 2
                })
                break
            end
            
            if attempts < maxAttempts then
                task.wait(2)
            end
        end
        
        return false
    end

    Fluent:Notify({
        Title = "Children Collection Started",
        Content = "Starting teleportation and collection sequence...",
        Duration = 3
    })

    -- CHILD 1: Lost Child
    if AUTO_FARM_ENABLED then
        local characters = workspace:WaitForChild("Characters")
        local npc1 = characters:FindFirstChild("Lost Child")
        
        if npc1 and npc1:FindFirstChild("HumanoidRootPart") then
            local npcHRP1 = npc1:WaitForChild("HumanoidRootPart")
            hrp.CFrame = npcHRP1.CFrame + Vector3.new(0, 3, 0)
            task.wait(2)
            pickupChild("Lost Child")
        end
        task.wait(2)
    end

    -- CHILD 2: Lost Child2
    if AUTO_FARM_ENABLED then
        local firstCFrame2 = CFrame.new(
            -79.5802002, 1.59426916, 519.86499, 
            0.478056967, 0, 0.8783288, 
            0, 1, 0, 
            -0.8783288, 0, 0.478056967
        )
        hrp.CFrame = firstCFrame2
        task.wait(2)
        
        local characters = workspace:WaitForChild("Characters")
        local npc2 = characters:FindFirstChild("Lost Child2")
        if npc2 and npc2:FindFirstChild("HumanoidRootPart") then
            hrp.CFrame = npc2.HumanoidRootPart.CFrame + Vector3.new(0, 3, 0)
            task.wait(2)
            pickupChild("Lost Child2")
        end
        task.wait(2)
    end

    -- CHILD 3: Lost Child3
    if AUTO_FARM_ENABLED then
        local firstCFrame3 = CFrame.new(
            755.127075, 3.54653406, -424.745117,
            -1, 0, 0,
            0, 1, 0,
            0, 0, -1
        )
        hrp.CFrame = firstCFrame3
        task.wait(2)
        
        local characters = workspace:WaitForChild("Characters")
        local npc3 = characters:FindFirstChild("Lost Child3")
        if npc3 and npc3:FindFirstChild("HumanoidRootPart") then
            hrp.CFrame = npc3.HumanoidRootPart.CFrame + Vector3.new(0, 3, 0)
            task.wait(2)
            pickupChild("Lost Child3")
        end
        task.wait(2)
    end

    -- CHILD 4: Lost Child4
    if AUTO_FARM_ENABLED then
        local strongholdCFrame = CFrame.new(
            -560, -0.598167777, -280,
            -1, 0, 0,
            0, 1, 0,
            0, 0, -1
        )
        hrp.CFrame = strongholdCFrame
        task.wait(2)

        repeat
            task.wait(0.5)
        until workspace:FindFirstChild("Terrain") and workspace.Terrain:IsA("Terrain") and workspace.Terrain:FindFirstChildOfClass("Folder") == nil

        local secondCFrame4 = CFrame.new(
            -915.5, -1.05412531, -530,
            0, 0, 1,
            0, 1, 0,
            -1, 0, 0
        )
        hrp.CFrame = secondCFrame4
        task.wait(2)

        local characters = workspace:WaitForChild("Characters")
        local npc4 = characters:FindFirstChild("Lost Child4")
        if npc4 and npc4:FindFirstChild("HumanoidRootPart") then
            hrp.CFrame = npc4.HumanoidRootPart.CFrame + Vector3.new(0, 3, 0)
            task.wait(2)
            pickupChild("Lost Child4")
        end
        task.wait(2)
    end

    -- Check collection results
    local collectedCount = 0
    local collectedChildren = {}
    
    for childName, collected in pairs(childrenStatus) do
        if collected then
            collectedCount = collectedCount + 1
            table.insert(collectedChildren, childName)
        end
    end

    if collectedCount > 0 and AUTO_FARM_ENABLED then
        -- Teleport back to Main Fire
        local mainFirePos = getMainFirePosition()
        teleportToPosition(mainFirePos)
        task.wait(3)
        
        Fluent:Notify({
            Title = "Dropping Children",
            Content = "Dropping " .. collectedCount .. " Lost Children at Main Fire...",
            Duration = 3
        })

        -- Drop all children at Main Fire
        local dropRemote = ReplicatedStorage:WaitForChild("RemoteEvents"):WaitForChild("RequestBagDropItem")
        local droppedCount = 0
        
        local function dropChild(name)
            local childInBag = itemBag:FindFirstChild(name)
            if childInBag then
                local success, result = pcall(function()
                    dropRemote:FireServer(oldSack, childInBag, false)
                end)
                
                if success then
                    droppedCount = droppedCount + 1
                    Fluent:Notify({
                        Title = "Child Dropped",
                        Content = "Successfully dropped " .. name .. " at Main Fire",
                        Duration = 2
                    })
                end
                task.wait(0.5)
            end
        end
        
        for _, childName in ipairs(collectedChildren) do
            dropChild(childName)
        end

        Fluent:Notify({
            Title = "Children Collection Complete!",
            Content = "Successfully dropped " .. droppedCount .. " Lost Children at Main Fire!",
            Duration = 5
        })
    end
    
    childrenCollectionComplete = true
end

-- Main Auto Farm Logic (complete automation with level checking and diamond chest integration)
local function startCompleteAutoFarm()
    task.spawn(function()
        -- Reset all variables
        stopTweening = false
        visitedParts = {}
        fogClearingComplete = false
        stopMapUnlocking = false
        mapUnlockVisitedParts = {}
        childrenCollectionComplete = false
        
        -- Check for diamond chest first (only stop if no timer)
        for _, child in ipairs(Items:GetChildren()) do
            if child.Name == "Stronghold Diamond Chest" then
                if strongholdTimerActive then
                    Fluent:Notify({
                        Title = "Diamond Chest Found - Timer Active",
                        Content = "Stronghold timer running - continuing auto farm as normal",
                        Duration = 3
                    })
                    -- Continue with auto farm
                else
                    AUTO_FARM_ENABLED = false
                    Fluent:Notify({
                        Title = "DIAMOND CHEST DETECTED!",
                        Content = "No timer active - Auto farm cancelled - teleporting to Diamond Chest!",
                        Duration = 5
                    })
                    
                    local itemPosition
                    if child:IsA("Model") then
                        itemPosition = child:GetModelCFrame().Position
                    elseif child:IsA("BasePart") then
                        itemPosition = child.Position
                    end
                    
                    if itemPosition then
                        local targetPosition = itemPosition + Vector3.new(0, 5, 0)
                        teleportToPosition(targetPosition)
                    end
                    return
                end
            end
        end
        
        -- Check current fire level
        local fireLevel = getCurrentFireLevel()
        
        if isFullyRevealed or fireLevel >= 999 then
            Fluent:Notify({
                Title = "Fire Already Complete",
                Content = "Fire is fully upgraded! Skipping to map unlock and children collection...",
                Duration = 3
            })
        elseif fireLevel >= 2 then
            Fluent:Notify({
                Title = "Fire Level " .. fireLevel .. " Detected",
                Content = "Skipping fog clearing - proceeding to tree farming phase...",
                Duration = 3
            })
            fogClearingComplete = true
        else
            -- STEP 1: Clear fog areas (only if fire level is below 2)
            Fluent:Notify({
                Title = "Fire Level " .. fireLevel .. " - Complete Auto Farm Started",
                Content = "Step 1/4: Clearing fog areas...",
                Duration = 3
            })
            tweenToFogParts()
            
            -- Wait for fog clearing to complete
            while not fogClearingComplete and AUTO_FARM_ENABLED do
                task.wait(1)
            end
        end
        
        -- Check for diamond chest again before tree farming (only stop if no timer)
        if AUTO_FARM_ENABLED then
            for _, child in ipairs(Items:GetChildren()) do
                if child.Name == "Stronghold Diamond Chest" then
                    if strongholdTimerActive then
                        Fluent:Notify({
                            Title = "Diamond Chest Found - Timer Active",
                            Content = "Stronghold timer running - continuing tree farming",
                            Duration = 2
                        })
                        -- Continue with tree farming
                    else
                        AUTO_FARM_ENABLED = false
                        Fluent:Notify({
                            Title = "DIAMOND CHEST APPEARED!",
                            Content = "No timer active - Auto farm stopped - teleporting to Diamond Chest!",
                            Duration = 5
                        })
                        
                        local itemPosition
                        if child:IsA("Model") then
                            itemPosition = child:GetModelCFrame().Position
                        elseif child:IsA("BasePart") then
                            itemPosition = child.Position
                        end
                        
                        if itemPosition then
                            local targetPosition = itemPosition + Vector3.new(0, 5, 0)
                            teleportToPosition(targetPosition)
                        end
                        return
                    end
                end
            end
        end
        
        -- STEP 2: Tree farming phase (skip if already fully revealed)
        if not isFullyRevealed and fireLevel < 999 then
            Fluent:Notify({
                Title = "Auto Farm Progress",
                Content = "Step 2/4: Starting tree farming phase...",
                Duration = 3
            })
            
            while AUTO_FARM_ENABLED and not isFullyRevealed do
                -- Check for diamond chest during tree farming (only stop if no timer)
                for _, child in ipairs(Items:GetChildren()) do
                    if child.Name == "Stronghold Diamond Chest" then
                        if strongholdTimerActive then
                            -- Timer is active, just notify but continue farming
                            if math.random(1, 10) == 1 then -- Reduce spam, only notify occasionally
                                Fluent:Notify({
                                    Title = "Diamond Chest Available - Timer Active",
                                    Content = "Continuing auto farm while stronghold timer is running",
                                    Duration = 2
                                })
                            end
                        else
                            AUTO_FARM_ENABLED = false
                            Fluent:Notify({
                                Title = "DIAMOND CHEST APPEARED!",
                                Content = "Timer finished - Tree farming stopped - teleporting to Diamond Chest!",
                                Duration = 5
                            })
                            
                            local itemPosition
                            if child:IsA("Model") then
                                itemPosition = child:GetModelCFrame().Position
                            elseif child:IsA("BasePart") then
                                itemPosition = child.Position
                            end
                            
                            if itemPosition then
                                local targetPosition = itemPosition + Vector3.new(0, 5, 0)
                                teleportToPosition(targetPosition)
                            end
                            return
                        end
                    end
                end
                
                local treePosition = findSmallTree()
                if treePosition then
                    teleportToPosition(treePosition)
                    task.wait(2)
                    
                    local treesRemaining = countSmallTrees()
                    while treesRemaining > 0 and AUTO_FARM_ENABLED and not isFullyRevealed do
                        local chopped = chopSmallTrees()
                        if chopped > 0 then
                            Fluent:Notify({
                                Title = "Chopping Trees",
                                Content = "Chopped " .. chopped .. " Small Trees",
                                Duration = 1
                            })
                        end
                        
                        task.wait(1)
                        treesRemaining = countSmallTrees()
                    end
                else
                    local fallbackCFrame = getNextFallbackPosition()
                    teleportToPosition(fallbackCFrame)
                    task.wait(2)
                    
                    local chopped = chopSmallTrees()
                    if chopped > 0 then
                        Fluent:Notify({
                            Title = "Trees Found at Fallback",
                            Content = "Chopped " .. chopped .. " Small Trees at fallback position",
                            Duration = 2
                        })
                    end
                    
                    task.wait(3)
                end
                
                local mainFirePos = getMainFirePosition()
                teleportToPosition(mainFirePos)
                task.wait(2)
                
                local collected = collectLogsToMainFire()
                if collected > 0 then
                    Fluent:Notify({
                        Title = "Logs Collected",
                        Content = "Collected " .. collected .. " logs to Main Fire",
                        Duration = 2
                    })
                end
                
                task.wait(3)
            end
        end
        
        if isFullyRevealed or fireLevel >= 999 then
            Fluent:Notify({
                Title = "Tree Farming Complete!",
                Content = "Step 3/4: Fire fully upgraded! Starting map unlock...",
                Duration = 5
            })
            
            -- STEP 3: Unlock all map areas
            unlockAllMapAreas()
            
            -- Wait for map unlocking to complete
            while not stopMapUnlocking and AUTO_FARM_ENABLED do
                -- Check for diamond chest during map unlock (only stop if no timer)
                for _, child in ipairs(Items:GetChildren()) do
                    if child.Name == "Stronghold Diamond Chest" then
                        if strongholdTimerActive then
                            if math.random(1, 15) == 1 then -- Reduce spam even more during map unlock
                                Fluent:Notify({
                                    Title = "Diamond Chest Available - Timer Active",
                                    Content = "Continuing map unlock while stronghold timer is running",
                                    Duration = 2
                                })
                            end
                        else
                            AUTO_FARM_ENABLED = false
                            stopMapUnlocking = true
                            Fluent:Notify({
                                Title = "DIAMOND CHEST APPEARED!",
                                Content = "Timer finished - Map unlock stopped - teleporting to Diamond Chest!",
                                Duration = 5
                            })
                            
                            local itemPosition
                            if child:IsA("Model") then
                                itemPosition = child:GetModelCFrame().Position
                            elseif child:IsA("BasePart") then
                                itemPosition = child.Position
                            end
                            
                            if itemPosition then
                                local targetPosition = itemPosition + Vector3.new(0, 5, 0)
                                teleportToPosition(targetPosition)
                            end
                            return
                        end
                    end
                end
                
                local parts = getValidMapUnlockParts(workspace.Map.Boundaries.Fog)
                if #parts == 0 then
                    break
                end
                task.wait(1)
            end
            
            Fluent:Notify({
                Title = "Map Unlock Complete!",
                Content = "Step 4/4: Starting children collection in 3 seconds...",
                Duration = 3
            })
            
            -- Wait 3 seconds before starting children collection
            task.wait(3)
            
            -- Final check for diamond chest before children collection (only stop if no timer)
            if AUTO_FARM_ENABLED then
                for _, child in ipairs(Items:GetChildren()) do
                    if child.Name == "Stronghold Diamond Chest" then
                        if strongholdTimerActive then
                            Fluent:Notify({
                                Title = "Diamond Chest Available - Timer Active",
                                Content = "Proceeding with children collection while timer runs",
                                Duration = 2
                            })
                        else
                            AUTO_FARM_ENABLED = false
                            Fluent:Notify({
                                Title = "DIAMOND CHEST APPEARED!",
                                Content = "Timer finished - Children collection cancelled - teleporting to Diamond Chest!",
                                Duration = 5
                            })
                            
                            local itemPosition
                            if child:IsA("Model") then
                                itemPosition = child:GetModelCFrame().Position
                            elseif child:IsA("BasePart") then
                                itemPosition = child.Position
                            end
                            
                            if itemPosition then
                                local targetPosition = itemPosition + Vector3.new(0, 5, 0)
                                teleportToPosition(targetPosition)
                            end
                            return
                        end
                    end
                end
            end
            
            -- STEP 4: Collect all children
            if AUTO_FARM_ENABLED then
                collectAllChildren()
                
                -- Wait for children collection to complete
                while not childrenCollectionComplete and AUTO_FARM_ENABLED do
                    task.wait(1)
                end
                
                Fluent:Notify({
                    Title = "COMPLETE AUTO FARM FINISHED!",
                    Content = "All steps completed successfully!",
                    Duration = 10
                })
            end
            
            AUTO_FARM_ENABLED = false
        end
    end)
end

-- FARM TAB GUI Elements
FarmTab:AddSection("Complete Auto Farm System")

local AutoFarmToggle = FarmTab:AddToggle("CompleteAutoFarm", {
    Title = "Complete Auto Farm (All-in-One)",
    Default = false,
    Callback = function(Value)
        AUTO_FARM_ENABLED = Value
        if Value then
            if isFullyRevealed then
                Fluent:Notify({
                    Title = "Already Complete",
                    Content = "Fire is already fully upgraded!",
                    Duration = 3
                })
                AUTO_FARM_ENABLED = false
                return
            end
            
            startCompleteAutoFarm()
            Fluent:Notify({
                Title = "Complete Auto Farm Started",
                Content = "Running: Fog Clear → Tree Farm → Map Unlock → Children Collection",
                Duration = 5
            })
        else
            stopTweening = true
            stopMapUnlocking = true
            Fluent:Notify({
                Title = "Auto Farm Stopped",
                Content = "All automation stopped",
                Duration = 2
            })
        end
    end
})

FarmTab:AddButton({
    Title = "Collect All Logs to Main Fire",
    Callback = function()
        local collected = collectLogsToMainFire()
        Fluent:Notify({
            Title = "Logs Collected",
            Content = "Collected " .. collected .. " logs to Main Fire",
            Duration = 3
        })
    end
})

-- UTILITY TAB GUI Elements
UtilityTab:AddSection("Diamond Chest Detection")

local DiamondChestToggle = UtilityTab:AddToggle("DiamondChestDetection", {
    Title = "Diamond Chest Auto-Detection",
    Default = true,
    Callback = function(Value)
        DIAMOND_CHEST_DETECTION = Value
        if Value then
            setupDiamondChestDetection()
            Fluent:Notify({
                Title = "Diamond Chest Detection On",
                Content = "Will auto detect and teleport to Diamond Chests",
                Duration = 2
            })
        else
            if diamondChestConnection then
                diamondChestConnection:Disconnect()
                diamondChestConnection = nil
            end
            Fluent:Notify({
                Title = "Diamond Chest Detection Off",
                Content = "Auto detection stopped",
                Duration = 2
            })
        end
    end
})

UtilityTab:AddButton({
    Title = "Search for Diamond Chest",
    Callback = function()
        local found = false
        for _, child in ipairs(Items:GetChildren()) do
            if child.Name == "Stronghold Diamond Chest" then
                found = true
                local itemPosition
                if child:IsA("Model") then
                    itemPosition = child:GetModelCFrame().Position
                elseif child:IsA("BasePart") then
                    itemPosition = child.Position
                end
                
                if itemPosition then
                    local targetPosition = itemPosition + Vector3.new(0, 5, 0)
                    teleportToPosition(targetPosition)
                    Fluent:Notify({
                        Title = "Diamond Chest Found!",
                        Content = "Teleporting to Diamond Chest location",
                        Duration = 3
                    })
                end
                break
            end
        end
        
        if not found then
            Fluent:Notify({
                Title = "No Diamond Chest",
                Content = "No Diamond Chest currently available on map",
                Duration = 3
            })
        end
    end
})

-- Initialize systems
initializeFireLevelTracking()
initializeStrongholdTracking()
setupDiamondChestDetection()

-- Auto-enable anti-void in background
if ANTI_VOID_ENABLED then
    enableAntiVoid()
end

-- Game detection notification
if gameDetected then
    Fluent:Notify({
        Title = "Streamlined Auto Farm Loaded",
        Content = "Ready for complete automation with anti-void protection!",
        Duration = 3
    })
else
    Fluent:Notify({
        Title = "Warning",
        Content = "Game may not be supported",
        Duration = 5
    })
end
