-- Bunny Hop PC only (WASD Glide + Bhop + Toggle + Optimized)
-- Credits: Jesse_VIP

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local UserInputType = Enum.UserInputType

local lp = Players.LocalPlayer

-- Prevent running on mobile/touch devices
local function isMobile()
	for _, device in pairs(Enum.UserInputType:GetEnumItems()) do
		if device == UserInputType.Touch or device == UserInputType.Accelerometer then
			-- We check if this input type is supported on current device
			-- If so, assume mobile/touch device
			if UIS:GetLastInputType() == device then
				return true
			end
		end
	end
	-- Alternative simple check:
	return UIS.TouchEnabled
end

if isMobile() then
	warn("[Bunny Hop PC only] Mobile device detected. Script will not run.")
	return
end

local char = lp.Character or lp.CharacterAdded:Wait()
local hum = char:WaitForChild("Humanoid")
local hrp = char:WaitForChild("HumanoidRootPart")

-- Settings
local glideEnabled = true
local glideForce = 3
local baseSpeed = 30

-- GUI Setup
local gui = Instance.new("ScreenGui")
gui.Name = "Bunny Hop PC only"
gui.ResetOnSpawn = false
gui.Parent = game.CoreGui

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 220, 0, 170)
frame.Position = UDim2.new(0.02, 0, 0.4, 0)
frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
frame.BorderSizePixel = 0
frame.Active = true
frame.Draggable = true
frame.Parent = gui

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 25)
title.Text = "Bunny Hop PC only"
title.TextColor3 = Color3.new(1, 1, 1)
title.BackgroundTransparency = 1
title.Font = Enum.Font.SourceSansBold
title.TextSize = 20
title.Parent = frame

local speedLabel = Instance.new("TextLabel")
speedLabel.Position = UDim2.new(0, 0, 0, 30)
speedLabel.Size = UDim2.new(1, 0, 0, 20)
speedLabel.Text = "Speed: " .. baseSpeed
speedLabel.TextColor3 = Color3.new(1, 1, 1)
speedLabel.BackgroundTransparency = 1
speedLabel.Font = Enum.Font.SourceSans
speedLabel.TextSize = 18
speedLabel.Parent = frame

local inputBox = Instance.new("TextBox")
inputBox.Position = UDim2.new(0, 0, 0, 55)
inputBox.Size = UDim2.new(1, 0, 0, 25)
inputBox.PlaceholderText = "Enter speed (e.g. 50)"
inputBox.Text = ""
inputBox.TextColor3 = Color3.new(1, 1, 1)
inputBox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
inputBox.BorderSizePixel = 0
inputBox.Font = Enum.Font.SourceSans
inputBox.TextSize = 16
inputBox.ClearTextOnFocus = false
inputBox.Parent = frame

local toggleButton = Instance.new("TextButton")
toggleButton.Position = UDim2.new(0, 0, 0, 90)
toggleButton.Size = UDim2.new(1, 0, 0, 25)
toggleButton.Text = "Glide: ON"
toggleButton.TextColor3 = Color3.new(1, 1, 1)
toggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
toggleButton.Font = Enum.Font.SourceSansBold
toggleButton.TextSize = 18
toggleButton.Parent = frame

local infoLabel = Instance.new("TextLabel")
infoLabel.Position = UDim2.new(0, 0, 0, 125)
infoLabel.Size = UDim2.new(1, 0, 0, 40)
infoLabel.Text = "Use WASD to move while gliding.\nToggle with the button above."
infoLabel.TextColor3 = Color3.new(1, 1, 1)
infoLabel.BackgroundTransparency = 1
infoLabel.Font = Enum.Font.SourceSansItalic
infoLabel.TextSize = 14
infoLabel.TextWrapped = true
infoLabel.Parent = frame

-- Toggle logic
toggleButton.MouseButton1Click:Connect(function()
	glideEnabled = not glideEnabled
	toggleButton.Text = "Glide: " .. (glideEnabled and "ON" or "OFF")
end)

-- Speed box logic
inputBox.FocusLost:Connect(function(enter)
	if enter then
		local speed = tonumber(inputBox.Text)
		if speed and speed > 0 then
			baseSpeed = speed
			if hum then
				hum.WalkSpeed = baseSpeed
			end
			speedLabel.Text = "Speed: " .. baseSpeed
		end
	end
end)

-- Setup character on spawn (memory-safe)
local function setupChar(character)
	char = character
	hum = char:WaitForChild("Humanoid")
	hrp = char:WaitForChild("HumanoidRootPart")
	task.wait(0.2)
	hum.WalkSpeed = baseSpeed
end
lp.CharacterAdded:Connect(setupChar)

-- Helper function: get movement input direction vector based on WASD keys
local function getInputDirection()
	local dir = Vector3.new()
	if UIS:IsKeyDown(Enum.KeyCode.W) then
		dir = dir + Vector3.new(0, 0, 1)
	end
	if UIS:IsKeyDown(Enum.KeyCode.S) then
		dir = dir + Vector3.new(0, 0, -1)
	end
	if UIS:IsKeyDown(Enum.KeyCode.A) then
		dir = dir + Vector3.new(-1, 0, 0)
	end
	if UIS:IsKeyDown(Enum.KeyCode.D) then
		dir = dir + Vector3.new(1, 0, 0)
	end
	if dir.Magnitude > 0 then
		return dir.Unit
	else
		return Vector3.new(0,0,0)
	end
end

-- Main movement loop
RunService.Heartbeat:Connect(function()
	if not glideEnabled or not char or not hum or hum.Health <= 0 then return end

	-- Bunnyhop (only when on ground)
	if hum.FloorMaterial ~= Enum.Material.Air then
		hum:ChangeState(Enum.HumanoidStateType.Jumping)
	end

	-- Glide in direction of WASD input relative to camera
	local inputDir = getInputDirection()
	if inputDir.Magnitude > 0 then
		local camCFrame = workspace.CurrentCamera.CFrame
		-- Convert inputDir to world space relative to camera look (ignore vertical)
		local moveDir = (camCFrame.RightVector * inputDir.X + camCFrame.LookVector * inputDir.Z)
		moveDir = Vector3.new(moveDir.X, 0, moveDir.Z).Unit

		hrp.Velocity = Vector3.new(
			moveDir.X * baseSpeed * glideForce,
			hrp.Velocity.Y,
			moveDir.Z * baseSpeed * glideForce
		)
	end
end)
